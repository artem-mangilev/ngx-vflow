"use strict";(self.webpackChunkngx_vflow_demo=self.webpackChunkngx_vflow_demo||[]).push([[1897],{1897:(w,o,e)=>{e.r(o),e.d(o,{DynamicComponent:()=>d,default:()=>v});var p=e(6286),i=e(7134),g=e(9143),r=e(8341),h=e(2898),s=e(5879),j=e(692);const c={title:"Connection validation",mdFile:"./index.md",category:r.Z,demos:{ConnectionValidationDemoComponent:(()=>{class a{constructor(){this.nodes=[{id:"1",point:{x:100,y:100},type:"default",text:"1"},{id:"2",point:{x:200,y:200},type:"default",text:"2"}],this.edges=[],this.conectionSettings={validator:l=>"1"===l.source&&"2"===l.target}}createEdge({source:l,target:n}){this.edges=[...this.edges,{id:`${l} -> ${n}`,source:l,target:n}]}static#s=this.\u0275fac=function(n){return new(n||a)};static#n=this.\u0275cmp=s.Xpm({type:a,selectors:[["ng-component"]],standalone:!0,features:[s.jDz],decls:1,vars:3,consts:[[3,"nodes","edges","connection","onConnect"]],template:function(n,t){1&n&&(s.TgZ(0,"vflow",0),s.NdJ("onConnect",function(C){return t.createEdge(C)}),s.qZA()),2&n&&s.Q6J("nodes",t.nodes)("edges",t.edges)("connection",t.conectionSettings)},dependencies:[h.p,j.t],encapsulation:2,changeDetection:0})}return a})()},order:4},u=[],m={ConnectionValidationDemoComponent:[{title:"TypeScript",code:'<pre class="ngde hljs"><code lang="typescript" class="hljs language-typescript code-lines ngde"><span class="line ngde"><span class="hljs-keyword ngde">import</span> { <span class="hljs-title class_ ngde">ChangeDetectionStrategy</span>, <span class="hljs-title class_ ngde">Component</span> } <span class="hljs-keyword ngde">from</span> <span class="hljs-string ngde">\'@angular/core\'</span>;\n</span><span class="line ngde"><span class="hljs-keyword ngde">import</span> { <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/interfaces/Connection" class="ng-doc-code-anchor ngde" data-link-type="Interface" class="ngde">Connection</a></span>, <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/interfaces/ConnectionSettings" class="ng-doc-code-anchor ngde" data-link-type="Interface" class="ngde">ConnectionSettings</a></span>, <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/interfaces/Edge" class="ng-doc-code-anchor ngde" data-link-type="Interface" class="ngde">Edge</a></span>, <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/type-aliases/Node" class="ng-doc-code-anchor ngde" data-link-type="TypeAlias" class="ngde">Node</a></span>, <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/classes/VflowModule" class="ng-doc-code-anchor ngde" data-link-type="NgModule" class="ngde">VflowModule</a></span> } <span class="hljs-keyword ngde">from</span> <span class="hljs-string ngde">\'projects/ngx-vflow-lib/src/public-api\'</span>;\n</span><span class="line ngde">\n</span><span class="line ngde"><span class="hljs-meta ngde">@Component</span>({\n</span><span class="line ngde">  <span class="hljs-attr ngde">template</span>: <span class="hljs-string ngde">`&#x3C;vflow [nodes]="nodes" [edges]="edges"</span>\n</span><span class="line ngde"><span class="hljs-string ngde">    [connection]="conectionSettings"</span>\n</span><span class="line ngde"><span class="hljs-string ngde">    (onConnect)="createEdge($event)"/></span>\n</span><span class="line ngde"><span class="hljs-string ngde">  `</span>,\n</span><span class="line ngde">  <span class="hljs-attr ngde">changeDetection</span>: <span class="hljs-title class_ ngde">ChangeDetectionStrategy</span>.<span class="hljs-property ngde">OnPush</span>,\n</span><span class="line ngde">  <span class="hljs-attr ngde">standalone</span>: <span class="hljs-literal ngde">true</span>,\n</span><span class="line ngde">  <span class="hljs-attr ngde">imports</span>: [<span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/classes/VflowModule" class="ng-doc-code-anchor ngde" data-link-type="NgModule" class="ngde">VflowModule</a></span>]\n</span><span class="line ngde">})\n</span><span class="line ngde"><span class="hljs-keyword ngde">export</span> <span class="hljs-keyword ngde">class</span> <span class="hljs-title class_ ngde">ConnectionValidationDemoComponent</span> {\n</span><span class="line ngde">  <span class="hljs-keyword ngde">public</span> <span class="hljs-attr ngde">nodes</span>: <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/type-aliases/Node" class="ng-doc-code-anchor ngde" data-link-type="TypeAlias" class="ngde">Node</a></span>[] = [\n</span><span class="line ngde">    {\n</span><span class="line ngde">      <span class="hljs-attr ngde">id</span>: <span class="hljs-string ngde">\'1\'</span>,\n</span><span class="line ngde">      <span class="hljs-attr ngde">point</span>: { <span class="hljs-attr ngde">x</span>: <span class="hljs-number ngde">100</span>, <span class="hljs-attr ngde">y</span>: <span class="hljs-number ngde">100</span> },\n</span><span class="line ngde">      <span class="hljs-attr ngde">type</span>: <span class="hljs-string ngde">\'default\'</span>,\n</span><span class="line ngde">      <span class="hljs-attr ngde">text</span>: <span class="hljs-string ngde">`1`</span>,\n</span><span class="line ngde">    },\n</span><span class="line ngde">    {\n</span><span class="line ngde">      <span class="hljs-attr ngde">id</span>: <span class="hljs-string ngde">\'2\'</span>,\n</span><span class="line ngde">      <span class="hljs-attr ngde">point</span>: { <span class="hljs-attr ngde">x</span>: <span class="hljs-number ngde">200</span>, <span class="hljs-attr ngde">y</span>: <span class="hljs-number ngde">200</span> },\n</span><span class="line ngde">      <span class="hljs-attr ngde">type</span>: <span class="hljs-string ngde">\'default\'</span>,\n</span><span class="line ngde">      <span class="hljs-attr ngde">text</span>: <span class="hljs-string ngde">`2`</span>\n</span><span class="line ngde">    },\n</span><span class="line ngde">  ]\n</span><span class="line ngde">\n</span><span class="line ngde">  <span class="hljs-keyword ngde">public</span> <span class="hljs-attr ngde">edges</span>: <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/interfaces/Edge" class="ng-doc-code-anchor ngde" data-link-type="Interface" class="ngde">Edge</a></span>[] = []\n</span><span class="line ngde">\n</span><span class="line ngde">  <span class="hljs-keyword ngde">public</span> <span class="hljs-attr ngde">conectionSettings</span>: <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/interfaces/ConnectionSettings" class="ng-doc-code-anchor ngde" data-link-type="Interface" class="ngde">ConnectionSettings</a></span> = {\n</span><span class="line ngde">    <span class="hljs-attr ngde">validator</span>: <span class="hljs-function ngde">(<span class="hljs-params ngde">connection</span>) =></span> connection.<span class="hljs-property ngde">source</span> === <span class="hljs-string ngde">\'1\'</span> &#x26;&#x26; connection.<span class="hljs-property ngde">target</span> === <span class="hljs-string ngde">\'2\'</span>\n</span><span class="line ngde">  }\n</span><span class="line ngde">\n</span><span class="line ngde">  <span class="hljs-keyword ngde">public</span> <span class="hljs-title function_ ngde">createEdge</span>(<span class="hljs-params ngde">{ source, target }: <a href="/api/ngx-vflow/interfaces/Connection" class="ng-doc-code-anchor ngde" data-link-type="Interface" class="ngde">Connection</a></span>) {\n</span><span class="line ngde">    <span class="hljs-variable language_ ngde">this</span>.<span class="hljs-property ngde">edges</span> = [...<span class="hljs-variable language_ ngde">this</span>.<span class="hljs-property ngde">edges</span>, {\n</span><span class="line ngde">      <span class="hljs-attr ngde">id</span>: <span class="hljs-string ngde">`<span class="hljs-subst ngde">${source}</span> -> <span class="hljs-subst ngde">${target}</span>`</span>,\n</span><span class="line ngde">      source,\n</span><span class="line ngde">      target\n</span><span class="line ngde">    }]\n</span><span class="line ngde">  }\n</span><span class="line ngde">}\n</span></code></pre>'}]};let d=(()=>{class a extends p.a{constructor(){super(),this.routePrefix="",this.pageType="guide",this.pageContent='<h1 id="connection-validation" class="ngde">Connection validation<a title="Link to heading" class="ng-doc-header-link ngde" href="/examples/connection-validation#connection-validation"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h1><p class="ngde"><code class="ngde">ngx-vflow</code> supports realtime sync validation of connections. Validation performs on user attempt to create new edge. By default, every connection is valid, but you can provide <code class="ngde ng-doc-code-with-link" class="ngde"><a href="/api/ngx-vflow/interfaces/ConnectionSettings" class="ng-doc-code-anchor ngde" data-link-type="Interface" class="ngde">ConnectionSettings</a></code> with <code class="ngde">validatior</code> callback where you specify validation logic.</p><p class="ngde">For example, in this case validation passes only connection from 1 to 2 node. If <code class="ngde">validator</code> returns <code class="ngde">false</code>, <code class="ngde">(onConnect)</code> even won\'t be called because there is no valid connection.</p><ng-doc-demo componentname="ConnectionValidationDemoComponent" indexable="false" class="ngde"><div id="options" class="ngde">{"expanded":true}</div></ng-doc-demo>',this.page=c,this.demoAssets=m}static#s=this.\u0275fac=function(n){return new(n||a)};static#n=this.\u0275cmp=s.Xpm({type:a,selectors:[["ng-doc-page-examples-connection-validation"]],standalone:!0,features:[s._Bn([{provide:p.a,useExisting:a},u,c.providers??[]]),s.qOj,s.jDz],decls:1,vars:0,template:function(n,t){1&n&&s._UZ(0,"ng-doc-page")},dependencies:[i.z],encapsulation:2,changeDetection:0})}return a})();const v=[{...(0,g.isRoute)(c.route)?c.route:{},path:"",component:d,title:"Connection validation"}]}}]);
import{a as w}from"./chunk-S3I3S5BX.js";import{D as x}from"./chunk-YSOKYGOL.js";import{a as v}from"./chunk-XEAWODMG.js";import"./chunk-5DYL7VP6.js";import{a as g}from"./chunk-PKRD3RVL.js";import{Ba as m,Ga as f,R as p,Ta as o,pb as j,qb as c,rb as y,wc as D}from"./chunk-CG7QMWE5.js";import{a as h,b as u,g as C}from"./chunk-ODLL2QMY.js";var z=C(D());var _=()=>({virtualization:!0}),k=(()=>{class s{constructor(){this.nodes=[],this.edges=[];let{nodes:a,edges:n}=T(70,70);this.nodes=a,this.edges=n}static{this.\u0275fac=function(n){return new(n||s)}}static{this.\u0275cmp=p({type:s,selectors:[["ng-component"]],standalone:!0,features:[c],decls:2,vars:5,consts:[["vflow",""],["view","auto",3,"nodes","edges","minZoom","optimization"]],template:function(n,e){n&1&&o(0,"vflow",1,0),n&2&&f("nodes",e.nodes)("edges",e.edges)("minZoom",.1)("optimization",y(4,_))},dependencies:[x],styles:["[_nghost-%COMP%]{width:100%;height:100%}"],changeDetection:0})}}return s})();function T(s=10,r=10){let a=[],n=[],e=1,i=null;for(let t=0;t<r;t++)for(let d=0;d<s;d++)a.push({type:"default",id:`stress-${e}`,text:`Node ${e}`,point:{x:d*150,y:t*100}}),i&&e<=s*r&&n.push({id:`${d}-${t}`,source:`stress-${i}`,target:`stress-${e}`}),i=e,e++;return{nodes:a,edges:n}}var S={title:"Virtualization",mdFile:"./index.md",category:w,demos:{VirtualizationDemoComponent:k},order:2},l=S;var b=[];var V={VirtualizationDemoComponent:[{title:"TypeScript",code:`<pre class="ngde hljs"><code lang="typescript" class="hljs language-typescript code-lines ngde"><span class="line ngde"><span class="hljs-keyword ngde">import</span> { <span class="hljs-title class_ ngde">ChangeDetectionStrategy</span>, <span class="hljs-title class_ ngde">Component</span> } <span class="hljs-keyword ngde">from</span> <span class="hljs-string ngde">'@angular/core'</span>;
</span><span class="line ngde"><span class="hljs-keyword ngde">import</span> { <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/interfaces/Edge" class="ng-doc-code-anchor ngde" data-link-type="Interface" class="ngde">Edge</a></span>, <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/type-aliases/Node" class="ng-doc-code-anchor ngde" data-link-type="TypeAlias" class="ngde">Node</a></span>, <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/variables/Vflow" class="ng-doc-code-anchor ngde" data-link-type="Variable" class="ngde">Vflow</a></span> } <span class="hljs-keyword ngde">from</span> <span class="hljs-string ngde">'ngx-vflow'</span>;
</span><span class="line ngde">
</span><span class="line ngde"><span class="hljs-meta ngde">@Component</span>({
</span><span class="line ngde">  <span class="hljs-attr ngde">templateUrl</span>: <span class="hljs-string ngde">'./virtualization-demo.component.html'</span>,
</span><span class="line ngde">  <span class="hljs-attr ngde">styleUrls</span>: [<span class="hljs-string ngde">'./virtualization-demo.component.scss'</span>],
</span><span class="line ngde">  <span class="hljs-attr ngde">changeDetection</span>: <span class="hljs-title class_ ngde">ChangeDetectionStrategy</span>.<span class="hljs-property ngde">OnPush</span>,
</span><span class="line ngde">  <span class="hljs-attr ngde">standalone</span>: <span class="hljs-literal ngde">true</span>,
</span><span class="line ngde">  <span class="hljs-attr ngde">imports</span>: [<span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/variables/Vflow" class="ng-doc-code-anchor ngde" data-link-type="Variable" class="ngde">Vflow</a></span>],
</span><span class="line ngde">})
</span><span class="line ngde"><span class="hljs-keyword ngde">export</span> <span class="hljs-keyword ngde">class</span> <span class="hljs-title class_ ngde">VirtualizationDemoComponent</span> {
</span><span class="line ngde">  <span class="hljs-keyword ngde">public</span> <span class="hljs-attr ngde">nodes</span>: <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/type-aliases/Node" class="ng-doc-code-anchor ngde" data-link-type="TypeAlias" class="ngde">Node</a></span>[] = [];
</span><span class="line ngde">  <span class="hljs-keyword ngde">public</span> <span class="hljs-attr ngde">edges</span>: <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/interfaces/Edge" class="ng-doc-code-anchor ngde" data-link-type="Interface" class="ngde">Edge</a></span>[] = [];
</span><span class="line ngde">
</span><span class="line ngde">  <span class="hljs-title function_ ngde">constructor</span>(<span class="hljs-params ngde"></span>) {
</span><span class="line ngde">    <span class="hljs-keyword ngde">const</span> { nodes, edges } = <span class="hljs-title function_ ngde">initialElements</span>(<span class="hljs-number ngde">70</span>, <span class="hljs-number ngde">70</span>);
</span><span class="line ngde">    <span class="hljs-variable language_ ngde">this</span>.<span class="hljs-property ngde">nodes</span> = nodes;
</span><span class="line ngde">    <span class="hljs-variable language_ ngde">this</span>.<span class="hljs-property ngde">edges</span> = edges;
</span><span class="line ngde">  }
</span><span class="line ngde">}
</span><span class="line ngde">
</span><span class="line ngde"><span class="hljs-keyword ngde">export</span> <span class="hljs-keyword ngde">function</span> <span class="hljs-title function_ ngde">initialElements</span>(<span class="hljs-params ngde">xNodes = <span class="hljs-number ngde">10</span>, yNodes = <span class="hljs-number ngde">10</span></span>): { <span class="hljs-attr ngde">nodes</span>: <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/type-aliases/Node" class="ng-doc-code-anchor ngde" data-link-type="TypeAlias" class="ngde">Node</a></span>[]; <span class="hljs-attr ngde">edges</span>: <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/interfaces/Edge" class="ng-doc-code-anchor ngde" data-link-type="Interface" class="ngde">Edge</a></span>[] } {
</span><span class="line ngde">  <span class="hljs-keyword ngde">const</span> nodes = [] <span class="hljs-keyword ngde">as</span> <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/type-aliases/Node" class="ng-doc-code-anchor ngde" data-link-type="TypeAlias" class="ngde">Node</a></span>[];
</span><span class="line ngde">  <span class="hljs-keyword ngde">const</span> edges = [] <span class="hljs-keyword ngde">as</span> <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/interfaces/Edge" class="ng-doc-code-anchor ngde" data-link-type="Interface" class="ngde">Edge</a></span>[];
</span><span class="line ngde">
</span><span class="line ngde">  <span class="hljs-keyword ngde">let</span> nodeId = <span class="hljs-number ngde">1</span>;
</span><span class="line ngde">  <span class="hljs-keyword ngde">let</span> recentNodeId = <span class="hljs-literal ngde">null</span>;
</span><span class="line ngde">
</span><span class="line ngde">  <span class="hljs-keyword ngde">for</span> (<span class="hljs-keyword ngde">let</span> y = <span class="hljs-number ngde">0</span>; y &#x3C; yNodes; y++) {
</span><span class="line ngde">    <span class="hljs-keyword ngde">for</span> (<span class="hljs-keyword ngde">let</span> x = <span class="hljs-number ngde">0</span>; x &#x3C; xNodes; x++) {
</span><span class="line ngde">      nodes.<span class="hljs-title function_ ngde">push</span>({
</span><span class="line ngde">        <span class="hljs-attr ngde">type</span>: <span class="hljs-string ngde">'default'</span>,
</span><span class="line ngde">        <span class="hljs-attr ngde">id</span>: <span class="hljs-string ngde">\`stress-<span class="hljs-subst ngde">\${nodeId}</span>\`</span>,
</span><span class="line ngde">        <span class="hljs-attr ngde">text</span>: <span class="hljs-string ngde">\`<a href="/api/ngx-vflow/type-aliases/Node" class="ng-doc-code-anchor ngde" data-link-type="TypeAlias" class="ngde">Node</a> <span class="hljs-subst ngde">\${nodeId}</span>\`</span>,
</span><span class="line ngde">        <span class="hljs-attr ngde">point</span>: { <span class="hljs-attr ngde">x</span>: x * <span class="hljs-number ngde">150</span>, <span class="hljs-attr ngde">y</span>: y * <span class="hljs-number ngde">100</span> },
</span><span class="line ngde">      });
</span><span class="line ngde">
</span><span class="line ngde">      <span class="hljs-keyword ngde">if</span> (recentNodeId &#x26;&#x26; nodeId &#x3C;= xNodes * yNodes) {
</span><span class="line ngde">        edges.<span class="hljs-title function_ ngde">push</span>({
</span><span class="line ngde">          <span class="hljs-attr ngde">id</span>: <span class="hljs-string ngde">\`<span class="hljs-subst ngde">\${x}</span>-<span class="hljs-subst ngde">\${y}</span>\`</span>,
</span><span class="line ngde">          <span class="hljs-attr ngde">source</span>: <span class="hljs-string ngde">\`stress-<span class="hljs-subst ngde">\${recentNodeId}</span>\`</span>,
</span><span class="line ngde">          <span class="hljs-attr ngde">target</span>: <span class="hljs-string ngde">\`stress-<span class="hljs-subst ngde">\${nodeId}</span>\`</span>,
</span><span class="line ngde">        });
</span><span class="line ngde">      }
</span><span class="line ngde">
</span><span class="line ngde">      recentNodeId = nodeId;
</span><span class="line ngde">      nodeId++;
</span><span class="line ngde">    }
</span><span class="line ngde">  }
</span><span class="line ngde">
</span><span class="line ngde">  <span class="hljs-keyword ngde">return</span> { nodes, edges };
</span><span class="line ngde">}
</span></code></pre>`},{title:"HTML",code:`<pre class="ngde hljs"><code lang="html" class="hljs language-html code-lines ngde"><span class="line ngde"><span class="hljs-tag ngde">&#x3C;<span class="hljs-name ngde">vflow</span> #<span class="hljs-attr ngde">vflow</span> <span class="hljs-attr ngde">view</span>=<span class="hljs-string ngde">"auto"</span> [<span class="hljs-attr ngde">nodes</span>]=<span class="hljs-string ngde">"nodes"</span> [<span class="hljs-attr ngde">edges</span>]=<span class="hljs-string ngde">"edges"</span> [<span class="hljs-attr ngde">minZoom</span>]=<span class="hljs-string ngde">"0.1"</span> [<span class="hljs-attr ngde">optimization</span>]=<span class="hljs-string ngde">"{ virtualization: true }"</span> /></span>
</span></code></pre>`},{title:"SCSS",code:`<pre class="ngde hljs"><code lang="scss" class="hljs language-scss code-lines ngde"><span class="line ngde"><span class="hljs-selector-pseudo ngde">:host</span> {
</span><span class="line ngde">  <span class="hljs-attribute ngde">width</span>: <span class="hljs-number ngde">100%</span>;
</span><span class="line ngde">  <span class="hljs-attribute ngde">height</span>: <span class="hljs-number ngde">100%</span>;
</span><span class="line ngde">}
</span></code></pre>`}]},N=V;var P=`<h1 id="virtualization" class="ngde">Virtualization<a title="Link to heading" class="ng-doc-header-link ngde" href="/features/virtualization#virtualization"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h1><ng-doc-blockquote type="warning" class="ngde"><p class="ngde">This is an experimental API. The library still does not support edge previews - only node previews are available.</p></ng-doc-blockquote><p class="ngde">The library supports <strong class="ngde">virtualization</strong>, which helps improve performance when rendering large numbers of nodes. When virtualization is enabled, an additional <code class="ngde">canvas</code> layer is activated alongside the existing <code class="ngde">SVG</code> layer.</p><p class="ngde">During viewport changes (zoom/pan), the canvas layer quickly renders lightweight <strong class="ngde">preview nodes</strong> to ensure smooth interaction. Once the interaction ends, these preview nodes are <strong class="ngde">hydrated</strong> into full-featured, heavy <strong class="ngde">SVG nodes</strong>.</p><p class="ngde">To enable virtualization, set the <code class="ngde">virtualization</code> flag in the <code class="ngde ng-doc-code-with-link" class="ngde"><a href="/api/ngx-vflow/interfaces/Optimization" class="ng-doc-code-anchor ngde" data-link-type="Interface" class="ngde">Optimization</a></code> interface. Additionally, you can use the <code class="ngde">virtualizationZoomThreshold</code> property to specify the minimum zoom level at which previews should be rendered. This helps avoid performance issues by rendering a lot of real <code class="ngde">SVG</code> nodes.</p><ng-doc-blockquote type="info" class="ngde"><p class="ngde">It's important to note that a preview node is a simplified version of a real node. It is rendered on the canvas layer, is <strong class="ngde">not interactive</strong>, and may not visually match the real node exactly (at least for now) \u2014 hence the name <em class="ngde">preview</em>.</p><p class="ngde">However, the library aims to provide a good API for customizing these previews. The <code class="ngde ng-doc-code-with-link" class="ngde"><a href="/api/ngx-vflow/interfaces/NodePreview" class="ng-doc-code-anchor ngde" data-link-type="Interface" class="ngde">NodePreview</a></code> interface allows you to style preview nodes using a subset of <code class="ngde">CSSStyleDeclaration</code>, letting you write familiar, declarative CSS instead of low-level canvas code. The library automatically compiles these styles into appropriate <code class="ngde">canvas</code> calls.</p></ng-doc-blockquote><p class="ngde">To customize the preview for a specific node, use the <code class="ngde">preview</code> property available on both <code class="ngde ng-doc-code-with-link" class="ngde"><a href="/api/ngx-vflow/type-aliases/Node" class="ng-doc-code-anchor ngde" data-link-type="TypeAlias" class="ngde">Node</a></code> and <code class="ngde ng-doc-code-with-link" class="ngde"><a href="/api/ngx-vflow/type-aliases/DynamicNode" class="ng-doc-code-anchor ngde" data-link-type="TypeAlias" class="ngde">DynamicNode</a></code>.</p><ng-doc-demo-pane componentname="VirtualizationDemoComponent" indexable="false" class="ngde"><div id="options" class="ngde">{}</div></ng-doc-demo-pane>`,A=(()=>{class s extends g{constructor(){super(),this.routePrefix="",this.pageType="guide",this.pageContent=P,this.editSourceFileUrl="https://github.com/artem-mangilev/ngx-vflow/edit/main/projects/ngx-vflow-demo/src/app/categories/features/pages/virtualization/index.md?message=docs(virtualization): describe your changes here...",this.page=l,this.demoAssets=N}static{this.\u0275fac=function(n){return new(n||s)}}static{this.\u0275cmp=p({type:s,selectors:[["ng-doc-page-features-virtualization"]],standalone:!0,features:[j([{provide:g,useExisting:s},b,l.providers??[]]),m,c],decls:1,vars:0,template:function(n,e){n&1&&o(0,"ng-doc-page")},dependencies:[v],encapsulation:2,changeDetection:0})}}return s})(),E=[u(h({},(0,z.isRoute)(l.route)?l.route:{}),{path:"",component:A,title:"Virtualization"})],W=E;export{A as DynamicComponent,W as default};

import{a as N}from"./chunk-S3I3S5BX.js";import{z as l}from"./chunk-DBNQT47Y.js";import"./chunk-NA7FJBPQ.js";import{a as L}from"./chunk-ZBKCENK6.js";import"./chunk-G5N4YGVJ.js";import{a as g}from"./chunk-AKRIWIS4.js";import{T as A}from"./chunk-QMHLIXQX.js";import{$b as f,Ac as c,Bc as k,Db as h,Eb as j,Gb as m,Qb as u,ac as y,bc as d,bd as _,cd as z,hc as x,pb as r,qc as w,rc as v,tc as C,wa as t,zc as b}from"./chunk-Z42XPK5A.js";import{a as o,b as i,g as V}from"./chunk-ODLL2QMY.js";var S=V(A());var E=()=>({lazyLoadTrigger:"viewport"}),D=(()=>{class a{constructor(){this.vflow=j.required(l),this.nodes=[{id:"1",point:{x:10,y:150},type:()=>import("./chunk-OQM4QFMJ.js").then(s=>s.NodeAComponent),width:150,height:100},{id:"2",point:{x:1e3,y:150},type:()=>import("./chunk-2ZSYSI3Z.js").then(s=>s.NodeBComponent),width:150,height:100},{id:"3",point:{x:2e3,y:150},type:()=>import("./chunk-ZSGLFW73.js").then(s=>s.NodeCComponent),width:150,height:100}],this.edges=[{id:"1 -> 2",source:"1",target:"2"},{id:"2 -> 3",source:"2",target:"3"}],this.currentNode=h(this.nodes[0]),z(()=>{if(this.vflow().initialized()){let s=this.currentNode();_(()=>this.vflow().fitView({nodes:[s.id],duration:800}))}})}nextNode(){this.currentNode.update(s=>{let n=(this.nodes.indexOf(s)+1)%this.nodes.length;return this.nodes[n]})}static{this.\u0275fac=function(n){return new(n||a)}}static{this.\u0275cmp=t({type:a,selectors:[["ng-component"]],viewQuery:function(n,e){n&1&&w(e.vflow,l,5),n&2&&v()},standalone:!0,features:[c],decls:3,vars:4,consts:[[3,"click"],["view","auto",3,"nodes","edges","optimization"]],template:function(n,e){n&1&&(f(0,"button",0),x("click",function(){return e.nextNode()}),C(1,"Go To Next Node"),y(),d(2,"vflow",1)),n&2&&(r(2),u("nodes",e.nodes)("edges",e.edges)("optimization",k(3,E)))},dependencies:[l],styles:["[_nghost-%COMP%]{width:100%;height:100%}"],changeDetection:0})}}return a})();var F={title:"Lazy Loading",mdFile:"./index.md",category:N,demos:{LazyLoadingDemoComponent:D}},p=F;var T=[];var R={LazyLoadingDemoComponent:[{title:"TypeScript",code:`<pre class="ngde hljs"><code lang="typescript" class="hljs language-typescript code-lines ngde"><span class="line ngde"><span class="hljs-keyword ngde">import</span> { <span class="hljs-title class_ ngde">ChangeDetectionStrategy</span>, <span class="hljs-title class_ ngde">Component</span>, effect, signal, untracked, viewChild } <span class="hljs-keyword ngde">from</span> <span class="hljs-string ngde">'@angular/core'</span>;
</span><span class="line ngde"><span class="hljs-keyword ngde">import</span> { <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/interfaces/Edge" class="ng-doc-code-anchor ngde" data-link-type="Interface" class="ngde">Edge</a></span>, <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/type-aliases/Node" class="ng-doc-code-anchor ngde" data-link-type="TypeAlias" class="ngde">Node</a></span>, <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/variables/Vflow" class="ng-doc-code-anchor ngde" data-link-type="Variable" class="ngde">Vflow</a></span>, <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/classes/VflowComponent" class="ng-doc-code-anchor ngde" data-link-type="Component" class="ngde">VflowComponent</a></span> } <span class="hljs-keyword ngde">from</span> <span class="hljs-string ngde">'ngx-vflow'</span>;
</span><span class="line ngde">
</span><span class="line ngde"><span class="hljs-meta ngde">@Component</span>({
</span><span class="line ngde">  <span class="hljs-attr ngde">template</span>: <span class="hljs-string ngde">\`</span>
</span><span class="line ngde"><span class="hljs-string ngde">    &#x3C;button (click)="nextNode()">Go To Next <a href="/api/ngx-vflow/type-aliases/Node" class="ng-doc-code-anchor ngde" data-link-type="TypeAlias" class="ngde">Node</a>&#x3C;/button></span>
</span><span class="line ngde"><span class="hljs-string ngde"></span>
</span><span class="line ngde"><span class="hljs-string ngde">    &#x3C;vflow view="auto" [nodes]="nodes" [edges]="edges" [optimization]="{ lazyLoadTrigger: 'viewport' }" /></span>
</span><span class="line ngde"><span class="hljs-string ngde">  \`</span>,
</span><span class="line ngde">  <span class="hljs-attr ngde">styleUrls</span>: [<span class="hljs-string ngde">'./lazy-loading-demo.component.scss'</span>],
</span><span class="line ngde">  <span class="hljs-attr ngde">changeDetection</span>: <span class="hljs-title class_ ngde">ChangeDetectionStrategy</span>.<span class="hljs-property ngde">OnPush</span>,
</span><span class="line ngde">  <span class="hljs-attr ngde">standalone</span>: <span class="hljs-literal ngde">true</span>,
</span><span class="line ngde">  <span class="hljs-attr ngde">imports</span>: [<span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/variables/Vflow" class="ng-doc-code-anchor ngde" data-link-type="Variable" class="ngde">Vflow</a></span>],
</span><span class="line ngde">})
</span><span class="line ngde"><span class="hljs-keyword ngde">export</span> <span class="hljs-keyword ngde">class</span> <span class="hljs-title class_ ngde">LazyLoadingDemoComponent</span> {
</span><span class="line ngde">  <span class="hljs-keyword ngde">protected</span> vflow = viewChild.required(<span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/classes/VflowComponent" class="ng-doc-code-anchor ngde" data-link-type="Component" class="ngde">VflowComponent</a></span>);
</span><span class="line ngde">
</span><span class="line ngde">  <span class="hljs-keyword ngde">public</span> <span class="hljs-attr ngde">nodes</span>: <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/type-aliases/Node" class="ng-doc-code-anchor ngde" data-link-type="TypeAlias" class="ngde">Node</a></span>[] = [
</span><span class="line ngde">    {
</span><span class="line ngde">      <span class="hljs-attr ngde">id</span>: <span class="hljs-string ngde">'1'</span>,
</span><span class="line ngde">      <span class="hljs-attr ngde">point</span>: { <span class="hljs-attr ngde">x</span>: <span class="hljs-number ngde">10</span>, <span class="hljs-attr ngde">y</span>: <span class="hljs-number ngde">150</span> },
</span><span class="line ngde">      <span class="hljs-attr ngde">type</span>: <span class="hljs-function ngde">() =></span> <span class="hljs-keyword ngde">import</span>(<span class="hljs-string ngde">'./components/node-a.component'</span>).<span class="hljs-title function_ ngde">then</span>(<span class="hljs-function ngde">(<span class="hljs-params ngde">m</span>) =></span> m.<span class="hljs-property ngde">NodeAComponent</span>),
</span><span class="line ngde">      <span class="hljs-attr ngde">width</span>: <span class="hljs-number ngde">150</span>,
</span><span class="line ngde">      <span class="hljs-attr ngde">height</span>: <span class="hljs-number ngde">100</span>,
</span><span class="line ngde">    },
</span><span class="line ngde">    {
</span><span class="line ngde">      <span class="hljs-attr ngde">id</span>: <span class="hljs-string ngde">'2'</span>,
</span><span class="line ngde">      <span class="hljs-attr ngde">point</span>: { <span class="hljs-attr ngde">x</span>: <span class="hljs-number ngde">1000</span>, <span class="hljs-attr ngde">y</span>: <span class="hljs-number ngde">150</span> },
</span><span class="line ngde">      <span class="hljs-attr ngde">type</span>: <span class="hljs-function ngde">() =></span> <span class="hljs-keyword ngde">import</span>(<span class="hljs-string ngde">'./components/node-b.component'</span>).<span class="hljs-title function_ ngde">then</span>(<span class="hljs-function ngde">(<span class="hljs-params ngde">m</span>) =></span> m.<span class="hljs-property ngde">NodeBComponent</span>),
</span><span class="line ngde">      <span class="hljs-attr ngde">width</span>: <span class="hljs-number ngde">150</span>,
</span><span class="line ngde">      <span class="hljs-attr ngde">height</span>: <span class="hljs-number ngde">100</span>,
</span><span class="line ngde">    },
</span><span class="line ngde">    {
</span><span class="line ngde">      <span class="hljs-attr ngde">id</span>: <span class="hljs-string ngde">'3'</span>,
</span><span class="line ngde">      <span class="hljs-attr ngde">point</span>: { <span class="hljs-attr ngde">x</span>: <span class="hljs-number ngde">2000</span>, <span class="hljs-attr ngde">y</span>: <span class="hljs-number ngde">150</span> },
</span><span class="line ngde">      <span class="hljs-attr ngde">type</span>: <span class="hljs-function ngde">() =></span> <span class="hljs-keyword ngde">import</span>(<span class="hljs-string ngde">'./components/node-c.component'</span>).<span class="hljs-title function_ ngde">then</span>(<span class="hljs-function ngde">(<span class="hljs-params ngde">m</span>) =></span> m.<span class="hljs-property ngde">NodeCComponent</span>),
</span><span class="line ngde">      <span class="hljs-attr ngde">width</span>: <span class="hljs-number ngde">150</span>,
</span><span class="line ngde">      <span class="hljs-attr ngde">height</span>: <span class="hljs-number ngde">100</span>,
</span><span class="line ngde">    },
</span><span class="line ngde">  ];
</span><span class="line ngde">
</span><span class="line ngde">  <span class="hljs-keyword ngde">public</span> <span class="hljs-attr ngde">edges</span>: <span class="hljs-title class_ ngde"><a href="/api/ngx-vflow/interfaces/Edge" class="ng-doc-code-anchor ngde" data-link-type="Interface" class="ngde">Edge</a></span>[] = [
</span><span class="line ngde">    {
</span><span class="line ngde">      <span class="hljs-attr ngde">id</span>: <span class="hljs-string ngde">'1 -> 2'</span>,
</span><span class="line ngde">      <span class="hljs-attr ngde">source</span>: <span class="hljs-string ngde">'1'</span>,
</span><span class="line ngde">      <span class="hljs-attr ngde">target</span>: <span class="hljs-string ngde">'2'</span>,
</span><span class="line ngde">    },
</span><span class="line ngde">    {
</span><span class="line ngde">      <span class="hljs-attr ngde">id</span>: <span class="hljs-string ngde">'2 -> 3'</span>,
</span><span class="line ngde">      <span class="hljs-attr ngde">source</span>: <span class="hljs-string ngde">'2'</span>,
</span><span class="line ngde">      <span class="hljs-attr ngde">target</span>: <span class="hljs-string ngde">'3'</span>,
</span><span class="line ngde">    },
</span><span class="line ngde">  ];
</span><span class="line ngde">
</span><span class="line ngde">  <span class="hljs-keyword ngde">private</span> currentNode = <span class="hljs-title function_ ngde">signal</span>(<span class="hljs-variable language_ ngde">this</span>.<span class="hljs-property ngde">nodes</span>[<span class="hljs-number ngde">0</span>]);
</span><span class="line ngde">
</span><span class="line ngde">  <span class="hljs-title function_ ngde">constructor</span>(<span class="hljs-params ngde"></span>) {
</span><span class="line ngde">    <span class="hljs-title function_ ngde">effect</span>(<span class="hljs-function ngde">() =></span> {
</span><span class="line ngde">      <span class="hljs-keyword ngde">if</span> (<span class="hljs-variable language_ ngde">this</span>.<span class="hljs-title function_ ngde">vflow</span>().<span class="hljs-title function_ ngde">initialized</span>()) {
</span><span class="line ngde">        <span class="hljs-keyword ngde">const</span> currentNode = <span class="hljs-variable language_ ngde">this</span>.<span class="hljs-title function_ ngde">currentNode</span>();
</span><span class="line ngde">        <span class="hljs-title function_ ngde">untracked</span>(<span class="hljs-function ngde">() =></span> <span class="hljs-variable language_ ngde">this</span>.<span class="hljs-title function_ ngde">vflow</span>().<span class="hljs-title function_ ngde">fitView</span>({ <span class="hljs-attr ngde">nodes</span>: [currentNode.<span class="hljs-property ngde">id</span>], <span class="hljs-attr ngde">duration</span>: <span class="hljs-number ngde">800</span> }));
</span><span class="line ngde">      }
</span><span class="line ngde">    });
</span><span class="line ngde">  }
</span><span class="line ngde">
</span><span class="line ngde">  <span class="hljs-title function_ ngde">nextNode</span>(<span class="hljs-params ngde"></span>) {
</span><span class="line ngde">    <span class="hljs-variable language_ ngde">this</span>.<span class="hljs-property ngde">currentNode</span>.<span class="hljs-title function_ ngde">update</span>(<span class="hljs-function ngde">(<span class="hljs-params ngde">current</span>) =></span> {
</span><span class="line ngde">      <span class="hljs-keyword ngde">const</span> nextIndex = (<span class="hljs-variable language_ ngde">this</span>.<span class="hljs-property ngde">nodes</span>.<span class="hljs-title function_ ngde">indexOf</span>(current) + <span class="hljs-number ngde">1</span>) % <span class="hljs-variable language_ ngde">this</span>.<span class="hljs-property ngde">nodes</span>.<span class="hljs-property ngde">length</span>;
</span><span class="line ngde">      <span class="hljs-keyword ngde">return</span> <span class="hljs-variable language_ ngde">this</span>.<span class="hljs-property ngde">nodes</span>[nextIndex];
</span><span class="line ngde">    });
</span><span class="line ngde">  }
</span><span class="line ngde">}
</span></code></pre>`},{title:"SCSS",code:`<pre class="ngde hljs"><code lang="scss" class="hljs language-scss code-lines ngde"><span class="line ngde"><span class="hljs-selector-pseudo ngde">:host</span> {
</span><span class="line ngde">  <span class="hljs-attribute ngde">width</span>: <span class="hljs-number ngde">100%</span>;
</span><span class="line ngde">  <span class="hljs-attribute ngde">height</span>: <span class="hljs-number ngde">100%</span>;
</span><span class="line ngde">}
</span></code></pre>`}]},O=R;var I=`<h1 id="lazy-loading" class="ngde">Lazy Loading<a title="Link to heading" class="ng-doc-header-link ngde" href="/features/lazy-loading#lazy-loading"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h1><ng-doc-demo-pane componentname="LazyLoadingDemoComponent" indexable="false" class="ngde"><div id="options" class="ngde">{}</div></ng-doc-demo-pane><ng-doc-blockquote type="note" class="ngde"><p class="ngde">Open the network tab in DevTools to see components being loaded dynamically.</p></ng-doc-blockquote><p class="ngde">The library supports splitting a large flow into multiple chunks, where each chunk is loaded according to the provided <code class="ngde">lazyLoadTrigger</code> in the <code class="ngde ng-doc-code-with-link" class="ngde"><a href="/api/ngx-vflow/interfaces/Optimization" class="ng-doc-code-anchor ngde" data-link-type="Interface" class="ngde">Optimization</a></code> object.</p><p class="ngde">To load nodes when the viewport changes, set <code class="ngde">lazyLoadTrigger</code> to the value viewport.</p><h2 id="lazy-loading-component-nodes" class="ngde">Lazy loading component nodes<a title="Link to heading" class="ng-doc-header-link ngde" href="/features/lazy-loading#lazy-loading-component-nodes"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">To adapt your existing component nodes, replace component constructor calls in the <code class="ngde">type</code> field with dynamic import factories:</p><pre class="ngde hljs"><code class="hljs language-ts code-lines ngde" lang="ts" name="" icon="" highlightedlines="[]"><span class="line ngde"><span class="hljs-comment ngde">// Eagerly loaded</span>
</span><span class="line ngde">{
</span><span class="line ngde">  <span class="hljs-attr ngde">id</span>: <span class="hljs-string ngde">'1'</span>,
</span><span class="line ngde">  <span class="hljs-attr ngde">point</span>: { <span class="hljs-attr ngde">x</span>: <span class="hljs-number ngde">10</span>, <span class="hljs-attr ngde">y</span>: <span class="hljs-number ngde">150</span> },
</span><span class="line ngde">  <span class="hljs-attr ngde">type</span>: <span class="hljs-title class_ ngde">NodeAComponent</span>,
</span><span class="line ngde">}
</span><span class="line ngde">
</span><span class="line ngde"><span class="hljs-comment ngde">// Lazy loaded</span>
</span><span class="line ngde">{
</span><span class="line ngde">  <span class="hljs-attr ngde">id</span>: <span class="hljs-string ngde">'1'</span>,
</span><span class="line ngde">  <span class="hljs-attr ngde">point</span>: { <span class="hljs-attr ngde">x</span>: <span class="hljs-number ngde">10</span>, <span class="hljs-attr ngde">y</span>: <span class="hljs-number ngde">150</span> },
</span><span class="line ngde">  <span class="hljs-attr ngde">type</span>: <span class="hljs-function ngde">() =></span> <span class="hljs-keyword ngde">import</span>(<span class="hljs-string ngde">'./components/node-a.component'</span>).<span class="hljs-title function_ ngde">then</span>(<span class="hljs-function ngde">(<span class="hljs-params ngde">m</span>) =></span> m.<span class="hljs-property ngde">NodeAComponent</span>)
</span><span class="line ngde">}
</span></code></pre><h2 id="lazy-loading-template-nodes" class="ngde">Lazy loading template nodes<a title="Link to heading" class="ng-doc-header-link ngde" href="/features/lazy-loading#lazy-loading-template-nodes"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h2><p class="ngde">For template nodes, the library provides a custom trigger for the <code class="ngde">@defer</code> syntax through the context.</p><pre class="ngde hljs"><code class="hljs language-ts code-lines ngde" lang="undefined" name="" icon="" highlightedlines="[]"><span class="line ngde">&#x3C;!-- <span class="hljs-title class_ ngde">Eagerly</span> loaded -->
</span><span class="line ngde"><span class="hljs-tag ngde">&#x3C;<span class="hljs-name ngde">vflow</span> <span class="hljs-attr ngde">view</span>=<span class="hljs-string ngde">"auto"</span> [<span class="hljs-attr ngde">nodes</span>]=<span class="hljs-string ngde">"nodes"</span> [<span class="hljs-attr ngde">edges</span>]=<span class="hljs-string ngde">"edges"</span> [<span class="hljs-attr ngde">optimization</span>]=<span class="hljs-string ngde">"{ lazyLoadTrigger: 'viewport' }"</span>></span><span class="xml ngde"></span>
</span><span class="line ngde"><span class="xml ngde">  </span><span class="hljs-tag ngde">&#x3C;<span class="hljs-name ngde">ng-template</span> <span class="hljs-attr ngde">let-ctx</span> <span class="hljs-attr ngde">nodeHtml</span>></span><span class="xml ngde"></span>
</span><span class="line ngde"><span class="xml ngde">    </span><span class="hljs-tag ngde">&#x3C;<span class="hljs-name ngde">your-node</span> /></span><span class="xml ngde"></span>
</span><span class="line ngde"><span class="xml ngde">  </span><span class="hljs-tag ngde">&#x3C;/<span class="hljs-name ngde">ng-template</span>></span><span class="xml ngde"></span>
</span><span class="line ngde"><span class="xml ngde"></span><span class="hljs-tag ngde">&#x3C;/<span class="hljs-name ngde">vflow</span>></span>
</span><span class="line ngde">
</span><span class="line ngde">&#x3C;!-- <span class="hljs-title class_ ngde">Lazy</span> loaded -->
</span><span class="line ngde"><span class="hljs-tag ngde">&#x3C;<span class="hljs-name ngde">vflow</span> <span class="hljs-attr ngde">view</span>=<span class="hljs-string ngde">"auto"</span> [<span class="hljs-attr ngde">nodes</span>]=<span class="hljs-string ngde">"nodes"</span> [<span class="hljs-attr ngde">edges</span>]=<span class="hljs-string ngde">"edges"</span> [<span class="hljs-attr ngde">optimization</span>]=<span class="hljs-string ngde">"{ lazyLoadTrigger: 'viewport' }"</span>></span><span class="xml ngde"></span>
</span><span class="line ngde"><span class="xml ngde">  </span><span class="hljs-tag ngde">&#x3C;<span class="hljs-name ngde">ng-template</span> <span class="hljs-attr ngde">let-ctx</span> <span class="hljs-attr ngde">nodeHtml</span>></span><span class="xml ngde"></span>
</span><span class="line ngde"><span class="xml ngde">    @defer (when ctx.shouldLoad()) {</span>
</span><span class="line ngde"><span class="xml ngde">      </span><span class="hljs-tag ngde">&#x3C;<span class="hljs-name ngde">your-node</span> /></span><span class="xml ngde"></span>
</span><span class="line ngde"><span class="xml ngde">    }</span>
</span><span class="line ngde"><span class="xml ngde">  </span><span class="hljs-tag ngde">&#x3C;/<span class="hljs-name ngde">ng-template</span>></span><span class="xml ngde"></span>
</span><span class="line ngde"><span class="xml ngde"></span><span class="hljs-tag ngde">&#x3C;/<span class="hljs-name ngde">vflow</span>></span>
</span></code></pre>`,M=(()=>{class a extends g{constructor(){super(),this.routePrefix="",this.pageType="guide",this.pageContent=I,this.editSourceFileUrl="https://github.com/artem-mangilev/ngx-vflow/edit/main/projects/ngx-vflow-demo/src/app/categories/features/pages/lazy-loading/index.md?message=docs(lazy-loading): describe your changes here...",this.page=p,this.demoAssets=O}static{this.\u0275fac=function(n){return new(n||a)}}static{this.\u0275cmp=t({type:a,selectors:[["ng-doc-page-features-lazy-loading"]],standalone:!0,features:[b([{provide:g,useExisting:a},T,p.providers??[]]),m,c],decls:1,vars:0,template:function(n,e){n&1&&d(0,"ng-doc-page")},dependencies:[L],encapsulation:2,changeDetection:0})}}return a})(),G=[i(o({},(0,S.isRoute)(p.route)?p.route:{}),{path:"",component:M,title:"Lazy Loading"})],ts=G;export{M as DynamicComponent,ts as default};

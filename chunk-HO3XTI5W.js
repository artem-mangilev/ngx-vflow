import{a as rr}from"./chunk-G45ERDUB.js";import{a as er}from"./chunk-2HK5QXNV.js";import{a as tr}from"./chunk-VNGQSAGH.js";import"./chunk-GJV5CTYC.js";import{a as Je}from"./chunk-NAZP4O7G.js";import{Ab as Xt,Cc as qs,Ga as Nt,Ja as Ve,La as Mt,Ra as Wt,Sa as Bt,Sb as Zt,Ua as Vt,Va as Kt,W as Ee,Wa as ye,Xa as be,Ya as ve,l as zt,n as Be,ob as Ke,qb as Jt,sa as we,ub as Qt,vb as ke,zb as Yt}from"./chunk-RKOZ65GA.js";import{a as m,b,c as U,e as Ht,g as _e,i as d,j as q,k as Te,l as Y}from"./chunk-ODLL2QMY.js";var Er=Ht((fi,ne)=>{"use strict";var Se=function(){};Se.prototype=Object.create(null);var Ae=/; *([!#$%&'*+.^\w`|~-]+)=("(?:[\v\u0020\u0021\u0023-\u005b\u005d-\u007e\u0080-\u00ff]|\\[\v\u0020-\u00ff])*"|[!#$%&'*+.^\w`|~-]+) */gu,Oe=/\\([\v\u0020-\u00ff])/gu,fr=/^[!#$%&'*+.^\w|~-]+\/[!#$%&'*+.^\w|~-]+$/u,N={type:"",parameters:new Se};Object.freeze(N.parameters);Object.freeze(N);function _r(e){if(typeof e!="string")throw new TypeError("argument header is required and must be a string");let t=e.indexOf(";"),r=t!==-1?e.slice(0,t).trim():e.trim();if(fr.test(r)===!1)throw new TypeError("invalid media type");let s={type:r.toLowerCase(),parameters:new Se};if(t===-1)return s;let o,i,a;for(Ae.lastIndex=t;i=Ae.exec(e);){if(i.index!==t)throw new TypeError("invalid parameter format");t+=i[0].length,o=i[1].toLowerCase(),a=i[2],a[0]==='"'&&(a=a.slice(1,a.length-1),Oe.test(a)&&(a=a.replace(Oe,"$1"))),s.parameters[o]=a}if(t!==e.length)throw new TypeError("invalid parameter format");return s}function Tr(e){if(typeof e!="string")return N;let t=e.indexOf(";"),r=t!==-1?e.slice(0,t).trim():e.trim();if(fr.test(r)===!1)return N;let s={type:r.toLowerCase(),parameters:new Se};if(t===-1)return s;let o,i,a;for(Ae.lastIndex=t;i=Ae.exec(e);){if(i.index!==t)return N;t+=i[0].length,o=i[1].toLowerCase(),a=i[2],a[0]==='"'&&(a=a.slice(1,a.length-1),Oe.test(a)&&(a=a.replace(Oe,"$1"))),s.parameters[o]=a}return t!==e.length?N:s}ne.exports.default={parse:_r,safeParse:Tr};ne.exports.parse=_r;ne.exports.safeParse=Tr;ne.exports.defaultContentType=N});var ut=Ht((ct,lt)=>{"use strict";(function(e,t){typeof ct=="object"&&typeof lt<"u"?lt.exports=t():typeof define=="function"&&define.amd?define(t):e.Bottleneck=t()})(ct,function(){"use strict";var e=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function t(E){return E&&E.default||E}var r=function(E,c,n={}){var l,p,h;for(l in c)h=c[l],n[l]=(p=E[l])!=null?p:h;return n},s=function(E,c,n={}){var l,p;for(l in E)p=E[l],c[l]!==void 0&&(n[l]=p);return n},o={load:r,overwrite:s},i;i=class{constructor(c,n){this.incr=c,this.decr=n,this._first=null,this._last=null,this.length=0}push(c){var n;this.length++,typeof this.incr=="function"&&this.incr(),n={value:c,prev:this._last,next:null},this._last!=null?(this._last.next=n,this._last=n):this._first=this._last=n}shift(){var c;if(this._first!=null)return this.length--,typeof this.decr=="function"&&this.decr(),c=this._first.value,(this._first=this._first.next)!=null?this._first.prev=null:this._last=null,c}first(){if(this._first!=null)return this._first.value}getArray(){var c,n,l;for(c=this._first,l=[];c!=null;)l.push((n=c,c=c.next,n.value));return l}forEachShift(c){var n;for(n=this.shift();n!=null;)c(n),n=this.shift()}debug(){var c,n,l,p,h;for(c=this._first,h=[];c!=null;)h.push((n=c,c=c.next,{value:n.value,prev:(l=n.prev)!=null?l.value:void 0,next:(p=n.next)!=null?p.value:void 0}));return h}};var a=i,u;u=class{constructor(c){if(this.instance=c,this._events={},this.instance.on!=null||this.instance.once!=null||this.instance.removeAllListeners!=null)throw new Error("An Emitter already exists for this object");this.instance.on=(n,l)=>this._addListener(n,"many",l),this.instance.once=(n,l)=>this._addListener(n,"once",l),this.instance.removeAllListeners=(n=null)=>n!=null?delete this._events[n]:this._events={}}_addListener(c,n,l){var p;return(p=this._events)[c]==null&&(p[c]=[]),this._events[c].push({cb:l,status:n}),this.instance}listenerCount(c){return this._events[c]!=null?this._events[c].length:0}trigger(c,...n){return d(this,null,function*(){var l,p;try{return c!=="debug"&&this.trigger("debug",`Event triggered: ${c}`,n),this._events[c]==null?void 0:(this._events[c]=this._events[c].filter(function(h){return h.status!=="none"}),p=this._events[c].map(h=>d(this,null,function*(){var f,_;if(h.status!=="none"){h.status==="once"&&(h.status="none");try{return _=typeof h.cb=="function"?h.cb(...n):void 0,typeof _?.then=="function"?yield _:_}catch(k){return f=k,this.trigger("error",f),null}}})),(yield Promise.all(p)).find(function(h){return h!=null}))}catch(h){return l=h,this.trigger("error",l),null}})}};var g=u,w,T,y;w=a,T=g,y=class{constructor(c){var n;this.Events=new T(this),this._length=0,this._lists=function(){var l,p,h;for(h=[],n=l=1,p=c;1<=p?l<=p:l>=p;n=1<=p?++l:--l)h.push(new w(()=>this.incr(),()=>this.decr()));return h}.call(this)}incr(){if(this._length++===0)return this.Events.trigger("leftzero")}decr(){if(--this._length===0)return this.Events.trigger("zero")}push(c){return this._lists[c.options.priority].push(c)}queued(c){return c!=null?this._lists[c].length:this._length}shiftAll(c){return this._lists.forEach(function(n){return n.forEachShift(c)})}getFirst(c=this._lists){var n,l,p;for(n=0,l=c.length;n<l;n++)if(p=c[n],p.length>0)return p;return[]}shiftLastFrom(c){return this.getFirst(this._lists.slice(c).reverse()).shift()}};var G=y,R;R=class extends Error{};var F=R,j,z,V,D,K;D=10,z=5,K=o,j=F,V=class{constructor(c,n,l,p,h,f,_,k){this.task=c,this.args=n,this.rejectOnDrop=h,this.Events=f,this._states=_,this.Promise=k,this.options=K.load(l,p),this.options.priority=this._sanitizePriority(this.options.priority),this.options.id===p.id&&(this.options.id=`${this.options.id}-${this._randomIndex()}`),this.promise=new this.Promise((O,S)=>{this._resolve=O,this._reject=S}),this.retryCount=0}_sanitizePriority(c){var n;return n=~~c!==c?z:c,n<0?0:n>D-1?D-1:n}_randomIndex(){return Math.random().toString(36).slice(2)}doDrop({error:c,message:n="This job has been dropped by Bottleneck"}={}){return this._states.remove(this.options.id)?(this.rejectOnDrop&&this._reject(c??new j(n)),this.Events.trigger("dropped",{args:this.args,options:this.options,task:this.task,promise:this.promise}),!0):!1}_assertStatus(c){var n;if(n=this._states.jobStatus(this.options.id),!(n===c||c==="DONE"&&n===null))throw new j(`Invalid job status ${n}, expected ${c}. Please open an issue at https://github.com/SGrondin/bottleneck/issues`)}doReceive(){return this._states.start(this.options.id),this.Events.trigger("received",{args:this.args,options:this.options})}doQueue(c,n){return this._assertStatus("RECEIVED"),this._states.next(this.options.id),this.Events.trigger("queued",{args:this.args,options:this.options,reachedHWM:c,blocked:n})}doRun(){return this.retryCount===0?(this._assertStatus("QUEUED"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),this.Events.trigger("scheduled",{args:this.args,options:this.options})}doExecute(c,n,l,p){return d(this,null,function*(){var h,f,_;this.retryCount===0?(this._assertStatus("RUNNING"),this._states.next(this.options.id)):this._assertStatus("EXECUTING"),f={args:this.args,options:this.options,retryCount:this.retryCount},this.Events.trigger("executing",f);try{if(_=yield c!=null?c.schedule(this.options,this.task,...this.args):this.task(...this.args),n())return this.doDone(f),yield p(this.options,f),this._assertStatus("DONE"),this._resolve(_)}catch(k){return h=k,this._onFailure(h,f,n,l,p)}})}doExpire(c,n,l){var p,h;return this._states.jobStatus(this.options.id==="RUNNING")&&this._states.next(this.options.id),this._assertStatus("EXECUTING"),h={args:this.args,options:this.options,retryCount:this.retryCount},p=new j(`This job timed out after ${this.options.expiration} ms.`),this._onFailure(p,h,c,n,l)}_onFailure(c,n,l,p,h){return d(this,null,function*(){var f,_;if(l())return f=yield this.Events.trigger("failed",c,n),f!=null?(_=~~f,this.Events.trigger("retry",`Retrying ${this.options.id} after ${_} ms`,n),this.retryCount++,p(_)):(this.doDone(n),yield h(this.options,n),this._assertStatus("DONE"),this._reject(c))})}doDone(c){return this._assertStatus("EXECUTING"),this._states.next(this.options.id),this.Events.trigger("done",c)}};var J=V,I,C,H;H=o,I=F,C=class{constructor(c,n,l){this.instance=c,this.storeOptions=n,this.clientId=this.instance._randomIndex(),H.load(l,l,this),this._nextRequest=this._lastReservoirRefresh=this._lastReservoirIncrease=Date.now(),this._running=0,this._done=0,this._unblockTime=0,this.ready=this.Promise.resolve(),this.clients={},this._startHeartbeat()}_startHeartbeat(){var c;return this.heartbeat==null&&(this.storeOptions.reservoirRefreshInterval!=null&&this.storeOptions.reservoirRefreshAmount!=null||this.storeOptions.reservoirIncreaseInterval!=null&&this.storeOptions.reservoirIncreaseAmount!=null)?typeof(c=this.heartbeat=setInterval(()=>{var n,l,p,h,f;if(h=Date.now(),this.storeOptions.reservoirRefreshInterval!=null&&h>=this._lastReservoirRefresh+this.storeOptions.reservoirRefreshInterval&&(this._lastReservoirRefresh=h,this.storeOptions.reservoir=this.storeOptions.reservoirRefreshAmount,this.instance._drainAll(this.computeCapacity())),this.storeOptions.reservoirIncreaseInterval!=null&&h>=this._lastReservoirIncrease+this.storeOptions.reservoirIncreaseInterval&&({reservoirIncreaseAmount:n,reservoirIncreaseMaximum:p,reservoir:f}=this.storeOptions,this._lastReservoirIncrease=h,l=p!=null?Math.min(n,p-f):n,l>0))return this.storeOptions.reservoir+=l,this.instance._drainAll(this.computeCapacity())},this.heartbeatInterval)).unref=="function"?c.unref():void 0:clearInterval(this.heartbeat)}__publish__(c){return d(this,null,function*(){return yield this.yieldLoop(),this.instance.Events.trigger("message",c.toString())})}__disconnect__(c){return d(this,null,function*(){return yield this.yieldLoop(),clearInterval(this.heartbeat),this.Promise.resolve()})}yieldLoop(c=0){return new this.Promise(function(n,l){return setTimeout(n,c)})}computePenalty(){var c;return(c=this.storeOptions.penalty)!=null?c:15*this.storeOptions.minTime||5e3}__updateSettings__(c){return d(this,null,function*(){return yield this.yieldLoop(),H.overwrite(c,c,this.storeOptions),this._startHeartbeat(),this.instance._drainAll(this.computeCapacity()),!0})}__running__(){return d(this,null,function*(){return yield this.yieldLoop(),this._running})}__queued__(){return d(this,null,function*(){return yield this.yieldLoop(),this.instance.queued()})}__done__(){return d(this,null,function*(){return yield this.yieldLoop(),this._done})}__groupCheck__(c){return d(this,null,function*(){return yield this.yieldLoop(),this._nextRequest+this.timeout<c})}computeCapacity(){var c,n;return{maxConcurrent:c,reservoir:n}=this.storeOptions,c!=null&&n!=null?Math.min(c-this._running,n):c!=null?c-this._running:n??null}conditionsCheck(c){var n;return n=this.computeCapacity(),n==null||c<=n}__incrementReservoir__(c){return d(this,null,function*(){var n;return yield this.yieldLoop(),n=this.storeOptions.reservoir+=c,this.instance._drainAll(this.computeCapacity()),n})}__currentReservoir__(){return d(this,null,function*(){return yield this.yieldLoop(),this.storeOptions.reservoir})}isBlocked(c){return this._unblockTime>=c}check(c,n){return this.conditionsCheck(c)&&this._nextRequest-n<=0}__check__(c){return d(this,null,function*(){var n;return yield this.yieldLoop(),n=Date.now(),this.check(c,n)})}__register__(c,n,l){return d(this,null,function*(){var p,h;return yield this.yieldLoop(),p=Date.now(),this.conditionsCheck(n)?(this._running+=n,this.storeOptions.reservoir!=null&&(this.storeOptions.reservoir-=n),h=Math.max(this._nextRequest-p,0),this._nextRequest=p+h+this.storeOptions.minTime,{success:!0,wait:h,reservoir:this.storeOptions.reservoir}):{success:!1}})}strategyIsBlock(){return this.storeOptions.strategy===3}__submit__(c,n){return d(this,null,function*(){var l,p,h;if(yield this.yieldLoop(),this.storeOptions.maxConcurrent!=null&&n>this.storeOptions.maxConcurrent)throw new I(`Impossible to add a job having a weight of ${n} to a limiter having a maxConcurrent setting of ${this.storeOptions.maxConcurrent}`);return p=Date.now(),h=this.storeOptions.highWater!=null&&c===this.storeOptions.highWater&&!this.check(n,p),l=this.strategyIsBlock()&&(h||this.isBlocked(p)),l&&(this._unblockTime=p+this.computePenalty(),this._nextRequest=this._unblockTime+this.storeOptions.minTime,this.instance._dropAllQueued()),{reachedHWM:h,blocked:l,strategy:this.storeOptions.strategy}})}__free__(c,n){return d(this,null,function*(){return yield this.yieldLoop(),this._running-=n,this._done+=n,this.instance._drainAll(this.computeCapacity()),{running:this._running}})}};var de=C,Q,he;Q=F,he=class{constructor(c){this.status=c,this._jobs={},this.counts=this.status.map(function(){return 0})}next(c){var n,l;if(n=this._jobs[c],l=n+1,n!=null&&l<this.status.length)return this.counts[n]--,this.counts[l]++,this._jobs[c]++;if(n!=null)return this.counts[n]--,delete this._jobs[c]}start(c){var n;return n=0,this._jobs[c]=n,this.counts[n]++}remove(c){var n;return n=this._jobs[c],n!=null&&(this.counts[n]--,delete this._jobs[c]),n!=null}jobStatus(c){var n;return(n=this.status[this._jobs[c]])!=null?n:null}statusJobs(c){var n,l,p,h,f;if(c!=null){if(l=this.status.indexOf(c),l<0)throw new Q(`status must be one of ${this.status.join(", ")}`);p=this._jobs,h=[];for(n in p)f=p[n],f===l&&h.push(n);return h}else return Object.keys(this._jobs)}statusCounts(){return this.counts.reduce((c,n,l)=>(c[this.status[l]]=n,c),{})}};var $e=he,ge,me;ge=a,me=class{constructor(c,n){this.schedule=this.schedule.bind(this),this.name=c,this.Promise=n,this._running=0,this._queue=new ge}isEmpty(){return this._queue.length===0}_tryToRun(){return d(this,null,function*(){var c,n,l,p,h,f,_;if(this._running<1&&this._queue.length>0)return this._running++,{task:_,args:c,resolve:h,reject:p}=this._queue.shift(),n=yield function(){return d(this,null,function*(){try{return f=yield _(...c),function(){return h(f)}}catch(k){return l=k,function(){return p(l)}}})}(),this._running--,this._tryToRun(),n()})}schedule(c,...n){var l,p,h;return h=p=null,l=new this.Promise(function(f,_){return h=f,p=_}),this._queue.push({task:c,args:n,resolve:h,reject:p}),this._tryToRun(),l}};var He=me,yt="2.19.5",Rs={version:yt},js=Object.freeze({version:yt,default:Rs}),bt=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),vt=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Cs=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),kt,Gt,At,Ot,St,fe;fe=o,kt=g,Ot=bt,At=vt,St=Cs,Gt=function(){class E{constructor(n={}){this.deleteKey=this.deleteKey.bind(this),this.limiterOptions=n,fe.load(this.limiterOptions,this.defaults,this),this.Events=new kt(this),this.instances={},this.Bottleneck=qt,this._startAutoCleanup(),this.sharedConnection=this.connection!=null,this.connection==null&&(this.limiterOptions.datastore==="redis"?this.connection=new Ot(Object.assign({},this.limiterOptions,{Events:this.Events})):this.limiterOptions.datastore==="ioredis"&&(this.connection=new At(Object.assign({},this.limiterOptions,{Events:this.Events}))))}key(n=""){var l;return(l=this.instances[n])!=null?l:(()=>{var p;return p=this.instances[n]=new this.Bottleneck(Object.assign(this.limiterOptions,{id:`${this.id}-${n}`,timeout:this.timeout,connection:this.connection})),this.Events.trigger("created",p,n),p})()}deleteKey(n=""){return d(this,null,function*(){var l,p;return p=this.instances[n],this.connection&&(l=yield this.connection.__runCommand__(["del",...St.allKeys(`${this.id}-${n}`)])),p!=null&&(delete this.instances[n],yield p.disconnect()),p!=null||l>0})}limiters(){var n,l,p,h;l=this.instances,p=[];for(n in l)h=l[n],p.push({key:n,limiter:h});return p}keys(){return Object.keys(this.instances)}clusterKeys(){return d(this,null,function*(){var n,l,p,h,f,_,k,O,S;if(this.connection==null)return this.Promise.resolve(this.keys());for(_=[],n=null,S=`b_${this.id}-`.length,l=9;n!==0;)for([O,p]=yield this.connection.__runCommand__(["scan",n??0,"match",`b_${this.id}-*_settings`,"count",1e4]),n=~~O,h=0,k=p.length;h<k;h++)f=p[h],_.push(f.slice(S,-l));return _})}_startAutoCleanup(){var n;return clearInterval(this.interval),typeof(n=this.interval=setInterval(()=>d(this,null,function*(){var l,p,h,f,_,k;_=Date.now(),h=this.instances,f=[];for(p in h){k=h[p];try{(yield k._store.__groupCheck__(_))?f.push(this.deleteKey(p)):f.push(void 0)}catch(O){l=O,f.push(k.Events.trigger("error",l))}}return f}),this.timeout/2)).unref=="function"?n.unref():void 0}updateSettings(n={}){if(fe.overwrite(n,this.defaults,this),fe.overwrite(n,n,this.limiterOptions),n.timeout!=null)return this._startAutoCleanup()}disconnect(n=!0){var l;if(!this.sharedConnection)return(l=this.connection)!=null?l.disconnect(n):void 0}}return E.prototype.defaults={timeout:1e3*60*5,connection:null,Promise,id:"group-key"},E}.call(e);var Fs=Gt,Pt,Rt,jt;jt=o,Rt=g,Pt=function(){class E{constructor(n={}){this.options=n,jt.load(this.options,this.defaults,this),this.Events=new Rt(this),this._arr=[],this._resetPromise(),this._lastFlush=Date.now()}_resetPromise(){return this._promise=new this.Promise((n,l)=>this._resolve=n)}_flush(){return clearTimeout(this._timeout),this._lastFlush=Date.now(),this._resolve(),this.Events.trigger("batch",this._arr),this._arr=[],this._resetPromise()}add(n){var l;return this._arr.push(n),l=this._promise,this._arr.length===this.maxSize?this._flush():this.maxTime!=null&&this._arr.length===1&&(this._timeout=setTimeout(()=>this._flush(),this.maxTime)),l}}return E.prototype.defaults={maxTime:null,maxSize:null,Promise},E}.call(e);var Us=Pt,Is=()=>console.log("You must import the full version of Bottleneck in order to use this feature."),Ds=t(js),Ct,Ft,ze,Ne,Ut,Me,It,Dt,xt,We,L,Lt=[].splice;Me=10,Ft=5,L=o,It=G,Ne=J,Ut=de,Dt=Is,ze=g,xt=$e,We=He,Ct=function(){class E{constructor(n={},...l){var p,h;this._addToQueue=this._addToQueue.bind(this),this._validateOptions(n,l),L.load(n,this.instanceDefaults,this),this._queues=new It(Me),this._scheduled={},this._states=new xt(["RECEIVED","QUEUED","RUNNING","EXECUTING"].concat(this.trackDoneStatus?["DONE"]:[])),this._limiter=null,this.Events=new ze(this),this._submitLock=new We("submit",this.Promise),this._registerLock=new We("register",this.Promise),h=L.load(n,this.storeDefaults,{}),this._store=function(){if(this.datastore==="redis"||this.datastore==="ioredis"||this.connection!=null)return p=L.load(n,this.redisStoreDefaults,{}),new Dt(this,h,p);if(this.datastore==="local")return p=L.load(n,this.localStoreDefaults,{}),new Ut(this,h,p);throw new E.prototype.BottleneckError(`Invalid datastore type: ${this.datastore}`)}.call(this),this._queues.on("leftzero",()=>{var f;return(f=this._store.heartbeat)!=null&&typeof f.ref=="function"?f.ref():void 0}),this._queues.on("zero",()=>{var f;return(f=this._store.heartbeat)!=null&&typeof f.unref=="function"?f.unref():void 0})}_validateOptions(n,l){if(!(n!=null&&typeof n=="object"&&l.length===0))throw new E.prototype.BottleneckError("Bottleneck v2 takes a single object argument. Refer to https://github.com/SGrondin/bottleneck#upgrading-to-v2 if you're upgrading from Bottleneck v1.")}ready(){return this._store.ready}clients(){return this._store.clients}channel(){return`b_${this.id}`}channel_client(){return`b_${this.id}_${this._store.clientId}`}publish(n){return this._store.__publish__(n)}disconnect(n=!0){return this._store.__disconnect__(n)}chain(n){return this._limiter=n,this}queued(n){return this._queues.queued(n)}clusterQueued(){return this._store.__queued__()}empty(){return this.queued()===0&&this._submitLock.isEmpty()}running(){return this._store.__running__()}done(){return this._store.__done__()}jobStatus(n){return this._states.jobStatus(n)}jobs(n){return this._states.statusJobs(n)}counts(){return this._states.statusCounts()}_randomIndex(){return Math.random().toString(36).slice(2)}check(n=1){return this._store.__check__(n)}_clearGlobalState(n){return this._scheduled[n]!=null?(clearTimeout(this._scheduled[n].expiration),delete this._scheduled[n],!0):!1}_free(n,l,p,h){return d(this,null,function*(){var f,_;try{if({running:_}=yield this._store.__free__(n,p.weight),this.Events.trigger("debug",`Freed ${p.id}`,h),_===0&&this.empty())return this.Events.trigger("idle")}catch(k){return f=k,this.Events.trigger("error",f)}})}_run(n,l,p){var h,f,_;return l.doRun(),h=this._clearGlobalState.bind(this,n),_=this._run.bind(this,n,l),f=this._free.bind(this,n,l),this._scheduled[n]={timeout:setTimeout(()=>l.doExecute(this._limiter,h,_,f),p),expiration:l.options.expiration!=null?setTimeout(function(){return l.doExpire(h,_,f)},p+l.options.expiration):void 0,job:l}}_drainOne(n){return this._registerLock.schedule(()=>{var l,p,h,f,_;return this.queued()===0?this.Promise.resolve(null):(_=this._queues.getFirst(),{options:f,args:l}=h=_.first(),n!=null&&f.weight>n?this.Promise.resolve(null):(this.Events.trigger("debug",`Draining ${f.id}`,{args:l,options:f}),p=this._randomIndex(),this._store.__register__(p,f.weight,f.expiration).then(({success:k,wait:O,reservoir:S})=>{var se;return this.Events.trigger("debug",`Drained ${f.id}`,{success:k,args:l,options:f}),k?(_.shift(),se=this.empty(),se&&this.Events.trigger("empty"),S===0&&this.Events.trigger("depleted",se),this._run(p,h,O),this.Promise.resolve(f.weight)):this.Promise.resolve(null)})))})}_drainAll(n,l=0){return this._drainOne(n).then(p=>{var h;return p!=null?(h=n!=null?n-p:n,this._drainAll(h,l+p)):this.Promise.resolve(l)}).catch(p=>this.Events.trigger("error",p))}_dropAllQueued(n){return this._queues.shiftAll(function(l){return l.doDrop({message:n})})}stop(n={}){var l,p;return n=L.load(n,this.stopDefaults),p=h=>{var f;return f=()=>{var _;return _=this._states.counts,_[0]+_[1]+_[2]+_[3]===h},new this.Promise((_,k)=>f()?_():this.on("done",()=>{if(f())return this.removeAllListeners("done"),_()}))},l=n.dropWaitingJobs?(this._run=function(h,f){return f.doDrop({message:n.dropErrorMessage})},this._drainOne=()=>this.Promise.resolve(null),this._registerLock.schedule(()=>this._submitLock.schedule(()=>{var h,f,_;f=this._scheduled;for(h in f)_=f[h],this.jobStatus(_.job.options.id)==="RUNNING"&&(clearTimeout(_.timeout),clearTimeout(_.expiration),_.job.doDrop({message:n.dropErrorMessage}));return this._dropAllQueued(n.dropErrorMessage),p(0)}))):this.schedule({priority:Me-1,weight:0},()=>p(1)),this._receive=function(h){return h._reject(new E.prototype.BottleneckError(n.enqueueErrorMessage))},this.stop=()=>this.Promise.reject(new E.prototype.BottleneckError("stop() has already been called")),l}_addToQueue(n){return d(this,null,function*(){var l,p,h,f,_,k,O;({args:l,options:f}=n);try{({reachedHWM:_,blocked:p,strategy:O}=yield this._store.__submit__(this.queued(),f.weight))}catch(S){return h=S,this.Events.trigger("debug",`Could not queue ${f.id}`,{args:l,options:f,error:h}),n.doDrop({error:h}),!1}return p?(n.doDrop(),!0):_&&(k=O===E.prototype.strategy.LEAK?this._queues.shiftLastFrom(f.priority):O===E.prototype.strategy.OVERFLOW_PRIORITY?this._queues.shiftLastFrom(f.priority+1):O===E.prototype.strategy.OVERFLOW?n:void 0,k?.doDrop(),k==null||O===E.prototype.strategy.OVERFLOW)?(k==null&&n.doDrop(),_):(n.doQueue(_,p),this._queues.push(n),yield this._drainAll(),_)})}_receive(n){return this._states.jobStatus(n.options.id)!=null?(n._reject(new E.prototype.BottleneckError(`A job with the same id already exists (id=${n.options.id})`)),!1):(n.doReceive(),this._submitLock.schedule(this._addToQueue,n))}submit(...n){var l,p,h,f,_,k,O;return typeof n[0]=="function"?(_=n,[p,...n]=_,[l]=Lt.call(n,-1),f=L.load({},this.jobDefaults)):(k=n,[f,p,...n]=k,[l]=Lt.call(n,-1),f=L.load(f,this.jobDefaults)),O=(...S)=>new this.Promise(function(se,Ls){return p(...S,function(...$t){return($t[0]!=null?Ls:se)($t)})}),h=new Ne(O,n,f,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),h.promise.then(function(S){return typeof l=="function"?l(...S):void 0}).catch(function(S){return Array.isArray(S)?typeof l=="function"?l(...S):void 0:typeof l=="function"?l(S):void 0}),this._receive(h)}schedule(...n){var l,p,h;return typeof n[0]=="function"?([h,...n]=n,p={}):[p,h,...n]=n,l=new Ne(h,n,p,this.jobDefaults,this.rejectOnDrop,this.Events,this._states,this.Promise),this._receive(l),l.promise}wrap(n){var l,p;return l=this.schedule.bind(this),p=function(...h){return l(n.bind(this),...h)},p.withOptions=function(h,...f){return l(h,n,...f)},p}updateSettings(){return d(this,arguments,function*(n={}){return yield this._store.__updateSettings__(L.overwrite(n,this.storeDefaults)),L.overwrite(n,this.instanceDefaults,this),this})}currentReservoir(){return this._store.__currentReservoir__()}incrementReservoir(n=0){return this._store.__incrementReservoir__(n)}}return E.default=E,E.Events=ze,E.version=E.prototype.version=Ds.version,E.strategy=E.prototype.strategy={LEAK:1,OVERFLOW:2,OVERFLOW_PRIORITY:4,BLOCK:3},E.BottleneckError=E.prototype.BottleneckError=F,E.Group=E.prototype.Group=Fs,E.RedisConnection=E.prototype.RedisConnection=bt,E.IORedisConnection=E.prototype.IORedisConnection=vt,E.Batcher=E.prototype.Batcher=Us,E.prototype.jobDefaults={priority:Ft,weight:1,expiration:null,id:"<no-id>"},E.prototype.storeDefaults={maxConcurrent:null,minTime:0,highWater:null,strategy:E.prototype.strategy.LEAK,penalty:null,reservoir:null,reservoirRefreshInterval:null,reservoirRefreshAmount:null,reservoirIncreaseInterval:null,reservoirIncreaseAmount:null,reservoirIncreaseMaximum:null},E.prototype.localStoreDefaults={Promise,timeout:null,heartbeatInterval:250},E.prototype.redisStoreDefaults={Promise,timeout:null,heartbeatInterval:5e3,clientTimeout:1e4,Redis:null,clientOptions:{},clusterNodes:null,clearDatastore:!1,connection:null},E.prototype.instanceDefaults={datastore:"local",connection:null,id:"<no-id>",rejectOnDrop:!0,trackDoneStatus:!1,Promise},E.prototype.stopDefaults={enqueueErrorMessage:"This limiter has been stopped and cannot accept new jobs.",dropWaitingJobs:!0,dropErrorMessage:"This limiter has been stopped."},E}.call(e);var qt=Ct,xs=qt;return xs})});var Ps=_e(qs());function A(){return typeof navigator=="object"&&"userAgent"in navigator?navigator.userAgent:typeof process=="object"&&process.version!==void 0?`Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`:"<environment undetectable>"}function Ge(e,t,r,s){if(typeof r!="function")throw new Error("method for before hook must be a function");return s||(s={}),Array.isArray(t)?t.reverse().reduce((o,i)=>Ge.bind(null,e,i,o,s),r)():Promise.resolve().then(()=>e.registry[t]?e.registry[t].reduce((o,i)=>i.hook.bind(null,o,s),r)():r(s))}function sr(e,t,r,s){let o=s;e.registry[r]||(e.registry[r]=[]),t==="before"&&(s=(i,a)=>Promise.resolve().then(o.bind(null,a)).then(i.bind(null,a))),t==="after"&&(s=(i,a)=>{let u;return Promise.resolve().then(i.bind(null,a)).then(g=>(u=g,o(u,a))).then(()=>u)}),t==="error"&&(s=(i,a)=>Promise.resolve().then(i.bind(null,a)).catch(u=>o(u,a))),e.registry[r].push({hook:s,orig:o})}function or(e,t,r){if(!e.registry[t])return;let s=e.registry[t].map(o=>o.orig).indexOf(r);s!==-1&&e.registry[t].splice(s,1)}var nr=Function.bind,ir=nr.bind(nr);function ar(e,t,r){let s=ir(or,null).apply(null,r?[t,r]:[t]);e.api={remove:s},e.remove=s,["before","error","after","wrap"].forEach(o=>{let i=r?[t,o,r]:[t,o];e[o]=e.api[o]=ir(sr,null).apply(null,i)})}function $s(){let e=Symbol("Singular"),t={registry:{}},r=Ge.bind(null,t,e);return ar(r,t,e),r}function Hs(){let e={registry:{}},t=Ge.bind(null,e);return ar(t,e),t}var cr={Singular:$s,Collection:Hs};var zs="0.0.0-development",Ns=`octokit-endpoint.js/${zs} ${A()}`,Ms={method:"GET",baseUrl:"https://api.github.com",headers:{accept:"application/vnd.github.v3+json","user-agent":Ns},mediaType:{format:""}};function Ws(e){return e?Object.keys(e).reduce((t,r)=>(t[r.toLowerCase()]=e[r],t),{}):{}}function Bs(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;let t=Object.getPrototypeOf(e);if(t===null)return!0;let r=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return typeof r=="function"&&r instanceof r&&Function.prototype.call(r)===Function.prototype.call(e)}function pr(e,t){let r=Object.assign({},e);return Object.keys(t).forEach(s=>{Bs(t[s])?s in e?r[s]=pr(e[s],t[s]):Object.assign(r,{[s]:t[s]}):Object.assign(r,{[s]:t[s]})}),r}function lr(e){for(let t in e)e[t]===void 0&&delete e[t];return e}function Ye(e,t,r){if(typeof t=="string"){let[o,i]=t.split(" ");r=Object.assign(i?{method:o,url:i}:{url:o},r)}else r=Object.assign({},t);r.headers=Ws(r.headers),lr(r),lr(r.headers);let s=pr(e||{},r);return r.url==="/graphql"&&(e&&e.mediaType.previews?.length&&(s.mediaType.previews=e.mediaType.previews.filter(o=>!s.mediaType.previews.includes(o)).concat(s.mediaType.previews)),s.mediaType.previews=(s.mediaType.previews||[]).map(o=>o.replace(/-preview/,""))),s}function Vs(e,t){let r=/\?/.test(e)?"&":"?",s=Object.keys(t);return s.length===0?e:e+r+s.map(o=>o==="q"?"q="+t.q.split("+").map(encodeURIComponent).join("+"):`${o}=${encodeURIComponent(t[o])}`).join("&")}var Ks=/\{[^{}}]+\}/g;function Js(e){return e.replace(/(?:^\W+)|(?:(?<!\W)\W+$)/g,"").split(/,/)}function Qs(e){let t=e.match(Ks);return t?t.map(Js).reduce((r,s)=>r.concat(s),[]):[]}function ur(e,t){let r={__proto__:null};for(let s of Object.keys(e))t.indexOf(s)===-1&&(r[s]=e[s]);return r}function dr(e){return e.split(/(%[0-9A-Fa-f]{2})/g).map(function(t){return/%[0-9A-Fa-f]/.test(t)||(t=encodeURI(t).replace(/%5B/g,"[").replace(/%5D/g,"]")),t}).join("")}function Z(e){return encodeURIComponent(e).replace(/[!'()*]/g,function(t){return"%"+t.charCodeAt(0).toString(16).toUpperCase()})}function oe(e,t,r){return t=e==="+"||e==="#"?dr(t):Z(t),r?Z(r)+"="+t:t}function X(e){return e!=null}function Qe(e){return e===";"||e==="&"||e==="?"}function Ys(e,t,r,s){var o=e[r],i=[];if(X(o)&&o!=="")if(typeof o=="string"||typeof o=="number"||typeof o=="boolean")o=o.toString(),s&&s!=="*"&&(o=o.substring(0,parseInt(s,10))),i.push(oe(t,o,Qe(t)?r:""));else if(s==="*")Array.isArray(o)?o.filter(X).forEach(function(a){i.push(oe(t,a,Qe(t)?r:""))}):Object.keys(o).forEach(function(a){X(o[a])&&i.push(oe(t,o[a],a))});else{let a=[];Array.isArray(o)?o.filter(X).forEach(function(u){a.push(oe(t,u))}):Object.keys(o).forEach(function(u){X(o[u])&&(a.push(Z(u)),a.push(oe(t,o[u].toString())))}),Qe(t)?i.push(Z(r)+"="+a.join(",")):a.length!==0&&i.push(a.join(","))}else t===";"?X(o)&&i.push(Z(r)):o===""&&(t==="&"||t==="?")?i.push(Z(r)+"="):o===""&&i.push("");return i}function Xs(e){return{expand:Zs.bind(null,e)}}function Zs(e,t){var r=["+","#",".","/",";","?","&"];return e=e.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(s,o,i){if(o){let u="",g=[];if(r.indexOf(o.charAt(0))!==-1&&(u=o.charAt(0),o=o.substr(1)),o.split(/,/g).forEach(function(w){var T=/([^:\*]*)(?::(\d+)|(\*))?/.exec(w);g.push(Ys(t,u,T[1],T[2]||T[3]))}),u&&u!=="+"){var a=",";return u==="?"?a="&":u!=="#"&&(a=u),(g.length!==0?u:"")+g.join(a)}else return g.join(",")}else return dr(i)}),e==="/"?e:e.replace(/\/$/,"")}function hr(e){let t=e.method.toUpperCase(),r=(e.url||"/").replace(/:([a-z]\w+)/g,"{$1}"),s=Object.assign({},e.headers),o,i=ur(e,["method","baseUrl","url","headers","request","mediaType"]),a=Qs(r);r=Xs(r).expand(i),/^http/.test(r)||(r=e.baseUrl+r);let u=Object.keys(e).filter(T=>a.includes(T)).concat("baseUrl"),g=ur(i,u);if(!/application\/octet-stream/i.test(s.accept)&&(e.mediaType.format&&(s.accept=s.accept.split(/,/).map(T=>T.replace(/application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,`application/vnd$1$2.${e.mediaType.format}`)).join(",")),r.endsWith("/graphql")&&e.mediaType.previews?.length)){let T=s.accept.match(/(?<![\w-])[\w-]+(?=-preview)/g)||[];s.accept=T.concat(e.mediaType.previews).map(y=>{let G=e.mediaType.format?`.${e.mediaType.format}`:"+json";return`application/vnd.github.${y}-preview${G}`}).join(",")}return["GET","HEAD"].includes(t)?r=Vs(r,g):"data"in g?o=g.data:Object.keys(g).length&&(o=g),!s["content-type"]&&typeof o<"u"&&(s["content-type"]="application/json; charset=utf-8"),["PATCH","PUT"].includes(t)&&typeof o>"u"&&(o=""),Object.assign({method:t,url:r,headers:s},typeof o<"u"?{body:o}:null,e.request?{request:e.request}:null)}function eo(e,t,r){return hr(Ye(e,t,r))}function gr(e,t){let r=Ye(e,t),s=eo.bind(null,r);return Object.assign(s,{DEFAULTS:r,defaults:gr.bind(null,r),merge:Ye.bind(null,r),parse:hr})}var mr=gr(null,Ms);var yr=_e(Er(),1);var x=class extends Error{name;status;request;response;constructor(t,r,s){super(t),this.name="HttpError",this.status=Number.parseInt(r),Number.isNaN(this.status)&&(this.status=0),"response"in s&&(this.response=s.response);let o=Object.assign({},s.request);s.request.headers.authorization&&(o.headers=Object.assign({},s.request.headers,{authorization:s.request.headers.authorization.replace(/(?<! ) .*$/," [REDACTED]")})),o.url=o.url.replace(/\bclient_secret=\w+/g,"client_secret=[REDACTED]").replace(/\baccess_token=\w+/g,"access_token=[REDACTED]"),this.request=o}};var to="0.0.0-development",ro={headers:{"user-agent":`octokit-request.js/${to} ${A()}`}};function so(e){if(typeof e!="object"||e===null||Object.prototype.toString.call(e)!=="[object Object]")return!1;let t=Object.getPrototypeOf(e);if(t===null)return!0;let r=Object.prototype.hasOwnProperty.call(t,"constructor")&&t.constructor;return typeof r=="function"&&r instanceof r&&Function.prototype.call(r)===Function.prototype.call(e)}function wr(e){return d(this,null,function*(){let t=e.request?.fetch||globalThis.fetch;if(!t)throw new Error("fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing");let r=e.request?.log||console,s=e.request?.parseSuccessResponseBody!==!1,o=so(e.body)||Array.isArray(e.body)?JSON.stringify(e.body):e.body,i=Object.fromEntries(Object.entries(e.headers).map(([y,G])=>[y,String(G)])),a;try{a=yield t(e.url,m({method:e.method,body:o,redirect:e.request?.redirect,headers:i,signal:e.request?.signal},e.body&&{duplex:"half"}))}catch(y){let G="Unknown Error";if(y instanceof Error){if(y.name==="AbortError")throw y.status=500,y;G=y.message,y.name==="TypeError"&&"cause"in y&&(y.cause instanceof Error?G=y.cause.message:typeof y.cause=="string"&&(G=y.cause))}let R=new x(G,500,{request:e});throw R.cause=y,R}let u=a.status,g=a.url,w={};for(let[y,G]of a.headers)w[y]=G;let T={url:g,status:u,headers:w,data:""};if("deprecation"in w){let y=w.link&&w.link.match(/<([^<>]+)>; rel="deprecation"/),G=y&&y.pop();r.warn(`[@octokit/request] "${e.method} ${e.url}" is deprecated. It is scheduled to be removed on ${w.sunset}${G?`. See ${G}`:""}`)}if(u===204||u===205)return T;if(e.method==="HEAD"){if(u<400)return T;throw new x(a.statusText,u,{response:T,request:e})}if(u===304)throw T.data=yield Xe(a),new x("Not modified",u,{response:T,request:e});if(u>=400)throw T.data=yield Xe(a),new x(no(T.data),u,{response:T,request:e});return T.data=s?yield Xe(a):a.body,T})}function Xe(e){return d(this,null,function*(){let t=e.headers.get("content-type");if(!t)return e.text().catch(()=>"");let r=(0,yr.safeParse)(t);if(oo(r)){let s="";try{return s=yield e.text(),JSON.parse(s)}catch{return s}}else return r.type.startsWith("text/")||r.parameters.charset?.toLowerCase()==="utf-8"?e.text().catch(()=>""):e.arrayBuffer().catch(()=>new ArrayBuffer(0))})}function oo(e){return e.type==="application/json"||e.type==="application/scim+json"}function no(e){if(typeof e=="string")return e;if(e instanceof ArrayBuffer)return"Unknown error";if("message"in e){let t="documentation_url"in e?` - ${e.documentation_url}`:"";return Array.isArray(e.errors)?`${e.message}: ${e.errors.map(r=>JSON.stringify(r)).join(", ")}${t}`:`${e.message}${t}`}return`Unknown error: ${JSON.stringify(e)}`}function Ze(e,t){let r=e.defaults(t);return Object.assign(function(o,i){let a=r.merge(o,i);if(!a.request||!a.request.hook)return wr(r.parse(a));let u=(g,w)=>wr(r.parse(r.merge(g,w)));return Object.assign(u,{endpoint:r,defaults:Ze.bind(null,r)}),a.request.hook(u,a)},{endpoint:r,defaults:Ze.bind(null,r)})}var v=Ze(mr,ro);var io="0.0.0-development";function ao(e){return`Request failed due to following response errors:
`+e.errors.map(t=>` - ${t.message}`).join(`
`)}var co=class extends Error{constructor(e,t,r){super(ao(r)),this.request=e,this.headers=t,this.response=r,this.errors=r.errors,this.data=r.data,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}name="GraphqlResponseError";errors;data},lo=["method","baseUrl","url","headers","request","query","mediaType"],uo=["query","method","url"],br=/\/api\/v3\/?$/;function po(e,t,r){if(r){if(typeof t=="string"&&"query"in r)return Promise.reject(new Error('[@octokit/graphql] "query" cannot be used as variable name'));for(let a in r)if(uo.includes(a))return Promise.reject(new Error(`[@octokit/graphql] "${a}" cannot be used as variable name`))}let s=typeof t=="string"?Object.assign({query:t},r):t,o=Object.keys(s).reduce((a,u)=>lo.includes(u)?(a[u]=s[u],a):(a.variables||(a.variables={}),a.variables[u]=s[u],a),{}),i=s.baseUrl||e.endpoint.DEFAULTS.baseUrl;return br.test(i)&&(o.url=i.replace(br,"/api/graphql")),e(o).then(a=>{if(a.data.errors){let u={};for(let g of Object.keys(a.headers))u[g]=a.headers[g];throw new co(o,u,a.data)}return a.data.data})}function et(e,t){let r=e.defaults(t);return Object.assign((o,i)=>po(r,o,i),{defaults:et.bind(null,r),endpoint:r.endpoint})}var Gi=et(v,{headers:{"user-agent":`octokit-graphql.js/${io} ${A()}`},method:"POST",url:"/graphql"});function vr(e){return et(e,{method:"POST",url:"/graphql"})}var ho=/^v1\./,go=/^ghs_/,mo=/^ghu_/;function fo(e){return d(this,null,function*(){let t=e.split(/\./).length===3,r=ho.test(e)||go.test(e),s=mo.test(e);return{type:"token",token:e,tokenType:t?"app":r?"installation":s?"user-to-server":"oauth"}})}function _o(e){return e.split(/\./).length===3?`bearer ${e}`:`token ${e}`}function To(e,t,r,s){return d(this,null,function*(){let o=t.endpoint.merge(r,s);return o.headers.authorization=_o(e),t(o)})}var kr=function(t){if(!t)throw new Error("[@octokit/auth-token] No token passed to createTokenAuth");if(typeof t!="string")throw new Error("[@octokit/auth-token] Token passed to createTokenAuth is not a string");return t=t.replace(/^(token|bearer) +/i,""),Object.assign(fo.bind(null,t),{hook:To.bind(null,t)})};var tt="6.1.4";var Gr=()=>{},Eo=console.warn.bind(console),wo=console.error.bind(console),Ar=`octokit-core.js/${tt} ${A()}`,ee=(()=>{class e{static VERSION=tt;static defaults(r){return class extends this{constructor(...o){let i=o[0]||{};if(typeof r=="function"){super(r(i));return}super(Object.assign({},r,i,i.userAgent&&r.userAgent?{userAgent:`${i.userAgent} ${r.userAgent}`}:null))}}}static plugins=[];static plugin(...r){let s=this.plugins;return class extends this{static plugins=s.concat(r.filter(i=>!s.includes(i)))}}constructor(r={}){let s=new cr.Collection,o={baseUrl:v.endpoint.DEFAULTS.baseUrl,headers:{},request:Object.assign({},r.request,{hook:s.bind(null,"request")}),mediaType:{previews:[],format:""}};if(o.headers["user-agent"]=r.userAgent?`${r.userAgent} ${Ar}`:Ar,r.baseUrl&&(o.baseUrl=r.baseUrl),r.previews&&(o.mediaType.previews=r.previews),r.timeZone&&(o.headers["time-zone"]=r.timeZone),this.request=v.defaults(o),this.graphql=vr(this.request).defaults(o),this.log=Object.assign({debug:Gr,info:Gr,warn:Eo,error:wo},r.log),this.hook=s,r.authStrategy){let a=r,{authStrategy:u}=a,g=U(a,["authStrategy"]),w=u(Object.assign({request:this.request,log:this.log,octokit:this,octokitOptions:g},r.auth));s.wrap("request",w.hook),this.auth=w}else if(!r.auth)this.auth=()=>d(this,null,function*(){return{type:"unauthenticated"}});else{let u=kr(r.auth);s.wrap("request",u.hook),this.auth=u}let i=this.constructor;for(let u=0;u<i.plugins.length;++u)Object.assign(this,i.plugins[u](this,r))}request;graphql;log;hook;auth}return e})();var yo="0.0.0-development";function bo(e){if(!e.data)return b(m({},e),{data:[]});if(!("total_count"in e.data&&!("url"in e.data)))return e;let r=e.data.incomplete_results,s=e.data.repository_selection,o=e.data.total_count;delete e.data.incomplete_results,delete e.data.repository_selection,delete e.data.total_count;let i=Object.keys(e.data)[0],a=e.data[i];return e.data=a,typeof r<"u"&&(e.data.incomplete_results=r),typeof s<"u"&&(e.data.repository_selection=s),e.data.total_count=o,e}function rt(e,t,r){let s=typeof t=="function"?t.endpoint(r):e.request.endpoint(t,r),o=typeof t=="function"?t:e.request,i=s.method,a=s.headers,u=s.url;return{[Symbol.asyncIterator]:()=>({next(){return d(this,null,function*(){if(!u)return{done:!0};try{let w=yield o({method:i,url:u,headers:a}),T=bo(w);return u=((T.headers.link||"").match(/<([^<>]+)>;\s*rel="next"/)||[])[1],{value:T}}catch(w){if(w.status!==409)throw w;return u="",{value:{status:200,headers:{},data:[]}}}})}})}}function Or(e,t,r,s){return typeof r=="function"&&(s=r,r=void 0),Sr(e,[],rt(e,t,r)[Symbol.asyncIterator](),s)}function Sr(e,t,r,s){return r.next().then(o=>{if(o.done)return t;let i=!1;function a(){i=!0}return t=t.concat(s?s(o.value,a):o.value.data),i?t:Sr(e,t,r,s)})}var Pe=Object.assign(Or,{iterator:rt});function st(e){return{paginate:Object.assign(Or.bind(null,e),{iterator:rt.bind(null,e)})}}st.VERSION=yo;var vo=(e,t)=>`The cursor at "${e.join(",")}" did not change its value "${t}" after a page transition. Please make sure your that your query is set up correctly.`,ko=class extends Error{constructor(e,t){super(vo(e.pathInQuery,t)),this.pageInfo=e,this.cursorValue=t,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}name="MissingCursorChangeError"},Go=class extends Error{constructor(e){super(`No pageInfo property found in response. Please make sure to specify the pageInfo in your query. Response-Data: ${JSON.stringify(e,null,2)}`),this.response=e,Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}name="MissingPageInfo"},Ao=e=>Object.prototype.toString.call(e)==="[object Object]";function Pr(e){let t=Rr(e,"pageInfo");if(t.length===0)throw new Go(e);return t}var Rr=(e,t,r=[])=>{for(let s of Object.keys(e)){let o=[...r,s],i=e[s];if(Ao(i)){if(i.hasOwnProperty(t))return o;let a=Rr(i,t,o);if(a.length>0)return a}}return[]},ie=(e,t)=>t.reduce((r,s)=>r[s],e),ot=(e,t,r)=>{let s=t[t.length-1],o=[...t].slice(0,-1),i=ie(e,o);typeof r=="function"?i[s]=r(i[s]):i[s]=r},Oo=e=>{let t=Pr(e);return{pathInQuery:t,pageInfo:ie(e,[...t,"pageInfo"])}},jr=e=>e.hasOwnProperty("hasNextPage"),So=e=>jr(e)?e.endCursor:e.startCursor,Po=e=>jr(e)?e.hasNextPage:e.hasPreviousPage,Cr=e=>(t,r={})=>{let s=!0,o=m({},r);return{[Symbol.asyncIterator]:()=>({next(){return d(this,null,function*(){if(!s)return{done:!0,value:{}};let a=yield e.graphql(t,o),u=Oo(a),g=So(u.pageInfo);if(s=Po(u.pageInfo),s&&g===o.cursor)throw new ko(u,g);return o=b(m({},o),{cursor:g}),{done:!1,value:a}})}})}},Ro=(e,t)=>{if(Object.keys(e).length===0)return Object.assign(e,t);let r=Pr(e),s=[...r,"nodes"],o=ie(t,s);o&&ot(e,s,g=>[...g,...o]);let i=[...r,"edges"],a=ie(t,i);a&&ot(e,i,g=>[...g,...a]);let u=[...r,"pageInfo"];return ot(e,u,ie(t,u)),e},jo=e=>{let t=Cr(e);return(o,...i)=>d(void 0,[o,...i],function*(r,s={}){let a={};try{for(var u=Y(t(r,s)),g,w,T;g=!(w=yield u.next()).done;g=!1){let y=w.value;a=Ro(a,y)}}catch{T=[w]}finally{try{g&&(w=u.return)&&(yield w.call(u))}finally{if(T)throw T[0]}}return a})};function Fr(e){return{graphql:Object.assign(e.graphql,{paginate:Object.assign(jo(e),{iterator:Cr(e)})})}}var nt="13.5.0";var Co={actions:{addCustomLabelsToSelfHostedRunnerForOrg:["POST /orgs/{org}/actions/runners/{runner_id}/labels"],addCustomLabelsToSelfHostedRunnerForRepo:["POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],addRepoAccessToSelfHostedRunnerGroupInOrg:["PUT /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],approveWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve"],cancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel"],createEnvironmentVariable:["POST /repos/{owner}/{repo}/environments/{environment_name}/variables"],createHostedRunnerForOrg:["POST /orgs/{org}/actions/hosted-runners"],createOrUpdateEnvironmentSecret:["PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}"],createOrgVariable:["POST /orgs/{org}/actions/variables"],createRegistrationTokenForOrg:["POST /orgs/{org}/actions/runners/registration-token"],createRegistrationTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/registration-token"],createRemoveTokenForOrg:["POST /orgs/{org}/actions/runners/remove-token"],createRemoveTokenForRepo:["POST /repos/{owner}/{repo}/actions/runners/remove-token"],createRepoVariable:["POST /repos/{owner}/{repo}/actions/variables"],createWorkflowDispatch:["POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches"],deleteActionsCacheById:["DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}"],deleteActionsCacheByKey:["DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}"],deleteArtifact:["DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],deleteEnvironmentSecret:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],deleteEnvironmentVariable:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],deleteHostedRunnerForOrg:["DELETE /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"],deleteOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}"],deleteOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}"],deleteRepoVariable:["DELETE /repos/{owner}/{repo}/actions/variables/{name}"],deleteSelfHostedRunnerFromOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}"],deleteSelfHostedRunnerFromRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}"],deleteWorkflowRun:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}"],deleteWorkflowRunLogs:["DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],disableSelectedRepositoryGithubActionsOrganization:["DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}"],disableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable"],downloadArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}"],downloadJobLogsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs"],downloadWorkflowRunAttemptLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs"],downloadWorkflowRunLogs:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs"],enableSelectedRepositoryGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories/{repository_id}"],enableWorkflow:["PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable"],forceCancelWorkflowRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel"],generateRunnerJitconfigForOrg:["POST /orgs/{org}/actions/runners/generate-jitconfig"],generateRunnerJitconfigForRepo:["POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig"],getActionsCacheList:["GET /repos/{owner}/{repo}/actions/caches"],getActionsCacheUsage:["GET /repos/{owner}/{repo}/actions/cache/usage"],getActionsCacheUsageByRepoForOrg:["GET /orgs/{org}/actions/cache/usage-by-repository"],getActionsCacheUsageForOrg:["GET /orgs/{org}/actions/cache/usage"],getAllowedActionsOrganization:["GET /orgs/{org}/actions/permissions/selected-actions"],getAllowedActionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/selected-actions"],getArtifact:["GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}"],getCustomOidcSubClaimForRepo:["GET /repos/{owner}/{repo}/actions/oidc/customization/sub"],getEnvironmentPublicKey:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key"],getEnvironmentSecret:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}"],getEnvironmentVariable:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],getGithubActionsDefaultWorkflowPermissionsOrganization:["GET /orgs/{org}/actions/permissions/workflow"],getGithubActionsDefaultWorkflowPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions/workflow"],getGithubActionsPermissionsOrganization:["GET /orgs/{org}/actions/permissions"],getGithubActionsPermissionsRepository:["GET /repos/{owner}/{repo}/actions/permissions"],getHostedRunnerForOrg:["GET /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"],getHostedRunnersGithubOwnedImagesForOrg:["GET /orgs/{org}/actions/hosted-runners/images/github-owned"],getHostedRunnersLimitsForOrg:["GET /orgs/{org}/actions/hosted-runners/limits"],getHostedRunnersMachineSpecsForOrg:["GET /orgs/{org}/actions/hosted-runners/machine-sizes"],getHostedRunnersPartnerImagesForOrg:["GET /orgs/{org}/actions/hosted-runners/images/partner"],getHostedRunnersPlatformsForOrg:["GET /orgs/{org}/actions/hosted-runners/platforms"],getJobForWorkflowRun:["GET /repos/{owner}/{repo}/actions/jobs/{job_id}"],getOrgPublicKey:["GET /orgs/{org}/actions/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}"],getOrgVariable:["GET /orgs/{org}/actions/variables/{name}"],getPendingDeploymentsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],getRepoPermissions:["GET /repos/{owner}/{repo}/actions/permissions",{},{renamed:["actions","getGithubActionsPermissionsRepository"]}],getRepoPublicKey:["GET /repos/{owner}/{repo}/actions/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/actions/secrets/{secret_name}"],getRepoVariable:["GET /repos/{owner}/{repo}/actions/variables/{name}"],getReviewsForRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals"],getSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}"],getSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}"],getWorkflow:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}"],getWorkflowAccessToRepository:["GET /repos/{owner}/{repo}/actions/permissions/access"],getWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}"],getWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}"],getWorkflowRunUsage:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing"],getWorkflowUsage:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing"],listArtifactsForRepo:["GET /repos/{owner}/{repo}/actions/artifacts"],listEnvironmentSecrets:["GET /repos/{owner}/{repo}/environments/{environment_name}/secrets"],listEnvironmentVariables:["GET /repos/{owner}/{repo}/environments/{environment_name}/variables"],listGithubHostedRunnersInGroupForOrg:["GET /orgs/{org}/actions/runner-groups/{runner_group_id}/hosted-runners"],listHostedRunnersForOrg:["GET /orgs/{org}/actions/hosted-runners"],listJobsForWorkflowRun:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs"],listJobsForWorkflowRunAttempt:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs"],listLabelsForSelfHostedRunnerForOrg:["GET /orgs/{org}/actions/runners/{runner_id}/labels"],listLabelsForSelfHostedRunnerForRepo:["GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],listOrgSecrets:["GET /orgs/{org}/actions/secrets"],listOrgVariables:["GET /orgs/{org}/actions/variables"],listRepoOrganizationSecrets:["GET /repos/{owner}/{repo}/actions/organization-secrets"],listRepoOrganizationVariables:["GET /repos/{owner}/{repo}/actions/organization-variables"],listRepoSecrets:["GET /repos/{owner}/{repo}/actions/secrets"],listRepoVariables:["GET /repos/{owner}/{repo}/actions/variables"],listRepoWorkflows:["GET /repos/{owner}/{repo}/actions/workflows"],listRunnerApplicationsForOrg:["GET /orgs/{org}/actions/runners/downloads"],listRunnerApplicationsForRepo:["GET /repos/{owner}/{repo}/actions/runners/downloads"],listSelectedReposForOrgSecret:["GET /orgs/{org}/actions/secrets/{secret_name}/repositories"],listSelectedReposForOrgVariable:["GET /orgs/{org}/actions/variables/{name}/repositories"],listSelectedRepositoriesEnabledGithubActionsOrganization:["GET /orgs/{org}/actions/permissions/repositories"],listSelfHostedRunnersForOrg:["GET /orgs/{org}/actions/runners"],listSelfHostedRunnersForRepo:["GET /repos/{owner}/{repo}/actions/runners"],listWorkflowRunArtifacts:["GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts"],listWorkflowRuns:["GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs"],listWorkflowRunsForRepo:["GET /repos/{owner}/{repo}/actions/runs"],reRunJobForWorkflowRun:["POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun"],reRunWorkflow:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun"],reRunWorkflowFailedJobs:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs"],removeAllCustomLabelsFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels"],removeAllCustomLabelsFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],removeCustomLabelFromSelfHostedRunnerForOrg:["DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}"],removeCustomLabelFromSelfHostedRunnerForRepo:["DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgVariable:["DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}"],reviewCustomGatesForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule"],reviewPendingDeploymentsForRun:["POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments"],setAllowedActionsOrganization:["PUT /orgs/{org}/actions/permissions/selected-actions"],setAllowedActionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/selected-actions"],setCustomLabelsForSelfHostedRunnerForOrg:["PUT /orgs/{org}/actions/runners/{runner_id}/labels"],setCustomLabelsForSelfHostedRunnerForRepo:["PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels"],setCustomOidcSubClaimForRepo:["PUT /repos/{owner}/{repo}/actions/oidc/customization/sub"],setGithubActionsDefaultWorkflowPermissionsOrganization:["PUT /orgs/{org}/actions/permissions/workflow"],setGithubActionsDefaultWorkflowPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions/workflow"],setGithubActionsPermissionsOrganization:["PUT /orgs/{org}/actions/permissions"],setGithubActionsPermissionsRepository:["PUT /repos/{owner}/{repo}/actions/permissions"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/actions/secrets/{secret_name}/repositories"],setSelectedReposForOrgVariable:["PUT /orgs/{org}/actions/variables/{name}/repositories"],setSelectedRepositoriesEnabledGithubActionsOrganization:["PUT /orgs/{org}/actions/permissions/repositories"],setWorkflowAccessToRepository:["PUT /repos/{owner}/{repo}/actions/permissions/access"],updateEnvironmentVariable:["PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}"],updateHostedRunnerForOrg:["PATCH /orgs/{org}/actions/hosted-runners/{hosted_runner_id}"],updateOrgVariable:["PATCH /orgs/{org}/actions/variables/{name}"],updateRepoVariable:["PATCH /repos/{owner}/{repo}/actions/variables/{name}"]},activity:{checkRepoIsStarredByAuthenticatedUser:["GET /user/starred/{owner}/{repo}"],deleteRepoSubscription:["DELETE /repos/{owner}/{repo}/subscription"],deleteThreadSubscription:["DELETE /notifications/threads/{thread_id}/subscription"],getFeeds:["GET /feeds"],getRepoSubscription:["GET /repos/{owner}/{repo}/subscription"],getThread:["GET /notifications/threads/{thread_id}"],getThreadSubscriptionForAuthenticatedUser:["GET /notifications/threads/{thread_id}/subscription"],listEventsForAuthenticatedUser:["GET /users/{username}/events"],listNotificationsForAuthenticatedUser:["GET /notifications"],listOrgEventsForAuthenticatedUser:["GET /users/{username}/events/orgs/{org}"],listPublicEvents:["GET /events"],listPublicEventsForRepoNetwork:["GET /networks/{owner}/{repo}/events"],listPublicEventsForUser:["GET /users/{username}/events/public"],listPublicOrgEvents:["GET /orgs/{org}/events"],listReceivedEventsForUser:["GET /users/{username}/received_events"],listReceivedPublicEventsForUser:["GET /users/{username}/received_events/public"],listRepoEvents:["GET /repos/{owner}/{repo}/events"],listRepoNotificationsForAuthenticatedUser:["GET /repos/{owner}/{repo}/notifications"],listReposStarredByAuthenticatedUser:["GET /user/starred"],listReposStarredByUser:["GET /users/{username}/starred"],listReposWatchedByUser:["GET /users/{username}/subscriptions"],listStargazersForRepo:["GET /repos/{owner}/{repo}/stargazers"],listWatchedReposForAuthenticatedUser:["GET /user/subscriptions"],listWatchersForRepo:["GET /repos/{owner}/{repo}/subscribers"],markNotificationsAsRead:["PUT /notifications"],markRepoNotificationsAsRead:["PUT /repos/{owner}/{repo}/notifications"],markThreadAsDone:["DELETE /notifications/threads/{thread_id}"],markThreadAsRead:["PATCH /notifications/threads/{thread_id}"],setRepoSubscription:["PUT /repos/{owner}/{repo}/subscription"],setThreadSubscription:["PUT /notifications/threads/{thread_id}/subscription"],starRepoForAuthenticatedUser:["PUT /user/starred/{owner}/{repo}"],unstarRepoForAuthenticatedUser:["DELETE /user/starred/{owner}/{repo}"]},apps:{addRepoToInstallation:["PUT /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","addRepoToInstallationForAuthenticatedUser"]}],addRepoToInstallationForAuthenticatedUser:["PUT /user/installations/{installation_id}/repositories/{repository_id}"],checkToken:["POST /applications/{client_id}/token"],createFromManifest:["POST /app-manifests/{code}/conversions"],createInstallationAccessToken:["POST /app/installations/{installation_id}/access_tokens"],deleteAuthorization:["DELETE /applications/{client_id}/grant"],deleteInstallation:["DELETE /app/installations/{installation_id}"],deleteToken:["DELETE /applications/{client_id}/token"],getAuthenticated:["GET /app"],getBySlug:["GET /apps/{app_slug}"],getInstallation:["GET /app/installations/{installation_id}"],getOrgInstallation:["GET /orgs/{org}/installation"],getRepoInstallation:["GET /repos/{owner}/{repo}/installation"],getSubscriptionPlanForAccount:["GET /marketplace_listing/accounts/{account_id}"],getSubscriptionPlanForAccountStubbed:["GET /marketplace_listing/stubbed/accounts/{account_id}"],getUserInstallation:["GET /users/{username}/installation"],getWebhookConfigForApp:["GET /app/hook/config"],getWebhookDelivery:["GET /app/hook/deliveries/{delivery_id}"],listAccountsForPlan:["GET /marketplace_listing/plans/{plan_id}/accounts"],listAccountsForPlanStubbed:["GET /marketplace_listing/stubbed/plans/{plan_id}/accounts"],listInstallationReposForAuthenticatedUser:["GET /user/installations/{installation_id}/repositories"],listInstallationRequestsForAuthenticatedApp:["GET /app/installation-requests"],listInstallations:["GET /app/installations"],listInstallationsForAuthenticatedUser:["GET /user/installations"],listPlans:["GET /marketplace_listing/plans"],listPlansStubbed:["GET /marketplace_listing/stubbed/plans"],listReposAccessibleToInstallation:["GET /installation/repositories"],listSubscriptionsForAuthenticatedUser:["GET /user/marketplace_purchases"],listSubscriptionsForAuthenticatedUserStubbed:["GET /user/marketplace_purchases/stubbed"],listWebhookDeliveries:["GET /app/hook/deliveries"],redeliverWebhookDelivery:["POST /app/hook/deliveries/{delivery_id}/attempts"],removeRepoFromInstallation:["DELETE /user/installations/{installation_id}/repositories/{repository_id}",{},{renamed:["apps","removeRepoFromInstallationForAuthenticatedUser"]}],removeRepoFromInstallationForAuthenticatedUser:["DELETE /user/installations/{installation_id}/repositories/{repository_id}"],resetToken:["PATCH /applications/{client_id}/token"],revokeInstallationAccessToken:["DELETE /installation/token"],scopeToken:["POST /applications/{client_id}/token/scoped"],suspendInstallation:["PUT /app/installations/{installation_id}/suspended"],unsuspendInstallation:["DELETE /app/installations/{installation_id}/suspended"],updateWebhookConfigForApp:["PATCH /app/hook/config"]},billing:{getGithubActionsBillingOrg:["GET /orgs/{org}/settings/billing/actions"],getGithubActionsBillingUser:["GET /users/{username}/settings/billing/actions"],getGithubBillingUsageReportOrg:["GET /organizations/{org}/settings/billing/usage"],getGithubPackagesBillingOrg:["GET /orgs/{org}/settings/billing/packages"],getGithubPackagesBillingUser:["GET /users/{username}/settings/billing/packages"],getSharedStorageBillingOrg:["GET /orgs/{org}/settings/billing/shared-storage"],getSharedStorageBillingUser:["GET /users/{username}/settings/billing/shared-storage"]},checks:{create:["POST /repos/{owner}/{repo}/check-runs"],createSuite:["POST /repos/{owner}/{repo}/check-suites"],get:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}"],getSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}"],listAnnotations:["GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations"],listForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-runs"],listForSuite:["GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs"],listSuitesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/check-suites"],rerequestRun:["POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest"],rerequestSuite:["POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest"],setSuitesPreferences:["PATCH /repos/{owner}/{repo}/check-suites/preferences"],update:["PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}"]},codeScanning:{commitAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix/commits"],createAutofix:["POST /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],createVariantAnalysis:["POST /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses"],deleteAnalysis:["DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}"],deleteCodeqlDatabase:["DELETE /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getAlert:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}",{},{renamedParameters:{alert_id:"alert_number"}}],getAnalysis:["GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}"],getAutofix:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/autofix"],getCodeqlDatabase:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}"],getDefaultSetup:["GET /repos/{owner}/{repo}/code-scanning/default-setup"],getSarif:["GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}"],getVariantAnalysis:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}"],getVariantAnalysisRepoTask:["GET /repos/{owner}/{repo}/code-scanning/codeql/variant-analyses/{codeql_variant_analysis_id}/repos/{repo_owner}/{repo_name}"],listAlertInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances"],listAlertsForOrg:["GET /orgs/{org}/code-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/code-scanning/alerts"],listAlertsInstances:["GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances",{},{renamed:["codeScanning","listAlertInstances"]}],listCodeqlDatabases:["GET /repos/{owner}/{repo}/code-scanning/codeql/databases"],listRecentAnalyses:["GET /repos/{owner}/{repo}/code-scanning/analyses"],updateAlert:["PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}"],updateDefaultSetup:["PATCH /repos/{owner}/{repo}/code-scanning/default-setup"],uploadSarif:["POST /repos/{owner}/{repo}/code-scanning/sarifs"]},codeSecurity:{attachConfiguration:["POST /orgs/{org}/code-security/configurations/{configuration_id}/attach"],attachEnterpriseConfiguration:["POST /enterprises/{enterprise}/code-security/configurations/{configuration_id}/attach"],createConfiguration:["POST /orgs/{org}/code-security/configurations"],createConfigurationForEnterprise:["POST /enterprises/{enterprise}/code-security/configurations"],deleteConfiguration:["DELETE /orgs/{org}/code-security/configurations/{configuration_id}"],deleteConfigurationForEnterprise:["DELETE /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],detachConfiguration:["DELETE /orgs/{org}/code-security/configurations/detach"],getConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}"],getConfigurationForRepository:["GET /repos/{owner}/{repo}/code-security-configuration"],getConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations"],getConfigurationsForOrg:["GET /orgs/{org}/code-security/configurations"],getDefaultConfigurations:["GET /orgs/{org}/code-security/configurations/defaults"],getDefaultConfigurationsForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/defaults"],getRepositoriesForConfiguration:["GET /orgs/{org}/code-security/configurations/{configuration_id}/repositories"],getRepositoriesForEnterpriseConfiguration:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories"],getSingleConfigurationForEnterprise:["GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}"],setConfigurationAsDefault:["PUT /orgs/{org}/code-security/configurations/{configuration_id}/defaults"],setConfigurationAsDefaultForEnterprise:["PUT /enterprises/{enterprise}/code-security/configurations/{configuration_id}/defaults"],updateConfiguration:["PATCH /orgs/{org}/code-security/configurations/{configuration_id}"],updateEnterpriseConfiguration:["PATCH /enterprises/{enterprise}/code-security/configurations/{configuration_id}"]},codesOfConduct:{getAllCodesOfConduct:["GET /codes_of_conduct"],getConductCode:["GET /codes_of_conduct/{key}"]},codespaces:{addRepositoryForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],addSelectedRepoToOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],checkPermissionsForDevcontainer:["GET /repos/{owner}/{repo}/codespaces/permissions_check"],codespaceMachinesForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/machines"],createForAuthenticatedUser:["POST /user/codespaces"],createOrUpdateOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],createOrUpdateSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}"],createWithPrForAuthenticatedUser:["POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces"],createWithRepoForAuthenticatedUser:["POST /repos/{owner}/{repo}/codespaces"],deleteForAuthenticatedUser:["DELETE /user/codespaces/{codespace_name}"],deleteFromOrganization:["DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}"],deleteOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],deleteSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}"],exportForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/exports"],getCodespacesForUserInOrg:["GET /orgs/{org}/members/{username}/codespaces"],getExportDetailsForAuthenticatedUser:["GET /user/codespaces/{codespace_name}/exports/{export_id}"],getForAuthenticatedUser:["GET /user/codespaces/{codespace_name}"],getOrgPublicKey:["GET /orgs/{org}/codespaces/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}"],getPublicKeyForAuthenticatedUser:["GET /user/codespaces/secrets/public-key"],getRepoPublicKey:["GET /repos/{owner}/{repo}/codespaces/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}"],getSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}"],listDevcontainersInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/devcontainers"],listForAuthenticatedUser:["GET /user/codespaces"],listInOrganization:["GET /orgs/{org}/codespaces",{},{renamedParameters:{org_id:"org"}}],listInRepositoryForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces"],listOrgSecrets:["GET /orgs/{org}/codespaces/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/codespaces/secrets"],listRepositoriesForSecretForAuthenticatedUser:["GET /user/codespaces/secrets/{secret_name}/repositories"],listSecretsForAuthenticatedUser:["GET /user/codespaces/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],preFlightWithRepoForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/new"],publishForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/publish"],removeRepositoryForSecretForAuthenticatedUser:["DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}"],repoMachinesForAuthenticatedUser:["GET /repos/{owner}/{repo}/codespaces/machines"],setRepositoriesForSecretForAuthenticatedUser:["PUT /user/codespaces/secrets/{secret_name}/repositories"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories"],startForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/start"],stopForAuthenticatedUser:["POST /user/codespaces/{codespace_name}/stop"],stopInOrganization:["POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop"],updateForAuthenticatedUser:["PATCH /user/codespaces/{codespace_name}"]},copilot:{addCopilotSeatsForTeams:["POST /orgs/{org}/copilot/billing/selected_teams"],addCopilotSeatsForUsers:["POST /orgs/{org}/copilot/billing/selected_users"],cancelCopilotSeatAssignmentForTeams:["DELETE /orgs/{org}/copilot/billing/selected_teams"],cancelCopilotSeatAssignmentForUsers:["DELETE /orgs/{org}/copilot/billing/selected_users"],copilotMetricsForOrganization:["GET /orgs/{org}/copilot/metrics"],copilotMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/metrics"],getCopilotOrganizationDetails:["GET /orgs/{org}/copilot/billing"],getCopilotSeatDetailsForUser:["GET /orgs/{org}/members/{username}/copilot"],listCopilotSeats:["GET /orgs/{org}/copilot/billing/seats"],usageMetricsForOrg:["GET /orgs/{org}/copilot/usage"],usageMetricsForTeam:["GET /orgs/{org}/team/{team_slug}/copilot/usage"]},dependabot:{addSelectedRepoToOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],createOrUpdateOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}"],createOrUpdateRepoSecret:["PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],deleteOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}"],deleteRepoSecret:["DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],getAlert:["GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"],getOrgPublicKey:["GET /orgs/{org}/dependabot/secrets/public-key"],getOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}"],getRepoPublicKey:["GET /repos/{owner}/{repo}/dependabot/secrets/public-key"],getRepoSecret:["GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/dependabot/alerts"],listAlertsForOrg:["GET /orgs/{org}/dependabot/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/dependabot/alerts"],listOrgSecrets:["GET /orgs/{org}/dependabot/secrets"],listRepoSecrets:["GET /repos/{owner}/{repo}/dependabot/secrets"],listSelectedReposForOrgSecret:["GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],removeSelectedRepoFromOrgSecret:["DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}"],setSelectedReposForOrgSecret:["PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories"],updateAlert:["PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}"]},dependencyGraph:{createRepositorySnapshot:["POST /repos/{owner}/{repo}/dependency-graph/snapshots"],diffRange:["GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}"],exportSbom:["GET /repos/{owner}/{repo}/dependency-graph/sbom"]},emojis:{get:["GET /emojis"]},gists:{checkIsStarred:["GET /gists/{gist_id}/star"],create:["POST /gists"],createComment:["POST /gists/{gist_id}/comments"],delete:["DELETE /gists/{gist_id}"],deleteComment:["DELETE /gists/{gist_id}/comments/{comment_id}"],fork:["POST /gists/{gist_id}/forks"],get:["GET /gists/{gist_id}"],getComment:["GET /gists/{gist_id}/comments/{comment_id}"],getRevision:["GET /gists/{gist_id}/{sha}"],list:["GET /gists"],listComments:["GET /gists/{gist_id}/comments"],listCommits:["GET /gists/{gist_id}/commits"],listForUser:["GET /users/{username}/gists"],listForks:["GET /gists/{gist_id}/forks"],listPublic:["GET /gists/public"],listStarred:["GET /gists/starred"],star:["PUT /gists/{gist_id}/star"],unstar:["DELETE /gists/{gist_id}/star"],update:["PATCH /gists/{gist_id}"],updateComment:["PATCH /gists/{gist_id}/comments/{comment_id}"]},git:{createBlob:["POST /repos/{owner}/{repo}/git/blobs"],createCommit:["POST /repos/{owner}/{repo}/git/commits"],createRef:["POST /repos/{owner}/{repo}/git/refs"],createTag:["POST /repos/{owner}/{repo}/git/tags"],createTree:["POST /repos/{owner}/{repo}/git/trees"],deleteRef:["DELETE /repos/{owner}/{repo}/git/refs/{ref}"],getBlob:["GET /repos/{owner}/{repo}/git/blobs/{file_sha}"],getCommit:["GET /repos/{owner}/{repo}/git/commits/{commit_sha}"],getRef:["GET /repos/{owner}/{repo}/git/ref/{ref}"],getTag:["GET /repos/{owner}/{repo}/git/tags/{tag_sha}"],getTree:["GET /repos/{owner}/{repo}/git/trees/{tree_sha}"],listMatchingRefs:["GET /repos/{owner}/{repo}/git/matching-refs/{ref}"],updateRef:["PATCH /repos/{owner}/{repo}/git/refs/{ref}"]},gitignore:{getAllTemplates:["GET /gitignore/templates"],getTemplate:["GET /gitignore/templates/{name}"]},hostedCompute:{createNetworkConfigurationForOrg:["POST /orgs/{org}/settings/network-configurations"],deleteNetworkConfigurationFromOrg:["DELETE /orgs/{org}/settings/network-configurations/{network_configuration_id}"],getNetworkConfigurationForOrg:["GET /orgs/{org}/settings/network-configurations/{network_configuration_id}"],getNetworkSettingsForOrg:["GET /orgs/{org}/settings/network-settings/{network_settings_id}"],listNetworkConfigurationsForOrg:["GET /orgs/{org}/settings/network-configurations"],updateNetworkConfigurationForOrg:["PATCH /orgs/{org}/settings/network-configurations/{network_configuration_id}"]},interactions:{getRestrictionsForAuthenticatedUser:["GET /user/interaction-limits"],getRestrictionsForOrg:["GET /orgs/{org}/interaction-limits"],getRestrictionsForRepo:["GET /repos/{owner}/{repo}/interaction-limits"],getRestrictionsForYourPublicRepos:["GET /user/interaction-limits",{},{renamed:["interactions","getRestrictionsForAuthenticatedUser"]}],removeRestrictionsForAuthenticatedUser:["DELETE /user/interaction-limits"],removeRestrictionsForOrg:["DELETE /orgs/{org}/interaction-limits"],removeRestrictionsForRepo:["DELETE /repos/{owner}/{repo}/interaction-limits"],removeRestrictionsForYourPublicRepos:["DELETE /user/interaction-limits",{},{renamed:["interactions","removeRestrictionsForAuthenticatedUser"]}],setRestrictionsForAuthenticatedUser:["PUT /user/interaction-limits"],setRestrictionsForOrg:["PUT /orgs/{org}/interaction-limits"],setRestrictionsForRepo:["PUT /repos/{owner}/{repo}/interaction-limits"],setRestrictionsForYourPublicRepos:["PUT /user/interaction-limits",{},{renamed:["interactions","setRestrictionsForAuthenticatedUser"]}]},issues:{addAssignees:["POST /repos/{owner}/{repo}/issues/{issue_number}/assignees"],addLabels:["POST /repos/{owner}/{repo}/issues/{issue_number}/labels"],addSubIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],checkUserCanBeAssigned:["GET /repos/{owner}/{repo}/assignees/{assignee}"],checkUserCanBeAssignedToIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}"],create:["POST /repos/{owner}/{repo}/issues"],createComment:["POST /repos/{owner}/{repo}/issues/{issue_number}/comments"],createLabel:["POST /repos/{owner}/{repo}/labels"],createMilestone:["POST /repos/{owner}/{repo}/milestones"],deleteComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}"],deleteLabel:["DELETE /repos/{owner}/{repo}/labels/{name}"],deleteMilestone:["DELETE /repos/{owner}/{repo}/milestones/{milestone_number}"],get:["GET /repos/{owner}/{repo}/issues/{issue_number}"],getComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}"],getEvent:["GET /repos/{owner}/{repo}/issues/events/{event_id}"],getLabel:["GET /repos/{owner}/{repo}/labels/{name}"],getMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}"],list:["GET /issues"],listAssignees:["GET /repos/{owner}/{repo}/assignees"],listComments:["GET /repos/{owner}/{repo}/issues/{issue_number}/comments"],listCommentsForRepo:["GET /repos/{owner}/{repo}/issues/comments"],listEvents:["GET /repos/{owner}/{repo}/issues/{issue_number}/events"],listEventsForRepo:["GET /repos/{owner}/{repo}/issues/events"],listEventsForTimeline:["GET /repos/{owner}/{repo}/issues/{issue_number}/timeline"],listForAuthenticatedUser:["GET /user/issues"],listForOrg:["GET /orgs/{org}/issues"],listForRepo:["GET /repos/{owner}/{repo}/issues"],listLabelsForMilestone:["GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels"],listLabelsForRepo:["GET /repos/{owner}/{repo}/labels"],listLabelsOnIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/labels"],listMilestones:["GET /repos/{owner}/{repo}/milestones"],listSubIssues:["GET /repos/{owner}/{repo}/issues/{issue_number}/sub_issues"],lock:["PUT /repos/{owner}/{repo}/issues/{issue_number}/lock"],removeAllLabels:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels"],removeAssignees:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees"],removeLabel:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}"],removeSubIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/sub_issue"],reprioritizeSubIssue:["PATCH /repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority"],setLabels:["PUT /repos/{owner}/{repo}/issues/{issue_number}/labels"],unlock:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock"],update:["PATCH /repos/{owner}/{repo}/issues/{issue_number}"],updateComment:["PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}"],updateLabel:["PATCH /repos/{owner}/{repo}/labels/{name}"],updateMilestone:["PATCH /repos/{owner}/{repo}/milestones/{milestone_number}"]},licenses:{get:["GET /licenses/{license}"],getAllCommonlyUsed:["GET /licenses"],getForRepo:["GET /repos/{owner}/{repo}/license"]},markdown:{render:["POST /markdown"],renderRaw:["POST /markdown/raw",{headers:{"content-type":"text/plain; charset=utf-8"}}]},meta:{get:["GET /meta"],getAllVersions:["GET /versions"],getOctocat:["GET /octocat"],getZen:["GET /zen"],root:["GET /"]},migrations:{deleteArchiveForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/archive"],deleteArchiveForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/archive"],downloadArchiveForOrg:["GET /orgs/{org}/migrations/{migration_id}/archive"],getArchiveForAuthenticatedUser:["GET /user/migrations/{migration_id}/archive"],getStatusForAuthenticatedUser:["GET /user/migrations/{migration_id}"],getStatusForOrg:["GET /orgs/{org}/migrations/{migration_id}"],listForAuthenticatedUser:["GET /user/migrations"],listForOrg:["GET /orgs/{org}/migrations"],listReposForAuthenticatedUser:["GET /user/migrations/{migration_id}/repositories"],listReposForOrg:["GET /orgs/{org}/migrations/{migration_id}/repositories"],listReposForUser:["GET /user/migrations/{migration_id}/repositories",{},{renamed:["migrations","listReposForAuthenticatedUser"]}],startForAuthenticatedUser:["POST /user/migrations"],startForOrg:["POST /orgs/{org}/migrations"],unlockRepoForAuthenticatedUser:["DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock"],unlockRepoForOrg:["DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock"]},oidc:{getOidcCustomSubTemplateForOrg:["GET /orgs/{org}/actions/oidc/customization/sub"],updateOidcCustomSubTemplateForOrg:["PUT /orgs/{org}/actions/oidc/customization/sub"]},orgs:{addSecurityManagerTeam:["PUT /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.addSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#add-a-security-manager-team"}],assignTeamToOrgRole:["PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],assignUserToOrgRole:["PUT /orgs/{org}/organization-roles/users/{username}/{role_id}"],blockUser:["PUT /orgs/{org}/blocks/{username}"],cancelInvitation:["DELETE /orgs/{org}/invitations/{invitation_id}"],checkBlockedUser:["GET /orgs/{org}/blocks/{username}"],checkMembershipForUser:["GET /orgs/{org}/members/{username}"],checkPublicMembershipForUser:["GET /orgs/{org}/public_members/{username}"],convertMemberToOutsideCollaborator:["PUT /orgs/{org}/outside_collaborators/{username}"],createInvitation:["POST /orgs/{org}/invitations"],createIssueType:["POST /orgs/{org}/issue-types"],createOrUpdateCustomProperties:["PATCH /orgs/{org}/properties/schema"],createOrUpdateCustomPropertiesValuesForRepos:["PATCH /orgs/{org}/properties/values"],createOrUpdateCustomProperty:["PUT /orgs/{org}/properties/schema/{custom_property_name}"],createWebhook:["POST /orgs/{org}/hooks"],delete:["DELETE /orgs/{org}"],deleteIssueType:["DELETE /orgs/{org}/issue-types/{issue_type_id}"],deleteWebhook:["DELETE /orgs/{org}/hooks/{hook_id}"],enableOrDisableSecurityProductOnAllOrgRepos:["POST /orgs/{org}/{security_product}/{enablement}",{},{deprecated:"octokit.rest.orgs.enableOrDisableSecurityProductOnAllOrgRepos() is deprecated, see https://docs.github.com/rest/orgs/orgs#enable-or-disable-a-security-feature-for-an-organization"}],get:["GET /orgs/{org}"],getAllCustomProperties:["GET /orgs/{org}/properties/schema"],getCustomProperty:["GET /orgs/{org}/properties/schema/{custom_property_name}"],getMembershipForAuthenticatedUser:["GET /user/memberships/orgs/{org}"],getMembershipForUser:["GET /orgs/{org}/memberships/{username}"],getOrgRole:["GET /orgs/{org}/organization-roles/{role_id}"],getOrgRulesetHistory:["GET /orgs/{org}/rulesets/{ruleset_id}/history"],getOrgRulesetVersion:["GET /orgs/{org}/rulesets/{ruleset_id}/history/{version_id}"],getWebhook:["GET /orgs/{org}/hooks/{hook_id}"],getWebhookConfigForOrg:["GET /orgs/{org}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}"],list:["GET /organizations"],listAppInstallations:["GET /orgs/{org}/installations"],listAttestations:["GET /orgs/{org}/attestations/{subject_digest}"],listBlockedUsers:["GET /orgs/{org}/blocks"],listCustomPropertiesValuesForRepos:["GET /orgs/{org}/properties/values"],listFailedInvitations:["GET /orgs/{org}/failed_invitations"],listForAuthenticatedUser:["GET /user/orgs"],listForUser:["GET /users/{username}/orgs"],listInvitationTeams:["GET /orgs/{org}/invitations/{invitation_id}/teams"],listIssueTypes:["GET /orgs/{org}/issue-types"],listMembers:["GET /orgs/{org}/members"],listMembershipsForAuthenticatedUser:["GET /user/memberships/orgs"],listOrgRoleTeams:["GET /orgs/{org}/organization-roles/{role_id}/teams"],listOrgRoleUsers:["GET /orgs/{org}/organization-roles/{role_id}/users"],listOrgRoles:["GET /orgs/{org}/organization-roles"],listOrganizationFineGrainedPermissions:["GET /orgs/{org}/organization-fine-grained-permissions"],listOutsideCollaborators:["GET /orgs/{org}/outside_collaborators"],listPatGrantRepositories:["GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories"],listPatGrantRequestRepositories:["GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories"],listPatGrantRequests:["GET /orgs/{org}/personal-access-token-requests"],listPatGrants:["GET /orgs/{org}/personal-access-tokens"],listPendingInvitations:["GET /orgs/{org}/invitations"],listPublicMembers:["GET /orgs/{org}/public_members"],listSecurityManagerTeams:["GET /orgs/{org}/security-managers",{},{deprecated:"octokit.rest.orgs.listSecurityManagerTeams() is deprecated, see https://docs.github.com/rest/orgs/security-managers#list-security-manager-teams"}],listWebhookDeliveries:["GET /orgs/{org}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /orgs/{org}/hooks"],pingWebhook:["POST /orgs/{org}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeCustomProperty:["DELETE /orgs/{org}/properties/schema/{custom_property_name}"],removeMember:["DELETE /orgs/{org}/members/{username}"],removeMembershipForUser:["DELETE /orgs/{org}/memberships/{username}"],removeOutsideCollaborator:["DELETE /orgs/{org}/outside_collaborators/{username}"],removePublicMembershipForAuthenticatedUser:["DELETE /orgs/{org}/public_members/{username}"],removeSecurityManagerTeam:["DELETE /orgs/{org}/security-managers/teams/{team_slug}",{},{deprecated:"octokit.rest.orgs.removeSecurityManagerTeam() is deprecated, see https://docs.github.com/rest/orgs/security-managers#remove-a-security-manager-team"}],reviewPatGrantRequest:["POST /orgs/{org}/personal-access-token-requests/{pat_request_id}"],reviewPatGrantRequestsInBulk:["POST /orgs/{org}/personal-access-token-requests"],revokeAllOrgRolesTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}"],revokeAllOrgRolesUser:["DELETE /orgs/{org}/organization-roles/users/{username}"],revokeOrgRoleTeam:["DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}"],revokeOrgRoleUser:["DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}"],setMembershipForUser:["PUT /orgs/{org}/memberships/{username}"],setPublicMembershipForAuthenticatedUser:["PUT /orgs/{org}/public_members/{username}"],unblockUser:["DELETE /orgs/{org}/blocks/{username}"],update:["PATCH /orgs/{org}"],updateIssueType:["PUT /orgs/{org}/issue-types/{issue_type_id}"],updateMembershipForAuthenticatedUser:["PATCH /user/memberships/orgs/{org}"],updatePatAccess:["POST /orgs/{org}/personal-access-tokens/{pat_id}"],updatePatAccesses:["POST /orgs/{org}/personal-access-tokens"],updateWebhook:["PATCH /orgs/{org}/hooks/{hook_id}"],updateWebhookConfigForOrg:["PATCH /orgs/{org}/hooks/{hook_id}/config"]},packages:{deletePackageForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}"],deletePackageForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}"],deletePackageForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}"],deletePackageVersionForAuthenticatedUser:["DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForOrg:["DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],deletePackageVersionForUser:["DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getAllPackageVersionsForAPackageOwnedByAnOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByOrg"]}],getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions",{},{renamed:["packages","getAllPackageVersionsForPackageOwnedByAuthenticatedUser"]}],getAllPackageVersionsForPackageOwnedByAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByOrg:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions"],getAllPackageVersionsForPackageOwnedByUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions"],getPackageForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}"],getPackageForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}"],getPackageForUser:["GET /users/{username}/packages/{package_type}/{package_name}"],getPackageVersionForAuthenticatedUser:["GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForOrganization:["GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}"],getPackageVersionForUser:["GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}"],listDockerMigrationConflictingPackagesForAuthenticatedUser:["GET /user/docker/conflicts"],listDockerMigrationConflictingPackagesForOrganization:["GET /orgs/{org}/docker/conflicts"],listDockerMigrationConflictingPackagesForUser:["GET /users/{username}/docker/conflicts"],listPackagesForAuthenticatedUser:["GET /user/packages"],listPackagesForOrganization:["GET /orgs/{org}/packages"],listPackagesForUser:["GET /users/{username}/packages"],restorePackageForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageForUser:["POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}"],restorePackageVersionForAuthenticatedUser:["POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForOrg:["POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"],restorePackageVersionForUser:["POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore"]},privateRegistries:{createOrgPrivateRegistry:["POST /orgs/{org}/private-registries"],deleteOrgPrivateRegistry:["DELETE /orgs/{org}/private-registries/{secret_name}"],getOrgPrivateRegistry:["GET /orgs/{org}/private-registries/{secret_name}"],getOrgPublicKey:["GET /orgs/{org}/private-registries/public-key"],listOrgPrivateRegistries:["GET /orgs/{org}/private-registries"],updateOrgPrivateRegistry:["PATCH /orgs/{org}/private-registries/{secret_name}"]},projects:{addCollaborator:["PUT /projects/{project_id}/collaborators/{username}",{},{deprecated:"octokit.rest.projects.addCollaborator() is deprecated, see https://docs.github.com/rest/projects/collaborators#add-project-collaborator"}],createCard:["POST /projects/columns/{column_id}/cards",{},{deprecated:"octokit.rest.projects.createCard() is deprecated, see https://docs.github.com/rest/projects/cards#create-a-project-card"}],createColumn:["POST /projects/{project_id}/columns",{},{deprecated:"octokit.rest.projects.createColumn() is deprecated, see https://docs.github.com/rest/projects/columns#create-a-project-column"}],createForAuthenticatedUser:["POST /user/projects",{},{deprecated:"octokit.rest.projects.createForAuthenticatedUser() is deprecated, see https://docs.github.com/rest/projects/projects#create-a-user-project"}],createForOrg:["POST /orgs/{org}/projects",{},{deprecated:"octokit.rest.projects.createForOrg() is deprecated, see https://docs.github.com/rest/projects/projects#create-an-organization-project"}],createForRepo:["POST /repos/{owner}/{repo}/projects",{},{deprecated:"octokit.rest.projects.createForRepo() is deprecated, see https://docs.github.com/rest/projects/projects#create-a-repository-project"}],delete:["DELETE /projects/{project_id}",{},{deprecated:"octokit.rest.projects.delete() is deprecated, see https://docs.github.com/rest/projects/projects#delete-a-project"}],deleteCard:["DELETE /projects/columns/cards/{card_id}",{},{deprecated:"octokit.rest.projects.deleteCard() is deprecated, see https://docs.github.com/rest/projects/cards#delete-a-project-card"}],deleteColumn:["DELETE /projects/columns/{column_id}",{},{deprecated:"octokit.rest.projects.deleteColumn() is deprecated, see https://docs.github.com/rest/projects/columns#delete-a-project-column"}],get:["GET /projects/{project_id}",{},{deprecated:"octokit.rest.projects.get() is deprecated, see https://docs.github.com/rest/projects/projects#get-a-project"}],getCard:["GET /projects/columns/cards/{card_id}",{},{deprecated:"octokit.rest.projects.getCard() is deprecated, see https://docs.github.com/rest/projects/cards#get-a-project-card"}],getColumn:["GET /projects/columns/{column_id}",{},{deprecated:"octokit.rest.projects.getColumn() is deprecated, see https://docs.github.com/rest/projects/columns#get-a-project-column"}],getPermissionForUser:["GET /projects/{project_id}/collaborators/{username}/permission",{},{deprecated:"octokit.rest.projects.getPermissionForUser() is deprecated, see https://docs.github.com/rest/projects/collaborators#get-project-permission-for-a-user"}],listCards:["GET /projects/columns/{column_id}/cards",{},{deprecated:"octokit.rest.projects.listCards() is deprecated, see https://docs.github.com/rest/projects/cards#list-project-cards"}],listCollaborators:["GET /projects/{project_id}/collaborators",{},{deprecated:"octokit.rest.projects.listCollaborators() is deprecated, see https://docs.github.com/rest/projects/collaborators#list-project-collaborators"}],listColumns:["GET /projects/{project_id}/columns",{},{deprecated:"octokit.rest.projects.listColumns() is deprecated, see https://docs.github.com/rest/projects/columns#list-project-columns"}],listForOrg:["GET /orgs/{org}/projects",{},{deprecated:"octokit.rest.projects.listForOrg() is deprecated, see https://docs.github.com/rest/projects/projects#list-organization-projects"}],listForRepo:["GET /repos/{owner}/{repo}/projects",{},{deprecated:"octokit.rest.projects.listForRepo() is deprecated, see https://docs.github.com/rest/projects/projects#list-repository-projects"}],listForUser:["GET /users/{username}/projects",{},{deprecated:"octokit.rest.projects.listForUser() is deprecated, see https://docs.github.com/rest/projects/projects#list-user-projects"}],moveCard:["POST /projects/columns/cards/{card_id}/moves",{},{deprecated:"octokit.rest.projects.moveCard() is deprecated, see https://docs.github.com/rest/projects/cards#move-a-project-card"}],moveColumn:["POST /projects/columns/{column_id}/moves",{},{deprecated:"octokit.rest.projects.moveColumn() is deprecated, see https://docs.github.com/rest/projects/columns#move-a-project-column"}],removeCollaborator:["DELETE /projects/{project_id}/collaborators/{username}",{},{deprecated:"octokit.rest.projects.removeCollaborator() is deprecated, see https://docs.github.com/rest/projects/collaborators#remove-user-as-a-collaborator"}],update:["PATCH /projects/{project_id}",{},{deprecated:"octokit.rest.projects.update() is deprecated, see https://docs.github.com/rest/projects/projects#update-a-project"}],updateCard:["PATCH /projects/columns/cards/{card_id}",{},{deprecated:"octokit.rest.projects.updateCard() is deprecated, see https://docs.github.com/rest/projects/cards#update-an-existing-project-card"}],updateColumn:["PATCH /projects/columns/{column_id}",{},{deprecated:"octokit.rest.projects.updateColumn() is deprecated, see https://docs.github.com/rest/projects/columns#update-an-existing-project-column"}]},pulls:{checkIfMerged:["GET /repos/{owner}/{repo}/pulls/{pull_number}/merge"],create:["POST /repos/{owner}/{repo}/pulls"],createReplyForReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies"],createReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],createReviewComment:["POST /repos/{owner}/{repo}/pulls/{pull_number}/comments"],deletePendingReview:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],deleteReviewComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}"],dismissReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals"],get:["GET /repos/{owner}/{repo}/pulls/{pull_number}"],getReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],getReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}"],list:["GET /repos/{owner}/{repo}/pulls"],listCommentsForReview:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments"],listCommits:["GET /repos/{owner}/{repo}/pulls/{pull_number}/commits"],listFiles:["GET /repos/{owner}/{repo}/pulls/{pull_number}/files"],listRequestedReviewers:["GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],listReviewComments:["GET /repos/{owner}/{repo}/pulls/{pull_number}/comments"],listReviewCommentsForRepo:["GET /repos/{owner}/{repo}/pulls/comments"],listReviews:["GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews"],merge:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge"],removeRequestedReviewers:["DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],requestReviewers:["POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers"],submitReview:["POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events"],update:["PATCH /repos/{owner}/{repo}/pulls/{pull_number}"],updateBranch:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch"],updateReview:["PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}"],updateReviewComment:["PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}"]},rateLimit:{get:["GET /rate_limit"]},reactions:{createForCommitComment:["POST /repos/{owner}/{repo}/comments/{comment_id}/reactions"],createForIssue:["POST /repos/{owner}/{repo}/issues/{issue_number}/reactions"],createForIssueComment:["POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],createForPullRequestReviewComment:["POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],createForRelease:["POST /repos/{owner}/{repo}/releases/{release_id}/reactions"],createForTeamDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],createForTeamDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"],deleteForCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}"],deleteForIssue:["DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}"],deleteForIssueComment:["DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}"],deleteForPullRequestComment:["DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}"],deleteForRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}"],deleteForTeamDiscussion:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}"],deleteForTeamDiscussionComment:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}"],listForCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}/reactions"],listForIssue:["GET /repos/{owner}/{repo}/issues/{issue_number}/reactions"],listForIssueComment:["GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions"],listForPullRequestReviewComment:["GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions"],listForRelease:["GET /repos/{owner}/{repo}/releases/{release_id}/reactions"],listForTeamDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions"],listForTeamDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions"]},repos:{acceptInvitation:["PATCH /user/repository_invitations/{invitation_id}",{},{renamed:["repos","acceptInvitationForAuthenticatedUser"]}],acceptInvitationForAuthenticatedUser:["PATCH /user/repository_invitations/{invitation_id}"],addAppAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],addCollaborator:["PUT /repos/{owner}/{repo}/collaborators/{username}"],addStatusCheckContexts:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],addTeamAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],addUserAccessRestrictions:["POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],cancelPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel"],checkAutomatedSecurityFixes:["GET /repos/{owner}/{repo}/automated-security-fixes"],checkCollaborator:["GET /repos/{owner}/{repo}/collaborators/{username}"],checkPrivateVulnerabilityReporting:["GET /repos/{owner}/{repo}/private-vulnerability-reporting"],checkVulnerabilityAlerts:["GET /repos/{owner}/{repo}/vulnerability-alerts"],codeownersErrors:["GET /repos/{owner}/{repo}/codeowners/errors"],compareCommits:["GET /repos/{owner}/{repo}/compare/{base}...{head}"],compareCommitsWithBasehead:["GET /repos/{owner}/{repo}/compare/{basehead}"],createAttestation:["POST /repos/{owner}/{repo}/attestations"],createAutolink:["POST /repos/{owner}/{repo}/autolinks"],createCommitComment:["POST /repos/{owner}/{repo}/commits/{commit_sha}/comments"],createCommitSignatureProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],createCommitStatus:["POST /repos/{owner}/{repo}/statuses/{sha}"],createDeployKey:["POST /repos/{owner}/{repo}/keys"],createDeployment:["POST /repos/{owner}/{repo}/deployments"],createDeploymentBranchPolicy:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],createDeploymentProtectionRule:["POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],createDeploymentStatus:["POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],createDispatchEvent:["POST /repos/{owner}/{repo}/dispatches"],createForAuthenticatedUser:["POST /user/repos"],createFork:["POST /repos/{owner}/{repo}/forks"],createInOrg:["POST /orgs/{org}/repos"],createOrUpdateCustomPropertiesValues:["PATCH /repos/{owner}/{repo}/properties/values"],createOrUpdateEnvironment:["PUT /repos/{owner}/{repo}/environments/{environment_name}"],createOrUpdateFileContents:["PUT /repos/{owner}/{repo}/contents/{path}"],createOrgRuleset:["POST /orgs/{org}/rulesets"],createPagesDeployment:["POST /repos/{owner}/{repo}/pages/deployments"],createPagesSite:["POST /repos/{owner}/{repo}/pages"],createRelease:["POST /repos/{owner}/{repo}/releases"],createRepoRuleset:["POST /repos/{owner}/{repo}/rulesets"],createUsingTemplate:["POST /repos/{template_owner}/{template_repo}/generate"],createWebhook:["POST /repos/{owner}/{repo}/hooks"],declineInvitation:["DELETE /user/repository_invitations/{invitation_id}",{},{renamed:["repos","declineInvitationForAuthenticatedUser"]}],declineInvitationForAuthenticatedUser:["DELETE /user/repository_invitations/{invitation_id}"],delete:["DELETE /repos/{owner}/{repo}"],deleteAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],deleteAdminBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],deleteAnEnvironment:["DELETE /repos/{owner}/{repo}/environments/{environment_name}"],deleteAutolink:["DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}"],deleteBranchProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection"],deleteCommitComment:["DELETE /repos/{owner}/{repo}/comments/{comment_id}"],deleteCommitSignatureProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],deleteDeployKey:["DELETE /repos/{owner}/{repo}/keys/{key_id}"],deleteDeployment:["DELETE /repos/{owner}/{repo}/deployments/{deployment_id}"],deleteDeploymentBranchPolicy:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],deleteFile:["DELETE /repos/{owner}/{repo}/contents/{path}"],deleteInvitation:["DELETE /repos/{owner}/{repo}/invitations/{invitation_id}"],deleteOrgRuleset:["DELETE /orgs/{org}/rulesets/{ruleset_id}"],deletePagesSite:["DELETE /repos/{owner}/{repo}/pages"],deletePullRequestReviewProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],deleteRelease:["DELETE /repos/{owner}/{repo}/releases/{release_id}"],deleteReleaseAsset:["DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}"],deleteRepoRuleset:["DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}"],deleteWebhook:["DELETE /repos/{owner}/{repo}/hooks/{hook_id}"],disableAutomatedSecurityFixes:["DELETE /repos/{owner}/{repo}/automated-security-fixes"],disableDeploymentProtectionRule:["DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],disablePrivateVulnerabilityReporting:["DELETE /repos/{owner}/{repo}/private-vulnerability-reporting"],disableVulnerabilityAlerts:["DELETE /repos/{owner}/{repo}/vulnerability-alerts"],downloadArchive:["GET /repos/{owner}/{repo}/zipball/{ref}",{},{renamed:["repos","downloadZipballArchive"]}],downloadTarballArchive:["GET /repos/{owner}/{repo}/tarball/{ref}"],downloadZipballArchive:["GET /repos/{owner}/{repo}/zipball/{ref}"],enableAutomatedSecurityFixes:["PUT /repos/{owner}/{repo}/automated-security-fixes"],enablePrivateVulnerabilityReporting:["PUT /repos/{owner}/{repo}/private-vulnerability-reporting"],enableVulnerabilityAlerts:["PUT /repos/{owner}/{repo}/vulnerability-alerts"],generateReleaseNotes:["POST /repos/{owner}/{repo}/releases/generate-notes"],get:["GET /repos/{owner}/{repo}"],getAccessRestrictions:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions"],getAdminBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],getAllDeploymentProtectionRules:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules"],getAllEnvironments:["GET /repos/{owner}/{repo}/environments"],getAllStatusCheckContexts:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts"],getAllTopics:["GET /repos/{owner}/{repo}/topics"],getAppsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps"],getAutolink:["GET /repos/{owner}/{repo}/autolinks/{autolink_id}"],getBranch:["GET /repos/{owner}/{repo}/branches/{branch}"],getBranchProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection"],getBranchRules:["GET /repos/{owner}/{repo}/rules/branches/{branch}"],getClones:["GET /repos/{owner}/{repo}/traffic/clones"],getCodeFrequencyStats:["GET /repos/{owner}/{repo}/stats/code_frequency"],getCollaboratorPermissionLevel:["GET /repos/{owner}/{repo}/collaborators/{username}/permission"],getCombinedStatusForRef:["GET /repos/{owner}/{repo}/commits/{ref}/status"],getCommit:["GET /repos/{owner}/{repo}/commits/{ref}"],getCommitActivityStats:["GET /repos/{owner}/{repo}/stats/commit_activity"],getCommitComment:["GET /repos/{owner}/{repo}/comments/{comment_id}"],getCommitSignatureProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures"],getCommunityProfileMetrics:["GET /repos/{owner}/{repo}/community/profile"],getContent:["GET /repos/{owner}/{repo}/contents/{path}"],getContributorsStats:["GET /repos/{owner}/{repo}/stats/contributors"],getCustomDeploymentProtectionRule:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}"],getCustomPropertiesValues:["GET /repos/{owner}/{repo}/properties/values"],getDeployKey:["GET /repos/{owner}/{repo}/keys/{key_id}"],getDeployment:["GET /repos/{owner}/{repo}/deployments/{deployment_id}"],getDeploymentBranchPolicy:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],getDeploymentStatus:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}"],getEnvironment:["GET /repos/{owner}/{repo}/environments/{environment_name}"],getLatestPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/latest"],getLatestRelease:["GET /repos/{owner}/{repo}/releases/latest"],getOrgRuleSuite:["GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}"],getOrgRuleSuites:["GET /orgs/{org}/rulesets/rule-suites"],getOrgRuleset:["GET /orgs/{org}/rulesets/{ruleset_id}"],getOrgRulesets:["GET /orgs/{org}/rulesets"],getPages:["GET /repos/{owner}/{repo}/pages"],getPagesBuild:["GET /repos/{owner}/{repo}/pages/builds/{build_id}"],getPagesDeployment:["GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}"],getPagesHealthCheck:["GET /repos/{owner}/{repo}/pages/health"],getParticipationStats:["GET /repos/{owner}/{repo}/stats/participation"],getPullRequestReviewProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],getPunchCardStats:["GET /repos/{owner}/{repo}/stats/punch_card"],getReadme:["GET /repos/{owner}/{repo}/readme"],getReadmeInDirectory:["GET /repos/{owner}/{repo}/readme/{dir}"],getRelease:["GET /repos/{owner}/{repo}/releases/{release_id}"],getReleaseAsset:["GET /repos/{owner}/{repo}/releases/assets/{asset_id}"],getReleaseByTag:["GET /repos/{owner}/{repo}/releases/tags/{tag}"],getRepoRuleSuite:["GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}"],getRepoRuleSuites:["GET /repos/{owner}/{repo}/rulesets/rule-suites"],getRepoRuleset:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}"],getRepoRulesetHistory:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}/history"],getRepoRulesetVersion:["GET /repos/{owner}/{repo}/rulesets/{ruleset_id}/history/{version_id}"],getRepoRulesets:["GET /repos/{owner}/{repo}/rulesets"],getStatusChecksProtection:["GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],getTeamsWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams"],getTopPaths:["GET /repos/{owner}/{repo}/traffic/popular/paths"],getTopReferrers:["GET /repos/{owner}/{repo}/traffic/popular/referrers"],getUsersWithAccessToProtectedBranch:["GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users"],getViews:["GET /repos/{owner}/{repo}/traffic/views"],getWebhook:["GET /repos/{owner}/{repo}/hooks/{hook_id}"],getWebhookConfigForRepo:["GET /repos/{owner}/{repo}/hooks/{hook_id}/config"],getWebhookDelivery:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}"],listActivities:["GET /repos/{owner}/{repo}/activity"],listAttestations:["GET /repos/{owner}/{repo}/attestations/{subject_digest}"],listAutolinks:["GET /repos/{owner}/{repo}/autolinks"],listBranches:["GET /repos/{owner}/{repo}/branches"],listBranchesForHeadCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head"],listCollaborators:["GET /repos/{owner}/{repo}/collaborators"],listCommentsForCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/comments"],listCommitCommentsForRepo:["GET /repos/{owner}/{repo}/comments"],listCommitStatusesForRef:["GET /repos/{owner}/{repo}/commits/{ref}/statuses"],listCommits:["GET /repos/{owner}/{repo}/commits"],listContributors:["GET /repos/{owner}/{repo}/contributors"],listCustomDeploymentRuleIntegrations:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps"],listDeployKeys:["GET /repos/{owner}/{repo}/keys"],listDeploymentBranchPolicies:["GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies"],listDeploymentStatuses:["GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses"],listDeployments:["GET /repos/{owner}/{repo}/deployments"],listForAuthenticatedUser:["GET /user/repos"],listForOrg:["GET /orgs/{org}/repos"],listForUser:["GET /users/{username}/repos"],listForks:["GET /repos/{owner}/{repo}/forks"],listInvitations:["GET /repos/{owner}/{repo}/invitations"],listInvitationsForAuthenticatedUser:["GET /user/repository_invitations"],listLanguages:["GET /repos/{owner}/{repo}/languages"],listPagesBuilds:["GET /repos/{owner}/{repo}/pages/builds"],listPublic:["GET /repositories"],listPullRequestsAssociatedWithCommit:["GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls"],listReleaseAssets:["GET /repos/{owner}/{repo}/releases/{release_id}/assets"],listReleases:["GET /repos/{owner}/{repo}/releases"],listTags:["GET /repos/{owner}/{repo}/tags"],listTeams:["GET /repos/{owner}/{repo}/teams"],listWebhookDeliveries:["GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries"],listWebhooks:["GET /repos/{owner}/{repo}/hooks"],merge:["POST /repos/{owner}/{repo}/merges"],mergeUpstream:["POST /repos/{owner}/{repo}/merge-upstream"],pingWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/pings"],redeliverWebhookDelivery:["POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts"],removeAppAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],removeCollaborator:["DELETE /repos/{owner}/{repo}/collaborators/{username}"],removeStatusCheckContexts:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],removeStatusCheckProtection:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],removeTeamAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],removeUserAccessRestrictions:["DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],renameBranch:["POST /repos/{owner}/{repo}/branches/{branch}/rename"],replaceAllTopics:["PUT /repos/{owner}/{repo}/topics"],requestPagesBuild:["POST /repos/{owner}/{repo}/pages/builds"],setAdminBranchProtection:["POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins"],setAppAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps",{},{mapToData:"apps"}],setStatusCheckContexts:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts",{},{mapToData:"contexts"}],setTeamAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams",{},{mapToData:"teams"}],setUserAccessRestrictions:["PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users",{},{mapToData:"users"}],testPushWebhook:["POST /repos/{owner}/{repo}/hooks/{hook_id}/tests"],transfer:["POST /repos/{owner}/{repo}/transfer"],update:["PATCH /repos/{owner}/{repo}"],updateBranchProtection:["PUT /repos/{owner}/{repo}/branches/{branch}/protection"],updateCommitComment:["PATCH /repos/{owner}/{repo}/comments/{comment_id}"],updateDeploymentBranchPolicy:["PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}"],updateInformationAboutPagesSite:["PUT /repos/{owner}/{repo}/pages"],updateInvitation:["PATCH /repos/{owner}/{repo}/invitations/{invitation_id}"],updateOrgRuleset:["PUT /orgs/{org}/rulesets/{ruleset_id}"],updatePullRequestReviewProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews"],updateRelease:["PATCH /repos/{owner}/{repo}/releases/{release_id}"],updateReleaseAsset:["PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}"],updateRepoRuleset:["PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}"],updateStatusCheckPotection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks",{},{renamed:["repos","updateStatusCheckProtection"]}],updateStatusCheckProtection:["PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks"],updateWebhook:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}"],updateWebhookConfigForRepo:["PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config"],uploadReleaseAsset:["POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}",{baseUrl:"https://uploads.github.com"}]},search:{code:["GET /search/code"],commits:["GET /search/commits"],issuesAndPullRequests:["GET /search/issues",{},{deprecated:"octokit.rest.search.issuesAndPullRequests() is deprecated, see https://docs.github.com/rest/search/search#search-issues-and-pull-requests"}],labels:["GET /search/labels"],repos:["GET /search/repositories"],topics:["GET /search/topics"],users:["GET /search/users"]},secretScanning:{createPushProtectionBypass:["POST /repos/{owner}/{repo}/secret-scanning/push-protection-bypasses"],getAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"],getScanHistory:["GET /repos/{owner}/{repo}/secret-scanning/scan-history"],listAlertsForEnterprise:["GET /enterprises/{enterprise}/secret-scanning/alerts"],listAlertsForOrg:["GET /orgs/{org}/secret-scanning/alerts"],listAlertsForRepo:["GET /repos/{owner}/{repo}/secret-scanning/alerts"],listLocationsForAlert:["GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations"],updateAlert:["PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}"]},securityAdvisories:{createFork:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks"],createPrivateVulnerabilityReport:["POST /repos/{owner}/{repo}/security-advisories/reports"],createRepositoryAdvisory:["POST /repos/{owner}/{repo}/security-advisories"],createRepositoryAdvisoryCveRequest:["POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve"],getGlobalAdvisory:["GET /advisories/{ghsa_id}"],getRepositoryAdvisory:["GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}"],listGlobalAdvisories:["GET /advisories"],listOrgRepositoryAdvisories:["GET /orgs/{org}/security-advisories"],listRepositoryAdvisories:["GET /repos/{owner}/{repo}/security-advisories"],updateRepositoryAdvisory:["PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}"]},teams:{addOrUpdateMembershipForUserInOrg:["PUT /orgs/{org}/teams/{team_slug}/memberships/{username}"],addOrUpdateProjectPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}",{},{deprecated:"octokit.rest.teams.addOrUpdateProjectPermissionsInOrg() is deprecated, see https://docs.github.com/rest/teams/teams#add-or-update-team-project-permissions"}],addOrUpdateProjectPermissionsLegacy:["PUT /teams/{team_id}/projects/{project_id}",{},{deprecated:"octokit.rest.teams.addOrUpdateProjectPermissionsLegacy() is deprecated, see https://docs.github.com/rest/teams/teams#add-or-update-team-project-permissions-legacy"}],addOrUpdateRepoPermissionsInOrg:["PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],checkPermissionsForProjectInOrg:["GET /orgs/{org}/teams/{team_slug}/projects/{project_id}",{},{deprecated:"octokit.rest.teams.checkPermissionsForProjectInOrg() is deprecated, see https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-project"}],checkPermissionsForProjectLegacy:["GET /teams/{team_id}/projects/{project_id}",{},{deprecated:"octokit.rest.teams.checkPermissionsForProjectLegacy() is deprecated, see https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-project-legacy"}],checkPermissionsForRepoInOrg:["GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],create:["POST /orgs/{org}/teams"],createDiscussionCommentInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],createDiscussionInOrg:["POST /orgs/{org}/teams/{team_slug}/discussions"],deleteDiscussionCommentInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],deleteDiscussionInOrg:["DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],deleteInOrg:["DELETE /orgs/{org}/teams/{team_slug}"],getByName:["GET /orgs/{org}/teams/{team_slug}"],getDiscussionCommentInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],getDiscussionInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],getMembershipForUserInOrg:["GET /orgs/{org}/teams/{team_slug}/memberships/{username}"],list:["GET /orgs/{org}/teams"],listChildInOrg:["GET /orgs/{org}/teams/{team_slug}/teams"],listDiscussionCommentsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments"],listDiscussionsInOrg:["GET /orgs/{org}/teams/{team_slug}/discussions"],listForAuthenticatedUser:["GET /user/teams"],listMembersInOrg:["GET /orgs/{org}/teams/{team_slug}/members"],listPendingInvitationsInOrg:["GET /orgs/{org}/teams/{team_slug}/invitations"],listProjectsInOrg:["GET /orgs/{org}/teams/{team_slug}/projects",{},{deprecated:"octokit.rest.teams.listProjectsInOrg() is deprecated, see https://docs.github.com/rest/teams/teams#list-team-projects"}],listProjectsLegacy:["GET /teams/{team_id}/projects",{},{deprecated:"octokit.rest.teams.listProjectsLegacy() is deprecated, see https://docs.github.com/rest/teams/teams#list-team-projects-legacy"}],listReposInOrg:["GET /orgs/{org}/teams/{team_slug}/repos"],removeMembershipForUserInOrg:["DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}"],removeProjectInOrg:["DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}",{},{deprecated:"octokit.rest.teams.removeProjectInOrg() is deprecated, see https://docs.github.com/rest/teams/teams#remove-a-project-from-a-team"}],removeProjectLegacy:["DELETE /teams/{team_id}/projects/{project_id}",{},{deprecated:"octokit.rest.teams.removeProjectLegacy() is deprecated, see https://docs.github.com/rest/teams/teams#remove-a-project-from-a-team-legacy"}],removeRepoInOrg:["DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}"],updateDiscussionCommentInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}"],updateDiscussionInOrg:["PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}"],updateInOrg:["PATCH /orgs/{org}/teams/{team_slug}"]},users:{addEmailForAuthenticated:["POST /user/emails",{},{renamed:["users","addEmailForAuthenticatedUser"]}],addEmailForAuthenticatedUser:["POST /user/emails"],addSocialAccountForAuthenticatedUser:["POST /user/social_accounts"],block:["PUT /user/blocks/{username}"],checkBlocked:["GET /user/blocks/{username}"],checkFollowingForUser:["GET /users/{username}/following/{target_user}"],checkPersonIsFollowedByAuthenticated:["GET /user/following/{username}"],createGpgKeyForAuthenticated:["POST /user/gpg_keys",{},{renamed:["users","createGpgKeyForAuthenticatedUser"]}],createGpgKeyForAuthenticatedUser:["POST /user/gpg_keys"],createPublicSshKeyForAuthenticated:["POST /user/keys",{},{renamed:["users","createPublicSshKeyForAuthenticatedUser"]}],createPublicSshKeyForAuthenticatedUser:["POST /user/keys"],createSshSigningKeyForAuthenticatedUser:["POST /user/ssh_signing_keys"],deleteEmailForAuthenticated:["DELETE /user/emails",{},{renamed:["users","deleteEmailForAuthenticatedUser"]}],deleteEmailForAuthenticatedUser:["DELETE /user/emails"],deleteGpgKeyForAuthenticated:["DELETE /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","deleteGpgKeyForAuthenticatedUser"]}],deleteGpgKeyForAuthenticatedUser:["DELETE /user/gpg_keys/{gpg_key_id}"],deletePublicSshKeyForAuthenticated:["DELETE /user/keys/{key_id}",{},{renamed:["users","deletePublicSshKeyForAuthenticatedUser"]}],deletePublicSshKeyForAuthenticatedUser:["DELETE /user/keys/{key_id}"],deleteSocialAccountForAuthenticatedUser:["DELETE /user/social_accounts"],deleteSshSigningKeyForAuthenticatedUser:["DELETE /user/ssh_signing_keys/{ssh_signing_key_id}"],follow:["PUT /user/following/{username}"],getAuthenticated:["GET /user"],getById:["GET /user/{account_id}"],getByUsername:["GET /users/{username}"],getContextForUser:["GET /users/{username}/hovercard"],getGpgKeyForAuthenticated:["GET /user/gpg_keys/{gpg_key_id}",{},{renamed:["users","getGpgKeyForAuthenticatedUser"]}],getGpgKeyForAuthenticatedUser:["GET /user/gpg_keys/{gpg_key_id}"],getPublicSshKeyForAuthenticated:["GET /user/keys/{key_id}",{},{renamed:["users","getPublicSshKeyForAuthenticatedUser"]}],getPublicSshKeyForAuthenticatedUser:["GET /user/keys/{key_id}"],getSshSigningKeyForAuthenticatedUser:["GET /user/ssh_signing_keys/{ssh_signing_key_id}"],list:["GET /users"],listAttestations:["GET /users/{username}/attestations/{subject_digest}"],listBlockedByAuthenticated:["GET /user/blocks",{},{renamed:["users","listBlockedByAuthenticatedUser"]}],listBlockedByAuthenticatedUser:["GET /user/blocks"],listEmailsForAuthenticated:["GET /user/emails",{},{renamed:["users","listEmailsForAuthenticatedUser"]}],listEmailsForAuthenticatedUser:["GET /user/emails"],listFollowedByAuthenticated:["GET /user/following",{},{renamed:["users","listFollowedByAuthenticatedUser"]}],listFollowedByAuthenticatedUser:["GET /user/following"],listFollowersForAuthenticatedUser:["GET /user/followers"],listFollowersForUser:["GET /users/{username}/followers"],listFollowingForUser:["GET /users/{username}/following"],listGpgKeysForAuthenticated:["GET /user/gpg_keys",{},{renamed:["users","listGpgKeysForAuthenticatedUser"]}],listGpgKeysForAuthenticatedUser:["GET /user/gpg_keys"],listGpgKeysForUser:["GET /users/{username}/gpg_keys"],listPublicEmailsForAuthenticated:["GET /user/public_emails",{},{renamed:["users","listPublicEmailsForAuthenticatedUser"]}],listPublicEmailsForAuthenticatedUser:["GET /user/public_emails"],listPublicKeysForUser:["GET /users/{username}/keys"],listPublicSshKeysForAuthenticated:["GET /user/keys",{},{renamed:["users","listPublicSshKeysForAuthenticatedUser"]}],listPublicSshKeysForAuthenticatedUser:["GET /user/keys"],listSocialAccountsForAuthenticatedUser:["GET /user/social_accounts"],listSocialAccountsForUser:["GET /users/{username}/social_accounts"],listSshSigningKeysForAuthenticatedUser:["GET /user/ssh_signing_keys"],listSshSigningKeysForUser:["GET /users/{username}/ssh_signing_keys"],setPrimaryEmailVisibilityForAuthenticated:["PATCH /user/email/visibility",{},{renamed:["users","setPrimaryEmailVisibilityForAuthenticatedUser"]}],setPrimaryEmailVisibilityForAuthenticatedUser:["PATCH /user/email/visibility"],unblock:["DELETE /user/blocks/{username}"],unfollow:["DELETE /user/following/{username}"],updateAuthenticated:["PATCH /user"]}},Ur=Co;var M=new Map;for(let[e,t]of Object.entries(Ur))for(let[r,s]of Object.entries(t)){let[o,i,a]=s,[u,g]=o.split(/ /),w=Object.assign({method:u,url:g},i);M.has(e)||M.set(e,new Map),M.get(e).set(r,{scope:e,methodName:r,endpointDefaults:w,decorations:a})}var Fo={has({scope:e},t){return M.get(e).has(t)},getOwnPropertyDescriptor(e,t){return{value:this.get(e,t),configurable:!0,writable:!0,enumerable:!0}},defineProperty(e,t,r){return Object.defineProperty(e.cache,t,r),!0},deleteProperty(e,t){return delete e.cache[t],!0},ownKeys({scope:e}){return[...M.get(e).keys()]},set(e,t,r){return e.cache[t]=r},get({octokit:e,scope:t,cache:r},s){if(r[s])return r[s];let o=M.get(t).get(s);if(!o)return;let{endpointDefaults:i,decorations:a}=o;return a?r[s]=Uo(e,t,s,i,a):r[s]=e.request.defaults(i),r[s]}};function it(e){let t={};for(let r of M.keys())t[r]=new Proxy({octokit:e,scope:r,cache:{}},Fo);return t}function Uo(e,t,r,s,o){let i=e.request.defaults(s);function a(...u){let g=i.endpoint.merge(...u);if(o.mapToData)return g=Object.assign({},g,{data:g[o.mapToData],[o.mapToData]:void 0}),i(g);if(o.renamed){let[w,T]=o.renamed;e.log.warn(`octokit.${t}.${r}() has been renamed to octokit.${w}.${T}()`)}if(o.deprecated&&e.log.warn(o.deprecated),o.renamedParameters){let w=i.endpoint.merge(...u);for(let[T,y]of Object.entries(o.renamedParameters))T in w&&(e.log.warn(`"${T}" parameter is deprecated for "octokit.${t}.${r}()". Use "${y}" instead`),y in w||(w[y]=w[T]),delete w[T]);return i(w)}return i(...u)}return Object.assign(a,i)}function at(e){return{rest:it(e)}}at.VERSION=nt;function Io(e){let t=it(e);return b(m({},t),{rest:t})}Io.VERSION=nt;var Dr=_e(ut(),1);var Do="0.0.0-development";function Ir(e,t,r,s){return d(this,null,function*(){if(!r.request||!r.request.request)throw r;if(r.status>=400&&!e.doNotRetry.includes(r.status)){let o=s.request.retries!=null?s.request.retries:e.retries,i=Math.pow((s.request.retryCount||0)+1,2);throw t.retry.retryRequest(r,o,i)}throw r})}function xo(e,t,r,s){return d(this,null,function*(){let o=new Dr.default;return o.on("failed",function(i,a){let u=~~i.request.request.retries,g=~~i.request.request.retryAfter;if(s.request.retryCount=a.retryCount+1,u>a.retryCount)return g*e.retryAfterBaseValue}),o.schedule(Lo.bind(null,e,t,r),s)})}function Lo(e,t,r,s){return d(this,null,function*(){let o=yield r(r,s);if(o.data&&o.data.errors&&o.data.errors.length>0&&/Something went wrong while executing your query/.test(o.data.errors[0].message)){let i=new x(o.data.errors[0].message,500,{request:s,response:o});return Ir(e,t,i,s)}return o})}function pt(e,t){let r=Object.assign({enabled:!0,retryAfterBaseValue:1e3,doNotRetry:[400,401,403,404,410,422,451],retries:3},t.retry);return r.enabled&&(e.hook.error("request",Ir.bind(null,r,e)),e.hook.wrap("request",xo.bind(null,r,e))),{retry:{retryRequest:(s,o,i)=>(s.request.request=Object.assign({},s.request.request,{retries:o,retryAfter:i}),s)}}}pt.VERSION=Do;var Lr=_e(ut(),1);var qo="0.0.0-development",dt=()=>Promise.resolve();function $o(e,t,r){return e.retryLimiter.schedule(Ho,e,t,r)}function Ho(e,t,r){return d(this,null,function*(){let s=r.method!=="GET"&&r.method!=="HEAD",{pathname:o}=new URL(r.url,"http://github.test"),i=r.method==="GET"&&o.startsWith("/search/"),a=o.startsWith("/graphql"),g=~~t.retryCount>0?{priority:0,weight:0}:{};e.clustering&&(g.expiration=1e3*60),(s||a)&&(yield e.write.key(e.id).schedule(g,dt)),s&&e.triggersNotification(o)&&(yield e.notifications.key(e.id).schedule(g,dt)),i&&(yield e.search.key(e.id).schedule(g,dt));let w=e.global.key(e.id).schedule(g,t,r);if(a){let T=yield w;if(T.data.errors!=null&&T.data.errors.some(y=>y.type==="RATE_LIMITED"))throw Object.assign(new Error("GraphQL Rate Limit Exceeded"),{response:T,data:T.data})}return w})}var zo=["/orgs/{org}/invitations","/orgs/{org}/invitations/{invitation_id}","/orgs/{org}/teams/{team_slug}/discussions","/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments","/repos/{owner}/{repo}/collaborators/{username}","/repos/{owner}/{repo}/commits/{commit_sha}/comments","/repos/{owner}/{repo}/issues","/repos/{owner}/{repo}/issues/{issue_number}/comments","/repos/{owner}/{repo}/issues/{issue_number}/sub_issue","/repos/{owner}/{repo}/issues/{issue_number}/sub_issues/priority","/repos/{owner}/{repo}/pulls","/repos/{owner}/{repo}/pulls/{pull_number}/comments","/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies","/repos/{owner}/{repo}/pulls/{pull_number}/merge","/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers","/repos/{owner}/{repo}/pulls/{pull_number}/reviews","/repos/{owner}/{repo}/releases","/teams/{team_id}/discussions","/teams/{team_id}/discussions/{discussion_number}/comments"];function No(e){let r=`^(?:${e.map(s=>s.split("/").map(o=>o.startsWith("{")?"(?:.+?)":o).join("/")).map(s=>`(?:${s})`).join("|")})[^/]*$`;return new RegExp(r,"i")}var xr=No(zo),qr=xr.test.bind(xr),te={},Mo=function(e,t){te.global=new e.Group(m({id:"octokit-global",maxConcurrent:10},t)),te.search=new e.Group(m({id:"octokit-search",maxConcurrent:1,minTime:2e3},t)),te.write=new e.Group(m({id:"octokit-write",maxConcurrent:1,minTime:1e3},t)),te.notifications=new e.Group(m({id:"octokit-notifications",maxConcurrent:1,minTime:3e3},t))};function Re(e,t){let{enabled:r=!0,Bottleneck:s=Lr.default,id:o="no-id",timeout:i=1e3*60*2,connection:a}=t.throttle||{};if(!r)return{};let u={timeout:i};typeof a<"u"&&(u.connection=a),te.global==null&&Mo(s,u);let g=Object.assign(m({clustering:a!=null,triggersNotification:qr,fallbackSecondaryRateRetryAfter:60,retryAfterBaseValue:1e3,retryLimiter:new s,id:o},te),t.throttle);if(typeof g.onSecondaryRateLimit!="function"||typeof g.onRateLimit!="function")throw new Error(`octokit/plugin-throttling error:
        You must pass the onSecondaryRateLimit and onRateLimit error handlers.
        See https://octokit.github.io/rest.js/#throttling

        const octokit = new Octokit({
          throttle: {
            onSecondaryRateLimit: (retryAfter, options) => {/* ... */},
            onRateLimit: (retryAfter, options) => {/* ... */}
          }
        })
    `);let w={},T=new s.Events(w);return w.on("secondary-limit",g.onSecondaryRateLimit),w.on("rate-limit",g.onRateLimit),w.on("error",y=>e.log.warn("Error in throttling-plugin limit handler",y)),g.retryLimiter.on("failed",function(y,G){return d(this,null,function*(){let[R,F,j]=G.args,{pathname:z}=new URL(j.url,"http://github.test");if(!(z.startsWith("/graphql")&&y.status!==401||y.status===403||y.status===429))return;let D=~~F.retryCount;F.retryCount=D,j.request.retryCount=D;let{wantRetry:K,retryAfter:J=0}=yield function(){return d(this,null,function*(){if(/\bsecondary rate\b/i.test(y.message)){let I=Number(y.response.headers["retry-after"])||R.fallbackSecondaryRateRetryAfter;return{wantRetry:yield T.trigger("secondary-limit",I,j,e,D),retryAfter:I}}if(y.response.headers!=null&&y.response.headers["x-ratelimit-remaining"]==="0"||(y.response.data?.errors??[]).some(I=>I.type==="RATE_LIMITED")){let I=new Date(~~y.response.headers["x-ratelimit-reset"]*1e3).getTime(),C=Math.max(Math.ceil((I-Date.now())/1e3)+1,0);return{wantRetry:yield T.trigger("rate-limit",C,j,e,D),retryAfter:C}}return{}})}();if(K)return F.retryCount++,J*R.retryAfterBaseValue})}),e.hook.wrap("request",$o.bind(null,g)),{}}Re.VERSION=qo;Re.triggersNotification=qr;function $r(e){let t=e.clientType||"oauth-app",r=e.baseUrl||"https://github.com",s={clientType:t,allowSignup:e.allowSignup!==!1,clientId:e.clientId,login:e.login||null,redirectUrl:e.redirectUrl||null,state:e.state||Math.random().toString(36).substr(2),url:""};if(t==="oauth-app"){let o="scopes"in e?e.scopes:[];s.scopes=typeof o=="string"?o.split(/[,\s]+/).filter(Boolean):o}return s.url=Wo(`${r}/login/oauth/authorize`,s),s}function Wo(e,t){let r={allowSignup:"allow_signup",clientId:"client_id",login:"login",redirectUrl:"redirect_uri",scopes:"scope",state:"state"},s=e;return Object.keys(r).filter(o=>t[o]!==null).filter(o=>o!=="scopes"?!0:t.clientType==="github-app"?!1:!Array.isArray(t[o])||t[o].length>0).map(o=>[r[o],`${t[o]}`]).forEach(([o,i],a)=>{s+=a===0?"?":"&",s+=`${o}=${encodeURIComponent(i)}`}),s}function Mr(e){let t=e.endpoint.DEFAULTS;return/^https:\/\/(api\.)?github\.com$/.test(t.baseUrl)?"https://github.com":t.baseUrl.replace("/api/v3","")}function je(e,t,r){return d(this,null,function*(){let s=m({baseUrl:Mr(e),headers:{accept:"application/json"}},r),o=yield e(t,s);if("error"in o.data){let i=new x(`${o.data.error_description} (${o.data.error}, ${o.data.error_uri})`,400,{request:e.endpoint.merge(t,s)});throw i.response=o,i}return o})}function Wr(r){var s=r,{request:e=v}=s,t=U(s,["request"]);let o=Mr(e);return $r(b(m({},t),{baseUrl:o}))}function Br(e){return d(this,null,function*(){let t=e.request||v,r=yield je(t,"POST /login/oauth/access_token",{client_id:e.clientId,client_secret:e.clientSecret,code:e.code,redirect_uri:e.redirectUrl}),s={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.data.access_token,scopes:r.data.scope.split(/\s+/).filter(Boolean)};if(e.clientType==="github-app"){if("refresh_token"in r.data){let o=new Date(r.headers.date).getTime();s.refreshToken=r.data.refresh_token,s.expiresAt=Hr(o,r.data.expires_in),s.refreshTokenExpiresAt=Hr(o,r.data.refresh_token_expires_in)}delete s.scopes}return b(m({},r),{authentication:s})})}function Hr(e,t){return new Date(e+t*1e3).toISOString()}function Vr(e){return d(this,null,function*(){let t=e.request||v,r={client_id:e.clientId};return"scopes"in e&&Array.isArray(e.scopes)&&(r.scope=e.scopes.join(" ")),je(t,"POST /login/device/code",r)})}function ht(e){return d(this,null,function*(){let t=e.request||v,r=yield je(t,"POST /login/oauth/access_token",{client_id:e.clientId,device_code:e.code,grant_type:"urn:ietf:params:oauth:grant-type:device_code"}),s={clientType:e.clientType,clientId:e.clientId,token:r.data.access_token,scopes:r.data.scope.split(/\s+/).filter(Boolean)};if("clientSecret"in e&&(s.clientSecret=e.clientSecret),e.clientType==="github-app"){if("refresh_token"in r.data){let o=new Date(r.headers.date).getTime();s.refreshToken=r.data.refresh_token,s.expiresAt=zr(o,r.data.expires_in),s.refreshTokenExpiresAt=zr(o,r.data.refresh_token_expires_in)}delete s.scopes}return b(m({},r),{authentication:s})})}function zr(e,t){return new Date(e+t*1e3).toISOString()}function Ce(e){return d(this,null,function*(){let r=yield(e.request||v)("POST /applications/{client_id}/token",{headers:{authorization:`basic ${btoa(`${e.clientId}:${e.clientSecret}`)}`},client_id:e.clientId,access_token:e.token}),s={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.token,scopes:r.data.scopes};return r.data.expires_at&&(s.expiresAt=r.data.expires_at),e.clientType==="github-app"&&delete s.scopes,b(m({},r),{authentication:s})})}function Fe(e){return d(this,null,function*(){let t=e.request||v,r=yield je(t,"POST /login/oauth/access_token",{client_id:e.clientId,client_secret:e.clientSecret,grant_type:"refresh_token",refresh_token:e.refreshToken}),s=new Date(r.headers.date).getTime(),o={clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,token:r.data.access_token,refreshToken:r.data.refresh_token,expiresAt:Nr(s,r.data.expires_in),refreshTokenExpiresAt:Nr(s,r.data.refresh_token_expires_in)};return b(m({},r),{authentication:o})})}function Nr(e,t){return new Date(e+t*1e3).toISOString()}function Kr(e){return d(this,null,function*(){let T=e,{request:t,clientType:r,clientId:s,clientSecret:o,token:i}=T,a=U(T,["request","clientType","clientId","clientSecret","token"]),g=yield(e.request||v)("POST /applications/{client_id}/token/scoped",m({headers:{authorization:`basic ${btoa(`${s}:${o}`)}`},client_id:s,access_token:i},a)),w=Object.assign({clientType:r,clientId:s,clientSecret:o,token:g.data.token},g.data.expires_at?{expiresAt:g.data.expires_at}:{});return b(m({},g),{authentication:w})})}function ae(e){return d(this,null,function*(){let t=e.request||v,r=btoa(`${e.clientId}:${e.clientSecret}`),s=yield t("PATCH /applications/{client_id}/token",{headers:{authorization:`basic ${r}`},client_id:e.clientId,access_token:e.token}),o={clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:s.data.token,scopes:s.data.scopes};return s.data.expires_at&&(o.expiresAt=s.data.expires_at),e.clientType==="github-app"&&delete o.scopes,b(m({},s),{authentication:o})})}function ce(e){return d(this,null,function*(){let t=e.request||v,r=btoa(`${e.clientId}:${e.clientSecret}`);return t("DELETE /applications/{client_id}/token",{headers:{authorization:`basic ${r}`},client_id:e.clientId,access_token:e.token})})}function le(e){return d(this,null,function*(){let t=e.request||v,r=btoa(`${e.clientId}:${e.clientSecret}`);return t("DELETE /applications/{client_id}/grant",{headers:{authorization:`basic ${r}`},client_id:e.clientId,access_token:e.token})})}function Qr(e,t){return d(this,null,function*(){let r=Bo(e,t.auth);if(r)return r;let{data:s}=yield Vr({clientType:e.clientType,clientId:e.clientId,request:t.request||e.request,scopes:t.auth.scopes||e.scopes});yield e.onVerification(s);let o=yield gt(t.request||e.request,e.clientId,e.clientType,s);return e.authentication=o,o})}function Bo(e,t){if(t.refresh===!0||!e.authentication)return!1;if(e.clientType==="github-app")return e.authentication;let r=e.authentication,s=("scopes"in t&&t.scopes||e.scopes).join(" "),o=r.scopes.join(" ");return s===o?r:!1}function Jr(e){return d(this,null,function*(){yield new Promise(t=>setTimeout(t,e*1e3))})}function gt(e,t,r,s){return d(this,null,function*(){try{let o={clientId:t,request:e,code:s.device_code},{authentication:i}=r==="oauth-app"?yield ht(b(m({},o),{clientType:"oauth-app"})):yield ht(b(m({},o),{clientType:"github-app"}));return m({type:"token",tokenType:"oauth"},i)}catch(o){if(!o.response)throw o;let i=o.response.data.error;if(i==="authorization_pending")return yield Jr(s.interval),gt(e,t,r,s);if(i==="slow_down")return yield Jr(s.interval+7),gt(e,t,r,s);throw o}})}function Vo(e,t){return d(this,null,function*(){return Qr(e,{auth:t})})}function Ko(e,t,r,s){return d(this,null,function*(){let o=t.endpoint.merge(r,s);if(/\/login\/(oauth\/access_token|device\/code)$/.test(o.url))return t(o);let{token:i}=yield Qr(e,{request:t,auth:{type:"oauth"}});return o.headers.authorization=`token ${i}`,t(o)})}var Jo="0.0.0-development";function Yr(e){let t=e.request||v.defaults({headers:{"user-agent":`octokit-auth-oauth-device.js/${Jo} ${A()}`}}),i=e,{request:r=t}=i,s=U(i,["request"]),o=e.clientType==="github-app"?b(m({},s),{clientType:"github-app",request:r}):b(m({},s),{clientType:"oauth-app",request:r,scopes:e.scopes||[]});if(!e.clientId)throw new Error('[@octokit/auth-oauth-device] "clientId" option must be set (https://github.com/octokit/auth-oauth-device.js#usage)');if(!e.onVerification)throw new Error('[@octokit/auth-oauth-device] "onVerification" option must be a function (https://github.com/octokit/auth-oauth-device.js#usage)');return Object.assign(Vo.bind(null,o),{hook:Ko.bind(null,o)})}var Zr="0.0.0-development";function Xr(e){return d(this,null,function*(){if("code"in e.strategyOptions){let{authentication:t}=yield Br(b(m({clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,onTokenCreated:e.onTokenCreated},e.strategyOptions),{request:e.request}));return m({type:"token",tokenType:"oauth"},t)}if("onVerification"in e.strategyOptions){let r=yield Yr(b(m({clientType:e.clientType,clientId:e.clientId,onTokenCreated:e.onTokenCreated},e.strategyOptions),{request:e.request}))({type:"oauth"});return m({clientSecret:e.clientSecret},r)}if("token"in e.strategyOptions)return m({type:"token",tokenType:"oauth",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,onTokenCreated:e.onTokenCreated},e.strategyOptions);throw new Error("[@octokit/auth-oauth-user] Invalid strategy options")})}function mt(r){return d(this,arguments,function*(e,t={}){if(e.authentication||(e.authentication=e.clientType==="oauth-app"?yield Xr(e):yield Xr(e)),e.authentication.invalid)throw new Error("[@octokit/auth-oauth-user] Token is invalid");let s=e.authentication;if("expiresAt"in s&&(t.type==="refresh"||new Date(s.expiresAt)<new Date)){let{authentication:o}=yield Fe({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:s.refreshToken,request:e.request});e.authentication=m({tokenType:"oauth",type:"token"},o)}if(t.type==="refresh"){if(e.clientType==="oauth-app")throw new Error("[@octokit/auth-oauth-user] OAuth Apps do not support expiring tokens");if(!s.hasOwnProperty("expiresAt"))throw new Error("[@octokit/auth-oauth-user] Refresh token missing");yield e.onTokenCreated?.(e.authentication,{type:t.type})}if(t.type==="check"||t.type==="reset"){let o=t.type==="check"?Ce:ae;try{let{authentication:i}=yield o({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request});return e.authentication=m({tokenType:"oauth",type:"token"},i),t.type==="reset"&&(yield e.onTokenCreated?.(e.authentication,{type:t.type})),e.authentication}catch(i){throw i.status===404&&(i.message="[@octokit/auth-oauth-user] Token is invalid",e.authentication.invalid=!0),i}}if(t.type==="delete"||t.type==="deleteAuthorization"){let o=t.type==="delete"?ce:le;try{yield o({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:e.authentication.token,request:e.request})}catch(i){if(i.status!==404)throw i}return e.authentication.invalid=!0,e.authentication}return e.authentication})}var Qo=/\/applications\/[^/]+\/(token|grant)s?/;function ue(e){return e&&Qo.test(e)}function Yo(o,i,a){return d(this,arguments,function*(e,t,r,s={}){let u=t.endpoint.merge(r,s);if(/\/login\/(oauth\/access_token|device\/code)$/.test(u.url))return t(u);if(ue(u.url)){let w=btoa(`${e.clientId}:${e.clientSecret}`);return u.headers.authorization=`basic ${w}`,t(u)}let{token:g}=e.clientType==="oauth-app"?yield mt(b(m({},e),{request:t})):yield mt(b(m({},e),{request:t}));return u.headers.authorization="token "+g,t(u)})}function P(a){var u=a,{clientId:e,clientSecret:t,clientType:r="oauth-app",request:s=v.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${Zr} ${A()}`}}),onTokenCreated:o}=u,i=U(u,["clientId","clientSecret","clientType","request","onTokenCreated"]);let g=Object.assign({clientType:r,clientId:e,clientSecret:t,onTokenCreated:o,strategyOptions:i,request:s});return Object.assign(mt.bind(null,g),{hook:Yo.bind(null,g)})}P.VERSION=Zr;function Xo(e,t){return d(this,null,function*(){if(t.type==="oauth-app")return{type:"oauth-app",clientId:e.clientId,clientSecret:e.clientSecret,clientType:e.clientType,headers:{authorization:`basic ${btoa(`${e.clientId}:${e.clientSecret}`)}`}};if("factory"in t){let o=m(m({},t),e),{type:i}=o,a=U(o,["type"]);return t.factory(a)}let r=m({clientId:e.clientId,clientSecret:e.clientSecret,request:e.request},t);return(e.clientType==="oauth-app"?yield P(b(m({},r),{clientType:e.clientType})):yield P(b(m({},r),{clientType:e.clientType})))()})}function Zo(e,t,r,s){return d(this,null,function*(){let o=t.endpoint.merge(r,s);if(/\/login\/(oauth\/access_token|device\/code)$/.test(o.url))return t(o);if(e.clientType==="github-app"&&!ue(o.url))throw new Error(`[@octokit/auth-oauth-app] GitHub Apps cannot use their client ID/secret for basic authentication for endpoints other than "/applications/{client_id}/**". "${o.method} ${o.url}" is not supported.`);let i=btoa(`${e.clientId}:${e.clientSecret}`);o.headers.authorization=`basic ${i}`;try{return yield t(o)}catch(a){throw a.status!==401||(a.message=`[@octokit/auth-oauth-app] "${o.method} ${o.url}" does not support clientId/clientSecret basic authentication.`),a}})}var en="0.0.0-development";function Ue(e){let t=Object.assign({request:v.defaults({headers:{"user-agent":`octokit-auth-oauth-app.js/${en} ${A()}`}}),clientType:"oauth-app"},e);return Object.assign(Xo.bind(null,t),{hook:Zo.bind(null,t)})}function ts(e){return e.includes("-----BEGIN RSA PRIVATE KEY-----")}function rs(e){return e.includes("-----BEGIN OPENSSH PRIVATE KEY-----")}function ft(e){let t=new ArrayBuffer(e.length),r=new Uint8Array(t);for(let s=0,o=e.length;s<o;s++)r[s]=e.charCodeAt(s);return t}function ss(e){let t=e.trim().split(`
`).slice(1,-1).join(""),r=atob(t);return ft(r)}function os(e,t){return`${es(e)}.${es(t)}`}function ns(e){for(var t="",r=new Uint8Array(e),s=r.byteLength,o=0;o<s;o++)t+=String.fromCharCode(r[o]);return is(btoa(t))}function is(e){return e.replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")}function es(e){return is(btoa(JSON.stringify(e)))}var{subtle:_t}=globalThis.crypto;function as(r){return d(this,arguments,function*({privateKey:e,payload:t}){let s=e;if(ts(s))throw new Error("[universal-github-app-jwt] Private Key is in PKCS#1 format, but only PKCS#8 is supported. See https://github.com/gr2m/universal-github-app-jwt#private-key-formats");if(rs(s))throw new Error("[universal-github-app-jwt] Private Key is in OpenSSH format, but only PKCS#8 is supported. See https://github.com/gr2m/universal-github-app-jwt#private-key-formats");let o={name:"RSASSA-PKCS1-v1_5",hash:{name:"SHA-256"}},i={alg:"RS256",typ:"JWT"},a=ss(s),u=yield _t.importKey("pkcs8",a,o,!1,["sign"]),g=os(i,t),w=ft(g),T=yield _t.sign(o.name,u,w),y=ns(T);return`${g}.${y}`})}function Tt(s){return d(this,arguments,function*({id:e,privateKey:t,now:r=Math.floor(Date.now()/1e3)}){let o=t.replace(/\\n/g,`
`),i=r-30,a=i+60*10,g=yield as({privateKey:o,payload:{iat:i,exp:a,iss:e}});return{appId:e,expiration:a,token:g}})}var Ie=class{constructor(t=1e3,r=0){if(isNaN(t)||t<0)throw new Error("Invalid max value");if(isNaN(r)||r<0)throw new Error("Invalid ttl value");this.first=null,this.items=Object.create(null),this.last=null,this.size=0,this.max=t,this.ttl=r}bumpLru(t){if(this.last===t)return;let r=this.last,s=t.next,o=t.prev;this.first===t&&(this.first=s),t.next=null,t.prev=r,r.next=t,o!==null&&(o.next=s),s!==null&&(s.prev=o),this.last=t}clear(){this.items=Object.create(null),this.first=null,this.last=null,this.size=0}delete(t){if(Object.prototype.hasOwnProperty.call(this.items,t)){let r=this.items[t];delete this.items[t],this.size--,r.prev!==null&&(r.prev.next=r.next),r.next!==null&&(r.next.prev=r.prev),this.first===r&&(this.first=r.next),this.last===r&&(this.last=r.prev)}}deleteMany(t){for(var r=0;r<t.length;r++)this.delete(t[r])}evict(){if(this.size>0){let t=this.first;delete this.items[t.key],--this.size===0?(this.first=null,this.last=null):(this.first=t.next,this.first.prev=null)}}expiresAt(t){if(Object.prototype.hasOwnProperty.call(this.items,t))return this.items[t].expiry}get(t){if(Object.prototype.hasOwnProperty.call(this.items,t)){let r=this.items[t];if(this.ttl>0&&r.expiry<=Date.now()){this.delete(t);return}return this.bumpLru(r),r.value}}getMany(t){let r=[];for(var s=0;s<t.length;s++)r.push(this.get(t[s]));return r}keys(){return Object.keys(this.items)}set(t,r){if(Object.prototype.hasOwnProperty.call(this.items,t)){let o=this.items[t];o.value=r,o.expiry=this.ttl>0?Date.now()+this.ttl:this.ttl,this.last!==o&&this.bumpLru(o);return}this.max>0&&this.size===this.max&&this.evict();let s={expiry:this.ttl>0?Date.now()+this.ttl:this.ttl,key:t,prev:this.last,next:null,value:r};this.items[t]=s,++this.size===1?this.first=s:this.last.next=s,this.last=s}};function De(s){return d(this,arguments,function*({appId:e,privateKey:t,timeDifference:r}){try{let o={id:e,privateKey:t};r&&Object.assign(o,{now:Math.floor(Date.now()/1e3)+r});let i=yield Tt(o);return{type:"app",token:i.token,appId:i.appId,expiresAt:new Date(i.expiration*1e3).toISOString()}}catch(o){throw t==="-----BEGIN RSA PRIVATE KEY-----"?new Error("The 'privateKey` option contains only the first line '-----BEGIN RSA PRIVATE KEY-----'. If you are setting it using a `.env` file, make sure it is set on a single line with newlines replaced by '\n'"):o}})}function rn(){return new Ie(15e3,1e3*60*59)}function sn(e,t){return d(this,null,function*(){let r=ls(t),s=yield e.get(r);if(!s)return;let[o,i,a,u,g,w]=s.split("|"),T=t.permissions||g.split(/,/).reduce((y,G)=>(/!$/.test(G)?y[G.slice(0,-1)]="write":y[G]="read",y),{});return{token:o,createdAt:i,expiresAt:a,permissions:T,repositoryIds:t.repositoryIds,repositoryNames:t.repositoryNames,singleFileName:w,repositorySelection:u}})}function on(e,t,r){return d(this,null,function*(){let s=ls(t),o=t.permissions?"":Object.keys(r.permissions).map(a=>`${a}${r.permissions[a]==="write"?"!":""}`).join(","),i=[r.token,r.createdAt,r.expiresAt,r.repositorySelection,o,r.singleFileName].join("|");yield e.set(s,i)})}function ls({installationId:e,permissions:t={},repositoryIds:r=[],repositoryNames:s=[]}){let o=Object.keys(t).sort().map(u=>t[u]==="read"?u:`${u}!`).join(","),i=r.sort().join(","),a=s.join(",");return[e,i,a,o].filter(Boolean).join("|")}function cs({installationId:e,token:t,createdAt:r,expiresAt:s,repositorySelection:o,permissions:i,repositoryIds:a,repositoryNames:u,singleFileName:g}){return Object.assign({type:"token",tokenType:"installation",token:t,installationId:e,permissions:i,createdAt:r,expiresAt:s,repositorySelection:o},a?{repositoryIds:a}:null,u?{repositoryNames:u}:null,g?{singleFileName:g}:null)}function us(e,t,r){return d(this,null,function*(){let s=Number(t.installationId||e.installationId);if(!s)throw new Error("[@octokit/auth-app] installationId option is required for installation authentication.");if(t.factory){let I=m(m({},e),t),{type:C,factory:H,oauthApp:de}=I,Q=U(I,["type","factory","oauthApp"]);return H(Q)}let o=Object.assign({installationId:s},t);if(!t.refresh){let C=yield sn(e.cache,o);if(C){let{token:H,createdAt:de,expiresAt:Q,permissions:he,repositoryIds:$e,repositoryNames:ge,singleFileName:me,repositorySelection:He}=C;return cs({installationId:s,token:H,createdAt:de,expiresAt:Q,permissions:he,repositorySelection:He,repositoryIds:$e,repositoryNames:ge,singleFileName:me})}}let i=yield De(e),a=r||e.request,u={installation_id:s,mediaType:{previews:["machine-man"]},headers:{authorization:`bearer ${i.token}`}};t.repositoryIds&&Object.assign(u,{repository_ids:t.repositoryIds}),t.repositoryNames&&Object.assign(u,{repositories:t.repositoryNames}),t.permissions&&Object.assign(u,{permissions:t.permissions});let{data:{token:g,expires_at:w,repositories:T,permissions:y,repository_selection:G,single_file:R}}=yield a("POST /app/installations/{installation_id}/access_tokens",u),F=y||{},j=G||"all",z=T?T.map(C=>C.id):void 0,V=T?T.map(C=>C.name):void 0,D=new Date().toISOString(),K={token:g,createdAt:D,expiresAt:w,repositorySelection:j,permissions:F,repositoryIds:z,repositoryNames:V};R&&Object.assign(u,{singleFileName:R}),yield on(e.cache,o,K);let J={installationId:s,token:g,createdAt:D,expiresAt:w,repositorySelection:j,permissions:F,repositoryIds:z,repositoryNames:V};return R&&Object.assign(J,{singleFileName:R}),cs(J)})}function nn(e,t){return d(this,null,function*(){switch(t.type){case"app":return De(e);case"oauth-app":return e.oauthApp({type:"oauth-app"});case"installation":return us(e,b(m({},t),{type:"installation"}));case"oauth-user":return e.oauthApp(t);default:throw new Error(`Invalid auth type: ${t.type}`)}})}var an=["/app","/app/hook/config","/app/hook/deliveries","/app/hook/deliveries/{delivery_id}","/app/hook/deliveries/{delivery_id}/attempts","/app/installations","/app/installations/{installation_id}","/app/installations/{installation_id}/access_tokens","/app/installations/{installation_id}/suspended","/app/installation-requests","/marketplace_listing/accounts/{account_id}","/marketplace_listing/plan","/marketplace_listing/plans","/marketplace_listing/plans/{plan_id}/accounts","/marketplace_listing/stubbed/accounts/{account_id}","/marketplace_listing/stubbed/plan","/marketplace_listing/stubbed/plans","/marketplace_listing/stubbed/plans/{plan_id}/accounts","/orgs/{org}/installation","/repos/{owner}/{repo}/installation","/users/{username}/installation"];function cn(e){let r=`^(?:${e.map(s=>s.split("/").map(o=>o.startsWith("{")?"(?:.+?)":o).join("/")).map(s=>`(?:${s})`).join("|")})$`;return new RegExp(r,"i")}var ln=cn(an);function un(e){return!!e&&ln.test(e.split("?")[0])}var pn=5*1e3;function dn(e){return!(e.message.match(/'Expiration time' claim \('exp'\) must be a numeric value representing the future time at which the assertion expires/)||e.message.match(/'Issued at' claim \('iat'\) must be an Integer representing the time that the assertion was issued/))}function hn(e,t,r,s){return d(this,null,function*(){let o=t.endpoint.merge(r,s),i=o.url;if(/\/login\/oauth\/access_token$/.test(i))return t(o);if(un(i.replace(t.endpoint.DEFAULTS.baseUrl,""))){let{token:g}=yield De(e);o.headers.authorization=`bearer ${g}`;let w;try{w=yield t(o)}catch(T){if(dn(T)||typeof T.response.headers.date>"u")throw T;let y=Math.floor((Date.parse(T.response.headers.date)-Date.parse(new Date().toString()))/1e3);e.log.warn(T.message),e.log.warn(`[@octokit/auth-app] GitHub API time and system time are different by ${y} seconds. Retrying request with the difference accounted for.`);let{token:G}=yield De(b(m({},e),{timeDifference:y}));return o.headers.authorization=`bearer ${G}`,t(o)}return w}if(ue(i)){let g=yield e.oauthApp({type:"oauth-app"});return o.headers.authorization=g.headers.authorization,t(o)}let{token:a,createdAt:u}=yield us(e,{},t.defaults({baseUrl:o.baseUrl}));return o.headers.authorization=`token ${a}`,ps(e,t,o,u)})}function ps(e,t,r,s,o=0){return d(this,null,function*(){let i=+new Date-+new Date(s);try{return yield t(r)}catch(a){if(a.status!==401)throw a;if(i>=pn)throw o>0&&(a.message=`After ${o} retries within ${i/1e3}s of creating the installation access token, the response remains 401. At this point, the cause may be an authentication problem or a system outage. Please check https://www.githubstatus.com for status information`),a;++o;let u=o*1e3;return e.log.warn(`[@octokit/auth-app] Retrying after 401 response to account for token replication delay (retry: ${o}, wait: ${u/1e3}s)`),yield new Promise(g=>setTimeout(g,u)),ps(e,t,r,s,o)}})}var gn="7.1.5";function re(e){if(!e.appId)throw new Error("[@octokit/auth-app] appId option is required");if(!e.privateKey)throw new Error("[@octokit/auth-app] privateKey option is required");if("installationId"in e&&!e.installationId)throw new Error("[@octokit/auth-app] installationId is set to a falsy value");let t=Object.assign({warn:console.warn.bind(console)},e.log),r=e.request||v.defaults({headers:{"user-agent":`octokit-auth-app.js/${gn} ${A()}`}}),s=Object.assign({request:r,cache:rn()},e,e.installationId?{installationId:Number(e.installationId)}:{},{log:t,oauthApp:Ue({clientType:"github-app",clientId:e.clientId||"",clientSecret:e.clientSecret||"",request:r})});return Object.assign(nn.bind(null,s),{hook:hn.bind(null,s)})}function mn(e){return d(this,null,function*(){return{type:"unauthenticated",reason:e}})}function fn(e){return e.status!==403||!e.response?!1:e.response.headers["x-ratelimit-remaining"]==="0"}var _n=/\babuse\b/i;function Tn(e){return e.status!==403?!1:_n.test(e.message)}function En(e,t,r,s){return d(this,null,function*(){let o=t.endpoint.merge(r,s);return t(o).catch(i=>{throw i.status===404?(i.message=`Not found. May be due to lack of authentication. Reason: ${e}`,i):fn(i)?(i.message=`API rate limit exceeded. This maybe caused by the lack of authentication. Reason: ${e}`,i):Tn(i)?(i.message=`You have triggered an abuse detection mechanism. This maybe caused by the lack of authentication. Reason: ${e}`,i):i.status===401?(i.message=`Unauthorized. "${o.method} ${o.url}" failed most likely due to lack of authentication. Reason: ${e}`,i):(i.status>=400&&i.status<500&&(i.message=i.message.replace(/\.?$/,`. May be caused by lack of authentication (${e}).`)),i)})})}var B=function(t){if(!t||!t.reason)throw new Error("[@octokit/auth-unauthenticated] No reason passed to createUnauthenticatedAuth");return Object.assign(mn.bind(null,t.reason),{hook:En.bind(null,t.reason)})};var ds="7.1.6";function hs(e,t,r){if(Array.isArray(t)){for(let s of t)hs(e,s,r);return}e.eventHandlers[t]||(e.eventHandlers[t]=[]),e.eventHandlers[t].push(r)}var wn=ee.defaults({userAgent:`octokit-oauth-app.js/${ds} ${A()}`});function $(e,t){return d(this,null,function*(){let{name:r,action:s}=t;if(e.eventHandlers[`${r}.${s}`])for(let o of e.eventHandlers[`${r}.${s}`])yield o(t);if(e.eventHandlers[r])for(let o of e.eventHandlers[r])yield o(t)})}function yn(e,t){return d(this,null,function*(){return e.octokit.auth(b(m({type:"oauth-user"},t),{factory(s){return d(this,null,function*(){let o=new e.Octokit({authStrategy:P,auth:s}),i=yield o.auth({type:"get"});return yield $(e,{name:"token",action:"created",token:i.token,scopes:i.scopes,authentication:i,octokit:o}),o})}}))})}function bn(e,t){let r=b(m({clientId:e.clientId,request:e.octokit.request},t),{allowSignup:e.allowSignup??t.allowSignup,redirectUrl:t.redirectUrl??e.redirectUrl,scopes:t.scopes??e.defaultScopes});return Wr(m({clientType:e.clientType},r))}function vn(e,t){return d(this,null,function*(){let r=yield e.octokit.auth(m({type:"oauth-user"},t));return yield $(e,{name:"token",action:"created",token:r.token,scopes:r.scopes,authentication:r,octokit:new e.Octokit({authStrategy:P,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.token,scopes:r.scopes,refreshToken:r.refreshToken,expiresAt:r.expiresAt,refreshTokenExpiresAt:r.refreshTokenExpiresAt}})}),{authentication:r}})}function kn(e,t){return d(this,null,function*(){let r=yield Ce(m({clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request},t));return Object.assign(r.authentication,{type:"token",tokenType:"oauth"}),r})}function Gn(e,t){return d(this,null,function*(){let r=m({clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request},t);if(e.clientType==="oauth-app"){let i=yield ae(m({clientType:"oauth-app"},r)),a=Object.assign(i.authentication,{type:"token",tokenType:"oauth"});return yield $(e,{name:"token",action:"reset",token:i.authentication.token,scopes:i.authentication.scopes||void 0,authentication:a,octokit:new e.Octokit({authStrategy:P,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:i.authentication.token,scopes:i.authentication.scopes}})}),b(m({},i),{authentication:a})}let s=yield ae(m({clientType:"github-app"},r)),o=Object.assign(s.authentication,{type:"token",tokenType:"oauth"});return yield $(e,{name:"token",action:"reset",token:s.authentication.token,authentication:o,octokit:new e.Octokit({authStrategy:P,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:s.authentication.token}})}),b(m({},s),{authentication:o})})}function An(e,t){return d(this,null,function*(){if(e.clientType==="oauth-app")throw new Error("[@octokit/oauth-app] app.refreshToken() is not supported for OAuth Apps");let r=yield Fe({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request,refreshToken:t.refreshToken}),s=Object.assign(r.authentication,{type:"token",tokenType:"oauth"});return yield $(e,{name:"token",action:"refreshed",token:r.authentication.token,authentication:s,octokit:new e.Octokit({authStrategy:P,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.authentication.token}})}),b(m({},r),{authentication:s})})}function On(e,t){return d(this,null,function*(){if(e.clientType==="oauth-app")throw new Error("[@octokit/oauth-app] app.scopeToken() is not supported for OAuth Apps");let r=yield Kr(m({clientType:"github-app",clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request},t)),s=Object.assign(r.authentication,{type:"token",tokenType:"oauth"});return yield $(e,{name:"token",action:"scoped",token:r.authentication.token,authentication:s,octokit:new e.Octokit({authStrategy:P,auth:{clientType:e.clientType,clientId:e.clientId,clientSecret:e.clientSecret,token:r.authentication.token}})}),b(m({},r),{authentication:s})})}function Sn(e,t){return d(this,null,function*(){let r=m({clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request},t),s=e.clientType==="oauth-app"?yield ce(m({clientType:"oauth-app"},r)):yield ce(m({clientType:"github-app"},r));return yield $(e,{name:"token",action:"deleted",token:t.token,octokit:new e.Octokit({authStrategy:B,auth:{reason:'Handling "token.deleted" event. The access for the token has been revoked.'}})}),s})}function Pn(e,t){return d(this,null,function*(){let r=m({clientId:e.clientId,clientSecret:e.clientSecret,request:e.octokit.request},t),s=e.clientType==="oauth-app"?yield le(m({clientType:"oauth-app"},r)):yield le(m({clientType:"github-app"},r));return yield $(e,{name:"token",action:"deleted",token:t.token,octokit:new e.Octokit({authStrategy:B,auth:{reason:'Handling "token.deleted" event. The access for the token has been revoked.'}})}),yield $(e,{name:"authorization",action:"deleted",token:t.token,octokit:new e.Octokit({authStrategy:B,auth:{reason:'Handling "authorization.deleted" event. The access for the app has been revoked.'}})}),s})}var xe=class{static VERSION=ds;static defaults(e){return class extends this{constructor(...r){super(m(m({},e),r[0]))}}}constructor(e){let t=e.Octokit||wn;this.type=e.clientType||"oauth-app";let r=new t({authStrategy:Ue,auth:{clientType:this.type,clientId:e.clientId,clientSecret:e.clientSecret}}),s={clientType:this.type,clientId:e.clientId,clientSecret:e.clientSecret,defaultScopes:e.defaultScopes||[],allowSignup:e.allowSignup,baseUrl:e.baseUrl,redirectUrl:e.redirectUrl,log:e.log,Octokit:t,octokit:r,eventHandlers:{}};this.on=hs.bind(null,s),this.octokit=r,this.getUserOctokit=yn.bind(null,s),this.getWebFlowAuthorizationUrl=bn.bind(null,s),this.createToken=vn.bind(null,s),this.checkToken=kn.bind(null,s),this.resetToken=Gn.bind(null,s),this.refreshToken=An.bind(null,s),this.scopeToken=On.bind(null,s),this.deleteToken=Sn.bind(null,s),this.deleteAuthorization=Pn.bind(null,s)}type;on;octokit;getUserOctokit;getWebFlowAuthorizationUrl;createToken;checkToken;resetToken;refreshToken;scopeToken;deleteToken;deleteAuthorization};var Et=new TextEncoder;function Rn(e){let r=e.match(/[\dA-F]{2}/gi).map(function(s){return parseInt(s,16)});return new Uint8Array(r)}function jn(e){return Array.prototype.map.call(new Uint8Array(e),t=>t.toString(16).padStart(2,"0")).join("")}function gs(e){return d(this,null,function*(){return crypto.subtle.importKey("raw",Et.encode(e),{name:"HMAC",hash:{name:"SHA-256"}},!1,["sign","verify"])})}function ms(e,t){return d(this,null,function*(){if(!e||!t)throw new TypeError("[@octokit/webhooks-methods] secret & payload required for sign()");if(typeof t!="string")throw new TypeError("[@octokit/webhooks-methods] payload must be a string");let r="sha256",s=yield crypto.subtle.sign("HMAC",yield gs(e),Et.encode(t));return`${r}=${jn(s)}`})}function Le(e,t,r){return d(this,null,function*(){if(!e||!t||!r)throw new TypeError("[@octokit/webhooks-methods] secret, eventPayload & signature required");if(typeof t!="string")throw new TypeError("[@octokit/webhooks-methods] eventPayload must be a string");return yield crypto.subtle.verify("HMAC",yield gs(e),Rn(r.replace("sha256=","")),Et.encode(t))})}function fs(e,t,r,s){return d(this,null,function*(){if(yield Le(e,t,r))return!0;if(s!==void 0)for(let i of s){let a=yield Le(i,t,r);if(a)return a}return!1})}var Ts=e=>m({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console)},e),Cn=["branch_protection_configuration","branch_protection_configuration.disabled","branch_protection_configuration.enabled","branch_protection_rule","branch_protection_rule.created","branch_protection_rule.deleted","branch_protection_rule.edited","check_run","check_run.completed","check_run.created","check_run.requested_action","check_run.rerequested","check_suite","check_suite.completed","check_suite.requested","check_suite.rerequested","code_scanning_alert","code_scanning_alert.appeared_in_branch","code_scanning_alert.closed_by_user","code_scanning_alert.created","code_scanning_alert.fixed","code_scanning_alert.reopened","code_scanning_alert.reopened_by_user","commit_comment","commit_comment.created","create","custom_property","custom_property.created","custom_property.deleted","custom_property.promote_to_enterprise","custom_property.updated","custom_property_values","custom_property_values.updated","delete","dependabot_alert","dependabot_alert.auto_dismissed","dependabot_alert.auto_reopened","dependabot_alert.created","dependabot_alert.dismissed","dependabot_alert.fixed","dependabot_alert.reintroduced","dependabot_alert.reopened","deploy_key","deploy_key.created","deploy_key.deleted","deployment","deployment.created","deployment_protection_rule","deployment_protection_rule.requested","deployment_review","deployment_review.approved","deployment_review.rejected","deployment_review.requested","deployment_status","deployment_status.created","discussion","discussion.answered","discussion.category_changed","discussion.closed","discussion.created","discussion.deleted","discussion.edited","discussion.labeled","discussion.locked","discussion.pinned","discussion.reopened","discussion.transferred","discussion.unanswered","discussion.unlabeled","discussion.unlocked","discussion.unpinned","discussion_comment","discussion_comment.created","discussion_comment.deleted","discussion_comment.edited","fork","github_app_authorization","github_app_authorization.revoked","gollum","installation","installation.created","installation.deleted","installation.new_permissions_accepted","installation.suspend","installation.unsuspend","installation_repositories","installation_repositories.added","installation_repositories.removed","installation_target","installation_target.renamed","issue_comment","issue_comment.created","issue_comment.deleted","issue_comment.edited","issues","issues.assigned","issues.closed","issues.deleted","issues.demilestoned","issues.edited","issues.labeled","issues.locked","issues.milestoned","issues.opened","issues.pinned","issues.reopened","issues.transferred","issues.typed","issues.unassigned","issues.unlabeled","issues.unlocked","issues.unpinned","issues.untyped","label","label.created","label.deleted","label.edited","marketplace_purchase","marketplace_purchase.cancelled","marketplace_purchase.changed","marketplace_purchase.pending_change","marketplace_purchase.pending_change_cancelled","marketplace_purchase.purchased","member","member.added","member.edited","member.removed","membership","membership.added","membership.removed","merge_group","merge_group.checks_requested","merge_group.destroyed","meta","meta.deleted","milestone","milestone.closed","milestone.created","milestone.deleted","milestone.edited","milestone.opened","org_block","org_block.blocked","org_block.unblocked","organization","organization.deleted","organization.member_added","organization.member_invited","organization.member_removed","organization.renamed","package","package.published","package.updated","page_build","personal_access_token_request","personal_access_token_request.approved","personal_access_token_request.cancelled","personal_access_token_request.created","personal_access_token_request.denied","ping","project","project.closed","project.created","project.deleted","project.edited","project.reopened","project_card","project_card.converted","project_card.created","project_card.deleted","project_card.edited","project_card.moved","project_column","project_column.created","project_column.deleted","project_column.edited","project_column.moved","projects_v2","projects_v2.closed","projects_v2.created","projects_v2.deleted","projects_v2.edited","projects_v2.reopened","projects_v2_item","projects_v2_item.archived","projects_v2_item.converted","projects_v2_item.created","projects_v2_item.deleted","projects_v2_item.edited","projects_v2_item.reordered","projects_v2_item.restored","projects_v2_status_update","projects_v2_status_update.created","projects_v2_status_update.deleted","projects_v2_status_update.edited","public","pull_request","pull_request.assigned","pull_request.auto_merge_disabled","pull_request.auto_merge_enabled","pull_request.closed","pull_request.converted_to_draft","pull_request.demilestoned","pull_request.dequeued","pull_request.edited","pull_request.enqueued","pull_request.labeled","pull_request.locked","pull_request.milestoned","pull_request.opened","pull_request.ready_for_review","pull_request.reopened","pull_request.review_request_removed","pull_request.review_requested","pull_request.synchronize","pull_request.unassigned","pull_request.unlabeled","pull_request.unlocked","pull_request_review","pull_request_review.dismissed","pull_request_review.edited","pull_request_review.submitted","pull_request_review_comment","pull_request_review_comment.created","pull_request_review_comment.deleted","pull_request_review_comment.edited","pull_request_review_thread","pull_request_review_thread.resolved","pull_request_review_thread.unresolved","push","registry_package","registry_package.published","registry_package.updated","release","release.created","release.deleted","release.edited","release.prereleased","release.published","release.released","release.unpublished","repository","repository.archived","repository.created","repository.deleted","repository.edited","repository.privatized","repository.publicized","repository.renamed","repository.transferred","repository.unarchived","repository_advisory","repository_advisory.published","repository_advisory.reported","repository_dispatch","repository_dispatch.sample.collected","repository_import","repository_ruleset","repository_ruleset.created","repository_ruleset.deleted","repository_ruleset.edited","repository_vulnerability_alert","repository_vulnerability_alert.create","repository_vulnerability_alert.dismiss","repository_vulnerability_alert.reopen","repository_vulnerability_alert.resolve","secret_scanning_alert","secret_scanning_alert.created","secret_scanning_alert.publicly_leaked","secret_scanning_alert.reopened","secret_scanning_alert.resolved","secret_scanning_alert.validated","secret_scanning_alert_location","secret_scanning_alert_location.created","secret_scanning_scan","secret_scanning_scan.completed","security_advisory","security_advisory.published","security_advisory.updated","security_advisory.withdrawn","security_and_analysis","sponsorship","sponsorship.cancelled","sponsorship.created","sponsorship.edited","sponsorship.pending_cancellation","sponsorship.pending_tier_change","sponsorship.tier_changed","star","star.created","star.deleted","status","sub_issues","sub_issues.parent_issue_added","sub_issues.parent_issue_removed","sub_issues.sub_issue_added","sub_issues.sub_issue_removed","team","team.added_to_repository","team.created","team.deleted","team.edited","team.removed_from_repository","team_add","watch","watch.started","workflow_dispatch","workflow_job","workflow_job.completed","workflow_job.in_progress","workflow_job.queued","workflow_job.waiting","workflow_run","workflow_run.completed","workflow_run.in_progress","workflow_run.requested"];function wt(e,t,r){e.hooks[t]||(e.hooks[t]=[]),e.hooks[t].push(r)}function Es(e,t,r){if(Array.isArray(t)){t.forEach(s=>Es(e,s,r));return}if(["*","error"].includes(t)){let s=t==="*"?"any":t,o=`Using the "${t}" event with the regular Webhooks.on() function is not supported. Please use the Webhooks.on${s.charAt(0).toUpperCase()+s.slice(1)}() method instead`;throw new Error(o)}Cn.includes(t)||e.log.warn(`"${t}" is not a known webhook name (https://developer.github.com/v3/activity/events/types/)`),wt(e,t,r)}function Fn(e,t){wt(e,"*",t)}function Un(e,t){wt(e,"error",t)}function _s(e,t){let r;try{r=e(t)}catch(s){console.log('FATAL: Error occurred in "error" event handler'),console.log(s)}r&&r.catch&&r.catch(s=>{console.log('FATAL: Error occurred in "error" event handler'),console.log(s)})}function In(e,t,r){let s=[e.hooks[r],e.hooks["*"]];return t&&s.unshift(e.hooks[`${r}.${t}`]),[].concat(...s.filter(Boolean))}function Dn(e,t){let r=e.hooks.error||[];if(t instanceof Error){let a=Object.assign(new AggregateError([t],t.message),{event:t});return r.forEach(u=>_s(u,a)),Promise.reject(a)}if(!t||!t.name){let a=new Error("Event name not passed");throw new AggregateError([a],a.message)}if(!t.payload){let a=new Error("Event name not passed");throw new AggregateError([a],a.message)}let s=In(e,"action"in t.payload?t.payload.action:null,t.name);if(s.length===0)return Promise.resolve();let o=[],i=s.map(a=>{let u=Promise.resolve(t);return e.transform&&(u=u.then(e.transform)),u.then(g=>a(g)).catch(g=>o.push(Object.assign(g,{event:t})))});return Promise.all(i).then(()=>{if(o.length===0)return;let a=new AggregateError(o,o.map(u=>u.message).join(`
`));throw Object.assign(a,{event:t}),r.forEach(u=>_s(u,a)),a})}function ws(e,t,r){if(Array.isArray(t)){t.forEach(s=>ws(e,s,r));return}if(e.hooks[t]){for(let s=e.hooks[t].length-1;s>=0;s--)if(e.hooks[t][s]===r){e.hooks[t].splice(s,1);return}}}function xn(e){let t={hooks:{},log:Ts(e&&e.log)};return e&&e.transform&&(t.transform=e.transform),{on:Es.bind(null,t),onAny:Fn.bind(null,t),onError:Un.bind(null,t),removeListener:ws.bind(null,t),receive:Dn.bind(null,t)}}function Ln(e,t){return d(this,null,function*(){if(!(yield fs(e.secret,t.payload,t.signature,e.additionalSecrets).catch(()=>!1))){let o=new Error("[@octokit/webhooks] signature does not match event payload and secret");return e.eventHandler.receive(Object.assign(o,{event:t,status:400}))}let s;try{s=JSON.parse(t.payload)}catch(o){throw o.message="Invalid JSON",o.status=400,new AggregateError([o],o.message)}return e.eventHandler.receive({id:t.id,name:t.name,payload:s})})}var ys=class{sign;verify;on;onAny;onError;removeListener;receive;verifyAndReceive;constructor(e){if(!e||!e.secret)throw new Error("[@octokit/webhooks] options.secret required");let t={eventHandler:xn(e),secret:e.secret,additionalSecrets:e.additionalSecrets,hooks:{},log:Ts(e.log)};this.sign=ms.bind(null,e.secret),this.verify=Le.bind(null,e.secret),this.on=t.eventHandler.on,this.onAny=t.eventHandler.onAny,this.onError=t.eventHandler.onError,this.removeListener=t.eventHandler.removeListener,this.receive=t.eventHandler.receive,this.verifyAndReceive=Ln.bind(null,t)}};var qn="15.1.5";function $n(e,t){return new ys({secret:t.secret,transform:r=>d(this,null,function*(){if(!("installation"in r.payload)||typeof r.payload.installation!="object"){let i=new e.constructor({authStrategy:B,auth:{reason:'"installation" key missing in webhook event payload'}});return b(m({},r),{octokit:i})}let s=r.payload.installation.id,o=yield e.auth({type:"installation",installationId:s,factory(i){return new i.octokit.constructor(b(m({},i.octokitOptions),{authStrategy:re,auth:b(m({},i),{installationId:s})}))}});return o.hook.before("request",i=>{i.headers["x-github-delivery"]=r.id}),b(m({},r),{octokit:o})})})}function bs(e,t){return d(this,null,function*(){return e.octokit.auth({type:"installation",installationId:t,factory(r){let s=b(m({},r.octokitOptions),{authStrategy:re,auth:b(m({},r),{installationId:t})});return new r.octokit.constructor(s)}})})}function Hn(e){return Object.assign(zn.bind(null,e),{iterator:vs.bind(null,e)})}function zn(e,t){return d(this,null,function*(){let r=vs(e)[Symbol.asyncIterator](),s=yield r.next();for(;!s.done;)yield t(s.value),s=yield r.next()})}function vs(e){return{[Symbol.asyncIterator](){return Te(this,null,function*(){let r=Pe.iterator(e.octokit,"GET /app/installations");try{for(var s=Y(r),o,i,a;o=!(i=yield new q(s.next())).done;o=!1){let{data:u}=i.value;for(let g of u)yield{octokit:yield new q(bs(e,g.id)),installation:g}}}catch{a=[i]}finally{try{o&&(i=s.return)&&(yield new q(i.call(s)))}finally{if(a)throw a[0]}}})}}}function Nn(e){return Object.assign(Mn.bind(null,e),{iterator:ks.bind(null,e)})}function Mn(e,t,r){return d(this,null,function*(){let s=ks(e,r?t:void 0)[Symbol.asyncIterator](),o=yield s.next();for(;!o.done;)r?yield r(o.value):yield t(o.value),o=yield s.next()})}function Wn(e,t){return{[Symbol.asyncIterator](){return Te(this,null,function*(){yield{octokit:yield new q(e.getInstallationOctokit(t))}})}}}function ks(e,t){return{[Symbol.asyncIterator](){return Te(this,null,function*(){let s=t?Wn(e,t.installationId):e.eachInstallation.iterator();try{for(var g=Y(s),w,T,y;w=!(T=yield new q(g.next())).done;w=!1){let{octokit:G}=T.value;let R=Pe.iterator(G,"GET /installation/repositories");try{for(var o=Y(R),i,a,u;i=!(a=yield new q(o.next())).done;i=!1){let{data:F}=a.value;for(let j of F)yield{octokit:G,repository:j}}}catch{u=[a]}finally{try{i&&(a=o.return)&&(yield new q(a.call(o)))}finally{if(u)throw u[0]}}}}catch{y=[T]}finally{try{w&&(T=g.return)&&(yield new q(T.call(g)))}finally{if(y)throw y[0]}}})}}}function Bn(e){let t;return function(){return d(this,arguments,function*(s={}){t||(t=Vn(e));let o=yield t,i=new URL(o);return s.target_id!==void 0&&(i.pathname+="/permissions",i.searchParams.append("target_id",s.target_id.toFixed())),s.state!==void 0&&i.searchParams.append("state",s.state),i.href})}}function Vn(e){return d(this,null,function*(){let{data:t}=yield e.octokit.request("GET /app");if(!t)throw new Error("[@octokit/app] unable to fetch metadata for app");return`${t.html_url}/installations/new`})}var Gs=class{static VERSION=qn;static defaults(e){return class extends this{constructor(...r){super(m(m({},e),r[0]))}}}octokit;webhooks;oauth;getInstallationOctokit;eachInstallation;eachRepository;getInstallationUrl;log;constructor(e){let t=e.Octokit||ee,r=Object.assign({appId:e.appId,privateKey:e.privateKey},e.oauth?{clientId:e.oauth.clientId,clientSecret:e.oauth.clientSecret}:{}),s={authStrategy:re,auth:r};"log"in e&&typeof e.log<"u"&&(s.log=e.log),this.octokit=new t(s),this.log=Object.assign({debug:()=>{},info:()=>{},warn:console.warn.bind(console),error:console.error.bind(console)},e.log),e.webhooks?this.webhooks=$n(this.octokit,e.webhooks):Object.defineProperty(this,"webhooks",{get(){throw new Error("[@octokit/app] webhooks option not set")}}),e.oauth?this.oauth=new xe(b(m({},e.oauth),{clientType:"github-app",Octokit:t})):Object.defineProperty(this,"oauth",{get(){throw new Error("[@octokit/app] oauth.clientId / oauth.clientSecret options are not set")}}),this.getInstallationOctokit=bs.bind(null,this),this.eachInstallation=Hn(this),this.eachRepository=Nn(this),this.getInstallationUrl=Bn(this)}};var Kn="0.0.0-development",qe=ee.plugin(at,st,Fr,pt,Re).defaults({userAgent:`octokit.js/${Kn}`,throttle:{onRateLimit:Jn,onSecondaryRateLimit:Qn}});function Jn(e,t,r){if(r.log.warn(`Request quota exhausted for request ${t.method} ${t.url}`),t.request.retryCount===0)return r.log.info(`Retrying after ${e} seconds!`),!0}function Qn(e,t,r){if(r.log.warn(`SecondaryRateLimit detected for request ${t.method} ${t.url}`),t.request.retryCount===0)return r.log.info(`Retrying after ${e} seconds!`),!0}var tl=Gs.defaults({Octokit:qe}),rl=xe.defaults({Octokit:qe});function Xn(e,t){if(e&1&&(ye(0,"li",0),ve(1,"ng-doc-page-link",1),Ke(2),be()),e&2){let r=t.$implicit;we(),Mt("href",r.html_url),we(),Jt(" ",r.title," ")}}function Zn(e,t){e&1&&(ye(0,"ul"),Vt(1,Xn,3,2,"li",0,Bt),be()),e&2&&(we(),Kt(t))}function ei(e,t){e&1&&(ye(0,"p"),Ke(1,"Loading..."),be())}var As=(()=>{class e{constructor(){this.octokit=new qe,this.issues$=this.getIssues()}getIssues(){return zt(this.octokit.request("GET /repos/{owner}/{repo}/issues",{owner:"artem-mangilev",repo:"ngx-vflow",state:"open"})).pipe(Be(r=>r.data),Be(r=>r.filter(s=>!!s.labels.find(o=>o.name==="enhancement"))))}static{this.\u0275fac=function(s){return new(s||e)}}static{this.\u0275cmp=Ee({type:e,selectors:[["ng-component"]],standalone:!0,features:[ke],decls:3,vars:3,consts:[[1,"list-item"],[3,"href"]],template:function(s,o){if(s&1&&(Ve(0,Zn,3,0,"ul"),Yt(1,"async"),Ve(2,ei,2,0)),s&2){let i;Wt(0,(i=Xt(1,1,o.issues$))?0:2,i)}},dependencies:[Zt,er],styles:[".list-item[_ngcontent-%COMP%]{margin-bottom:8px}"],changeDetection:0})}}return e})();var ti={title:"Roadmap",mdFile:"./index.md",category:rr,order:3,demos:{RoadmapListComponent:As}},pe=ti;var Os=[];var ri={RoadmapListComponent:[{title:"TypeScript",code:`<pre class="ngde hljs"><code lang="typescript" class="hljs language-typescript code-lines ngde"><span class="line ngde"><span class="hljs-keyword ngde">import</span> { <span class="hljs-title class_ ngde">AsyncPipe</span> } <span class="hljs-keyword ngde">from</span> <span class="hljs-string ngde">'@angular/common'</span>;
</span><span class="line ngde"><span class="hljs-keyword ngde">import</span> { <span class="hljs-title class_ ngde">ChangeDetectionStrategy</span>, <span class="hljs-title class_ ngde">Component</span> } <span class="hljs-keyword ngde">from</span> <span class="hljs-string ngde">'@angular/core'</span>;
</span><span class="line ngde"><span class="hljs-keyword ngde">import</span> { <span class="hljs-title class_ ngde">NgDocPageLinkComponent</span> } <span class="hljs-keyword ngde">from</span> <span class="hljs-string ngde">'@ng-doc/app'</span>;
</span><span class="line ngde"><span class="hljs-keyword ngde">import</span> { <span class="hljs-title class_ ngde">Octokit</span> } <span class="hljs-keyword ngde">from</span> <span class="hljs-string ngde">'octokit'</span>;
</span><span class="line ngde"><span class="hljs-keyword ngde">import</span> { <span class="hljs-keyword ngde">from</span>, map, <span class="hljs-title class_ ngde">Observable</span> } <span class="hljs-keyword ngde">from</span> <span class="hljs-string ngde">'rxjs'</span>;
</span><span class="line ngde">
</span><span class="line ngde"><span class="hljs-meta ngde">@Component</span>({
</span><span class="line ngde">  <span class="hljs-attr ngde">templateUrl</span>: <span class="hljs-string ngde">'./roadmap-list.component.html'</span>,
</span><span class="line ngde">  <span class="hljs-attr ngde">standalone</span>: <span class="hljs-literal ngde">true</span>,
</span><span class="line ngde">  <span class="hljs-attr ngde">changeDetection</span>: <span class="hljs-title class_ ngde">ChangeDetectionStrategy</span>.<span class="hljs-property ngde">OnPush</span>,
</span><span class="line ngde">  <span class="hljs-attr ngde">imports</span>: [<span class="hljs-title class_ ngde">AsyncPipe</span>, <span class="hljs-title class_ ngde">NgDocPageLinkComponent</span>],
</span><span class="line ngde">  <span class="hljs-attr ngde">styleUrl</span>: <span class="hljs-string ngde">'./roadmap-list.component.scss'</span>,
</span><span class="line ngde">})
</span><span class="line ngde"><span class="hljs-keyword ngde">export</span> <span class="hljs-keyword ngde">class</span> <span class="hljs-title class_ ngde">RoadmapListComponent</span> {
</span><span class="line ngde">  <span class="hljs-keyword ngde">private</span> octokit = <span class="hljs-keyword ngde">new</span> <span class="hljs-title class_ ngde">Octokit</span>();
</span><span class="line ngde">
</span><span class="line ngde">  issues$ = <span class="hljs-variable language_ ngde">this</span>.<span class="hljs-title function_ ngde">getIssues</span>();
</span><span class="line ngde">
</span><span class="line ngde">  <span class="hljs-keyword ngde">private</span> <span class="hljs-title function_ ngde">getIssues</span>(): <span class="hljs-title class_ ngde">Observable</span>&#x3C;<span class="hljs-built_in ngde">any</span>[]> {
</span><span class="line ngde">    <span class="hljs-keyword ngde">return</span> <span class="hljs-title function_ ngde">from</span>(
</span><span class="line ngde">      <span class="hljs-variable language_ ngde">this</span>.<span class="hljs-property ngde">octokit</span>.<span class="hljs-title function_ ngde">request</span>(<span class="hljs-string ngde">'GET /repos/{owner}/{repo}/issues'</span>, {
</span><span class="line ngde">        <span class="hljs-attr ngde">owner</span>: <span class="hljs-string ngde">'artem-mangilev'</span>,
</span><span class="line ngde">        <span class="hljs-attr ngde">repo</span>: <span class="hljs-string ngde">'ngx-vflow'</span>,
</span><span class="line ngde">        <span class="hljs-attr ngde">state</span>: <span class="hljs-string ngde">'open'</span>,
</span><span class="line ngde">      }),
</span><span class="line ngde">    ).<span class="hljs-title function_ ngde">pipe</span>(
</span><span class="line ngde">      <span class="hljs-title function_ ngde">map</span>(<span class="hljs-function ngde">(<span class="hljs-params ngde">response: <span class="hljs-built_in ngde">any</span></span>) =></span> response.<span class="hljs-property ngde">data</span> <span class="hljs-keyword ngde">as</span> <span class="hljs-built_in ngde">any</span>[]),
</span><span class="line ngde">      <span class="hljs-title function_ ngde">map</span>(<span class="hljs-function ngde">(<span class="hljs-params ngde">issues</span>) =></span> issues.<span class="hljs-title function_ ngde">filter</span>(<span class="hljs-function ngde">(<span class="hljs-params ngde">issue</span>) =></span> !!issue.<span class="hljs-property ngde">labels</span>.<span class="hljs-title function_ ngde">find</span>(<span class="hljs-function ngde">(<span class="hljs-params ngde">label: <span class="hljs-built_in ngde">any</span></span>) =></span> label.<span class="hljs-property ngde">name</span> === <span class="hljs-string ngde">'enhancement'</span>))),
</span><span class="line ngde">    );
</span><span class="line ngde">  }
</span><span class="line ngde">}
</span></code></pre>`},{title:"HTML",code:`<pre class="ngde hljs"><code lang="html" class="hljs language-html code-lines ngde"><span class="line ngde">@if (issues$ | async; as issues) {
</span><span class="line ngde">  <span class="hljs-tag ngde">&#x3C;<span class="hljs-name ngde">ul</span>></span>
</span><span class="line ngde">    @for (issue of issues; track $index) {
</span><span class="line ngde">      <span class="hljs-tag ngde">&#x3C;<span class="hljs-name ngde">li</span> <span class="hljs-attr ngde">class</span>=<span class="hljs-string ngde">"list-item"</span>></span>
</span><span class="line ngde">        <span class="hljs-tag ngde">&#x3C;<span class="hljs-name ngde">ng-doc-page-link</span> [<span class="hljs-attr ngde">href</span>]=<span class="hljs-string ngde">"issue.html_url"</span> /></span>
</span><span class="line ngde">        {{ issue.title }}
</span><span class="line ngde">      <span class="hljs-tag ngde">&#x3C;/<span class="hljs-name ngde">li</span>></span>
</span><span class="line ngde">    }
</span><span class="line ngde">  <span class="hljs-tag ngde">&#x3C;/<span class="hljs-name ngde">ul</span>></span>
</span><span class="line ngde">} @else {
</span><span class="line ngde">  <span class="hljs-tag ngde">&#x3C;<span class="hljs-name ngde">p</span>></span>Loading...<span class="hljs-tag ngde">&#x3C;/<span class="hljs-name ngde">p</span>></span>
</span><span class="line ngde">}
</span></code></pre>`},{title:"SCSS",code:`<pre class="ngde hljs"><code lang="scss" class="hljs language-scss code-lines ngde"><span class="line ngde"><span class="hljs-selector-class ngde">.list-item</span> {
</span><span class="line ngde">  <span class="hljs-attribute ngde">margin-bottom</span>: <span class="hljs-number ngde">8px</span>;
</span><span class="line ngde">}
</span></code></pre>`}]},Ss=ri;var si='<h1 id="roadmap" class="ngde">Roadmap<a title="Link to heading" class="ng-doc-header-link ngde" href="/getting-started/roadmap#roadmap"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h1><p class="ngde">This is a roadmap for <code class="ngde">ngx-vflow</code>:</p><ng-doc-demo componentname="RoadmapListComponent" indexable="false" class="ngde"><div id="options" class="ngde">{"container":false}</div></ng-doc-demo>',oi=(()=>{class e extends Je{constructor(){super(),this.routePrefix="",this.pageType="guide",this.pageContent=si,this.editSourceFileUrl="https://github.com/artem-mangilev/ngx-vflow/edit/main/projects/ngx-vflow-demo/src/app/categories/getting-started/pages/roadmap/index.md?message=docs(roadmap): describe your changes here...",this.page=pe,this.demoAssets=Ss}static{this.\u0275fac=function(s){return new(s||e)}}static{this.\u0275cmp=Ee({type:e,selectors:[["ng-doc-page-getting-started-roadmap"]],standalone:!0,features:[Qt([{provide:Je,useExisting:e},Os,pe.providers??[]]),Nt,ke],decls:1,vars:0,template:function(s,o){s&1&&ve(0,"ng-doc-page")},dependencies:[tr],encapsulation:2,changeDetection:0})}}return e})(),ni=[b(m({},(0,Ps.isRoute)(pe.route)?pe.route:{}),{path:"",component:oi,title:"Roadmap"})],El=ni;export{oi as DynamicComponent,El as default};
